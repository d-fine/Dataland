// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
package org.dataland.datalandqaservice.org.dataland.datalandqaservice.frameworks.${frameworkPackageName}

import com.fasterxml.jackson.databind.ObjectMapper
import io.swagger.v3.oas.annotations.Operation
import org.dataland.datalandqaservice.org.dataland.datalandqaservice.controller.QaReportController
import org.dataland.datalandqaservice.org.dataland.datalandqaservice.services.QaReportSecurityPolicy
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import org.springframework.http.ResponseEntity
import org.dataland.datalandqaservice.org.dataland.datalandqaservice.model.reports.QaReportMetaInformation
import org.dataland.datalandqaservice.org.dataland.datalandqaservice.model.reports.QaReportStatusPatch
import org.dataland.datalandqaservice.org.dataland.datalandqaservice.model.reports.QaReportWithMetaInformation
<#list frameworkDataType.imports as import>import ${import}
</#list>
<#list frameworkQaReportManagerDataType.imports as import>import ${import}
</#list>

/**
* A REST controller for the ${frameworkIdentifier} QA report API.
*/
@RequestMapping("/data/${frameworkIdentifier}")
@RestController
class ${frameworkDataType.shortenedQualifier}QaReportController(
@Autowired objectMapper: ObjectMapper,
@Autowired qaReportManager: ${frameworkQaReportManagerDataType.shortenedQualifier},
@Autowired qaReportSecurityPolicy: QaReportSecurityPolicy,
) : QaReportController<${frameworkDataType.shortenedQualifier}>(
objectMapper = objectMapper,
qaReportManager = qaReportManager,
qaReportSecurityPolicy = qaReportSecurityPolicy,
clazz = ${frameworkDataType.shortenedQualifier}::class.java,
dataType = "${frameworkIdentifier}",
) {
    @Operation(operationId = "post${frameworkDataType.shortenedQualifier}QaReport")
    override fun postQaReport(
        dataId: String,
        qaReport: ${frameworkDataType.shortenedQualifier},
    ): ResponseEntity<QaReportMetaInformation> {
        return super.postQaReport(dataId, qaReport)
    }

    @Operation(operationId = "get${frameworkDataType.shortenedQualifier}QaReport")
    override fun getQaReport(
        dataId: String,
        qaReportId: String,
    ): ResponseEntity<QaReportWithMetaInformation<${frameworkDataType.shortenedQualifier}>> {
        return super.getQaReport(dataId, qaReportId)
    }

    @Operation(operationId = "set${frameworkDataType.shortenedQualifier}QaReportStatus")
    override fun setQaReportStatus(dataId: String, qaReportId: String, statusPatch: QaReportStatusPatch) {
        super.setQaReportStatus(dataId, qaReportId, statusPatch)
    }

    @Operation(operationId = "get${frameworkDataType.shortenedQualifier}AllQaReportsForDataset")
    override fun getAllQaReportsForDataset(
        dataId: String,
        showInactive: Boolean?,
        reporterUserId: String?,
    ): ResponseEntity<List<QaReportWithMetaInformation<${frameworkDataType.shortenedQualifier}>>> {
        return super.getAllQaReportsForDataset(dataId, showInactive, reporterUserId)
    }
}

