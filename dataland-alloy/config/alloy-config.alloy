// ---------------------------------------------------------------------------------------------------------------------
// var logs
// ---------------------------------------------------------------------------------------------------------------------

local.file_match "system" {
	path_targets = [{
		__address__ = "loki:3100",
		__path__    = "/var/log/*log",
		job         = "varlogs",
	}]
}

loki.source.file "system" {
	targets               = local.file_match.system.targets
	forward_to            = [loki.process.normalize_levels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// health check logs
// ---------------------------------------------------------------------------------------------------------------------

local.file_match "health_check" {
    path_targets = [{
        __address__ = "loki:3100",
        __path__    = "/var/log/health-check-log/*log",
        job         = "health_check",
    }]
}

loki.source.file "health_check_files" {
	targets               = local.file_match.health_check.targets
	forward_to            = [loki.process.extract_container_label.receiver]
}

loki.process "extract_container_label" {
    // Extract the value of "container" from the log line
    stage.logfmt {
        // Mapping the "container" field from your logs
        mapping = {
            "extracted_container" = "container",
        }
    }

    stage.labels {
        // Use the extracted value as the label
        values = {
            "container" = "extracted_container",
        }
    }

    forward_to = [loki.process.normalize_levels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// docker container logs
// ---------------------------------------------------------------------------------------------------------------------

discovery.docker "containers" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "default" {
    targets = discovery.docker.containers.targets

    rule {
      action = "labelmap"
      regex = "__meta_docker_container_label_([^_]+)"
    }
    rule {
        action = "replace"
        source_labels = ["__meta_docker_container_name"]
        target_label = "container"
    }
    rule {
        action = "replace"
        source_labels = ["container"]
        regex = "/(.*)"
        replacement = "$1"
        target_label = "container"
    }
    rule {
        action = "replace"
        target_label = "job"
        replacement = "docker_containers"
    }
}

loki.source.docker "default" {
    host       = "unix:///var/run/docker.sock"
    targets    = discovery.relabel.default.output
    forward_to = [loki.process.normalize_levels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// Normalize log levels from different formats
// ---------------------------------------------------------------------------------------------------------------------

loki.process "normalize_levels" {
    // Try multiple patterns for level extraction

    // Pattern 1: level=value (with or without quotes)
    stage.regex {
        expression = "level=\"(?P<level_quoted>[^\"]+)\""
    }

    // Pattern 2: level=value (unquoted)
    stage.regex {
        expression = "level=(?P<level_unquoted>[a-zA-Z]+)"
    }

    // Pattern 3: level with backticks
    stage.regex {
        expression = "level=`(?P<level_backtick>[^`]+)`"
    }

    // Pattern 4: Standalone uppercase levels
    stage.regex {
        expression = "\\b(?P<standalone_level>TRACE|DEBUG|INFO|WARN|WARNING|ERROR|FATAL|PANIC)\\b"
    }

    // Combine all possible matches and normalize
    stage.template {
        source = "normalized_level"
        template = "{{ or .level_quoted .level_unquoted .level_backtick .standalone_level | ToLower }}"
    }

    // Only set label if we found a value
    stage.labels {
        values = {
            level = "normalized_level",
        }
    }

    forward_to = [loki.process.extract_status.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// Extract status field
// ---------------------------------------------------------------------------------------------------------------------

loki.process "extract_status" {
    // Pattern 1: status="value"
    stage.regex {
        expression = "status=\"(?P<status_quoted>[^\"]+)\""
    }

    // Pattern 2: status=value (unquoted, stops at space or comma)
    stage.regex {
        expression = "status=(?P<status_unquoted>[^\\s,]+)"
    }

    // Combine matches
    stage.template {
        source = "extracted_status"
        template = "{{ or .status_quoted .status_unquoted }}"
    }

    stage.labels {
        values = {
            status = "extracted_status",
        }
    }

    forward_to = [loki.process.extract_httpstatus.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// Extract httpStatus field
// ---------------------------------------------------------------------------------------------------------------------

loki.process "extract_httpstatus" {
    // Pattern 1: httpStatus="value"
    stage.regex {
        expression = "httpStatus=\"(?P<httpstatus_quoted>[^\"]+)\""
    }

    // Pattern 2: httpStatus=value (unquoted)
    stage.regex {
        expression = "httpStatus=(?P<httpstatus_unquoted>[0-9]+)"
    }

    // Combine matches
    stage.template {
        source = "extracted_httpStatus"
        template = "{{ or .httpstatus_quoted .httpstatus_unquoted }}"
    }

    stage.labels {
        values = {
            httpStatus = "extracted_httpStatus",
        }
    }

    forward_to = [loki.write.local_loki.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// send logs to loki
// ---------------------------------------------------------------------------------------------------------------------

loki.write "local_loki" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}