// ---------------------------------------------------------------------------------------------------------------------
// var logs
// ---------------------------------------------------------------------------------------------------------------------

local.file_match "system" {
	path_targets = [{
		__address__ = "loki:3100",
		__path__    = "/var/log/*log",
		job         = "varlogs",
	}]
}

loki.source.file "system" {
	targets               = local.file_match.system.targets
	forward_to            = [loki.process.normalize_levels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// health check logs
// ---------------------------------------------------------------------------------------------------------------------

local.file_match "health_check" {
    path_targets = [{
        __address__ = "loki:3100",
        __path__    = "/var/log/health-check-log/*log",
        job         = "health_check",
    }]
}

loki.source.file "health_check_files" {
	targets               = local.file_match.health_check.targets
	forward_to            = [loki.process.extract_container_label.receiver]
}

loki.process "extract_container_label" {
    // Extract the value of "container" from the log line
    stage.logfmt {
        // Mapping the "container" field from your logs
        mapping = {
            "extracted_container" = "container",
        }
    }

    stage.labels {
        // Use the extracted value as the label
        values = {
            "container" = "extracted_container",
        }
    }

    forward_to = [loki.process.normalize_levels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// docker container logs
// ---------------------------------------------------------------------------------------------------------------------

discovery.docker "containers" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "default" {
    targets = discovery.docker.containers.targets

    rule {
      action = "labelmap"
      regex = "__meta_docker_container_label_([^_]+)"
    }
    rule {
        action = "replace"
        source_labels = ["__meta_docker_container_name"]
        target_label = "container"
    }
    rule {
        action = "replace"
        source_labels = ["container"]
        regex = "/(.*)"
        replacement = "$1"
        target_label = "container"
    }
    rule {
        action = "replace"
        target_label = "job"
        replacement = "docker_containers"
    }
}

loki.source.docker "default" {
    host       = "unix:///var/run/docker.sock"
    targets    = discovery.relabel.default.output
    forward_to = [loki.process.normalize_levels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// Normalize log levels from different formats
// Handles both "level=info" pattern and standalone "INFO" pattern
// ---------------------------------------------------------------------------------------------------------------------

loki.process "normalize_levels" {
    // First try to extract level from logfmt format (level=value)
    // This captures the value without quotes or trailing punctuation
    stage.regex {
        expression = ".*level=[\"'`]?(?P<logfmt_level>[a-zA-Z]+)[\"'`]?[,\\s]?.*"
    }

    // Then try to extract standalone log level keywords
    stage.regex {
        expression = ".*\\b(?P<standalone_level>TRACE|DEBUG|INFO|WARN|WARNING|ERROR|FATAL|PANIC)\\b.*"
    }

    // Combine the extracted values, normalize to lowercase, and clean up
    stage.template {
        source = "normalized_level"
        template = "{{ or .logfmt_level .standalone_level | ToLower | TrimSpace | TrimPrefix \"\\\"\" | TrimSuffix \"\\\"\" | TrimPrefix \"'\" | TrimSuffix \"'\" | TrimPrefix \"`\" | TrimSuffix \"`\" | TrimSuffix \",\" }}"
    }

    // Apply the normalized level as a label only if we found a value
    stage.labels {
        values = {
            level = "normalized_level",
        }
    }

    forward_to = [loki.process.extract_other_fields.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// Extract other fields (status, httpStatus) if present
// ---------------------------------------------------------------------------------------------------------------------

loki.process "extract_other_fields" {
    // Extract status field if present - capture only alphanumeric and common status characters
    stage.regex {
        expression = ".*status=[\"'`]?(?P<status_value>[a-zA-Z0-9_-]+)[\"'`]?[,\\s]?.*"
    }

    stage.template {
        source = "extracted_status"
        template = "{{ .status_value | TrimSpace }}"
    }

    stage.labels {
        values = {
            status = "extracted_status",
        }
    }

    // Extract httpStatus field if present - capture only numeric status codes
    stage.regex {
        expression = ".*httpStatus=[\"'`]?(?P<httpStatus_value>[0-9]+)[\"'`]?[,\\s]?.*"
    }

    stage.template {
        source = "extracted_httpStatus"
        template = "{{ .httpStatus_value | TrimSpace }}"
    }

    stage.labels {
        values = {
            httpStatus = "extracted_httpStatus",
        }
    }

    forward_to = [loki.write.local_loki.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// send logs to loki
// ---------------------------------------------------------------------------------------------------------------------

loki.write "local_loki" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}