// ---------------------------------------------------------------------------------------------------------------------
// var logs
// ---------------------------------------------------------------------------------------------------------------------

local.file_match "system" {
	path_targets = [{
		__address__ = "loki:3100",
		__path__    = "/var/log/*log",
		job         = "varlogs",
	}]
}

loki.source.file "system" {
	targets               = local.file_match.system.targets
	forward_to            = [loki.process.add_labels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// health check logs
// ---------------------------------------------------------------------------------------------------------------------

local.file_match "health_check" {
    path_targets = [{
        __address__ = "loki:3100",
        __path__    = "/var/log/health-check-log/*log",
        job         = "health_check",
    }]
}

loki.source.file "health_check_files" {
	targets               = local.file_match.health_check.targets
	forward_to            = [loki.process.extract_container_label.receiver]
}

loki.process "extract_container_label" {
    // Extract the value of "container" from the log line
    stage.logfmt {
        // Mapping the "container" field from your logs
        mapping = {
            "extracted_container" = "container",
        }
    }

    stage.labels {
        // Use the extracted value as the label
        values = {
            "container" = "extracted_container",
        }
    }

    forward_to = [loki.process.add_labels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// docker container logs
// ---------------------------------------------------------------------------------------------------------------------

discovery.docker "containers" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "default" {
    targets = discovery.docker.containers.targets

    rule {
      action = "labelmap"
      regex = "__meta_docker_container_label_([^_]+)"
    }
    rule {
        action = "replace"
        source_labels = ["__meta_docker_container_name"]
        target_label = "container"
    }
    rule {
        action = "replace"
        source_labels = ["container"]
        regex = "/(.*)"
        replacement = "$1"
        target_label = "container"
    }
    rule {
        action = "replace"
        target_label = "job"
        replacement = "docker_containers"
    }
}

loki.source.docker "default" {
    host       = "unix:///var/run/docker.sock"
    targets    = discovery.relabel.default.output
    forward_to = [loki.process.add_labels.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// add more labels from container logs
// container label needs to be handled before, due to different methods
//
// Note: This generates error logs for alloy of type 'logfmt syntax error'
//       for log messages containing the label keywords in the text but not as labels.
//       However this does not affect the functionality for other logs, containing the label keywords as labels.
// ---------------------------------------------------------------------------------------------------------------------

loki.process "add_labels" {
    // Only process lines that contain valid logfmt patterns
    stage.match {
        selector = "{job=\"docker_containers\"}"
        // Match lines that contain key=value patterns (basic logfmt check)
        pipeline_name = "logfmt_lines"

        stage.regex {
            expression = ".*\\w+=\\w+.*"
        }

        // Extract the value of the desired labels from the log line
        stage.logfmt {
            // Mapping fields from your logs
            mapping = {
               "extracted_level" = "level",
               "extracted_status" = "status",
               "extracted_httpStatus" ="httpStatus",
            }
        }

        stage.labels {
            // Use the extracted values as the labels
            values = {
               "level" = "extracted_level",
               "status" = "extracted_status",
               "httpStatus" = "extracted_httpStatus",
            }
        }
    }

    forward_to = [loki.write.local_loki.receiver]
}

// ---------------------------------------------------------------------------------------------------------------------
// send logs to loki
// ---------------------------------------------------------------------------------------------------------------------

loki.write "local_loki" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}
