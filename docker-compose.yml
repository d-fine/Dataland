version: "3.8"
# Docker-compose file for the dataland stack.
# Things can be configured by using docker-compose profiles. Valid profiles:
# production: The profile to be used if the stack is deployed in a production-like setup
# testing: The profile to be used for testing in the CI (i.e.: starts a testing-container along with the rest of the stack)
# development: The profile to be used for local development. Leaves out frontend and backend
# init: The profile to be used if keycloak-db should be re-initialized

services:
  proxy:
    image: ${PROXY_IMAGE:-ghcr.io/d-fine/dataland/dataland_inbound_proxy:${DATALAND_INBOUND_PROXY_VERSION}}
    restart: always
    profiles: ["production", "testing", "development"]
    networks:
      - external
      - internal
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - ./local/certs:/certs/custom
    environment:
      # The primary server URL all other URLS get redirected to
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
      # This is the path to the letsencrypt directory (usually /etc/letsencrypt/live/FIRST_DOMAIN_ON_CERT)
      PROXY_LETSENCRYPT_PATH: ${PROXY_LETSENCRYPT_PATH}
      # These are the config options for the initial LetsEncrypt certificate request
      PROXY_LETSENCRYPT_ARGS: ${PROXY_LETSENCRYPT_ARGS}
      FRONTEND_LOCATION_CONFIG: ${FRONTEND_LOCATION_CONFIG}
      BACKEND_LOCATION_CONFIG: ${BACKEND_LOCATION_CONFIG}
  admin-proxy:
    image: ghcr.io/d-fine/dataland/dataland_inbound_admin_proxy:${DATALAND_INBOUND_ADMIN_PROXY_VERSION}
    restart: always
    profiles: ["production", "testing", "development"]
    networks:
      - external
      - internal
      - backend-db
      - keycloak-db
      - api-key-manager-db
      - internal-storage-db
      - document-manager-db
    ports:
      - "127.0.0.1:6789:6789"
      - "127.0.0.1:5433-5437:5433-5437"
      - "127.0.0.1:5672:5672"
  api-key-manager:
    restart: always
    profiles: ["production", "testing", "development"]
    networks:
      - internal
      - api-key-manager-db
    image: ${API_KEY_MANAGER_IMAGE:-ghcr.io/d-fine/dataland/dataland_api_key_manager_test:${DATALAND_API_KEY_MANAGER_TEST_VERSION}}
    expose:
      - "8080"
    depends_on:
      - api-key-manager-db
    environment:
      API_KEY_MANAGER_DB_PASSWORD: ${API_KEY_MANAGER_DB_PASSWORD}
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
  api-key-manager-db:
    restart: always
    profiles: [ "production", "testing", "development" ]
    networks:
      - api-key-manager-db
    image: postgres:15.2
    volumes:
      - api_key_manager_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: api_key_manager
      POSTGRES_USER: api_key_manager
      POSTGRES_PASSWORD: ${API_KEY_MANAGER_DB_PASSWORD}
      PGUSER: api_key_manager
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  document-manager:
    restart: always
    profiles: [ "production", "testing", "development" ]
    networks:
      - internal
      - document-manager-db
    image: ${DOCUMENT_MANAGER_IMAGE:-ghcr.io/d-fine/dataland/dataland_document_manager_test:${DATALAND_DOCUMENT_MANAGER_TEST_VERSION}}
    expose:
      - "8080"
    environment:
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      DOCUMENT_MANAGER_DB_PASSWORD: ${DOCUMENT_MANAGER_DB_PASSWORD}
  document-manager-db:
    restart: always
    profiles: [ "production", "testing", "development" ]
    networks:
      - document-manager-db
    image: postgres:15.2
    volumes:
      - document_manager_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: document_manager
      POSTGRES_USER: document_manager
      POSTGRES_PASSWORD: ${DOCUMENT_MANAGER_DB_PASSWORD}
      PGUSER: document_manager
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  backend:
    restart: always
    profiles: ["production", "testing"]
    networks:
      - internal
      - backend-db
    image: ${BACKEND_IMAGE:-ghcr.io/d-fine/dataland/dataland_backend_test:${DATALAND_BACKEND_TEST_VERSION}}
    expose:
      - "8080"
    depends_on:
      - backend-db
    environment:
      BACKEND_DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
      MAILJET_API_SECRET: ${MAILJET_API_SECRET}
      MAILJET_API_ID: ${MAILJET_API_ID}
      INVITATION_REQUEST_RECEIVERS: ${INVITATION_REQUEST_RECEIVERS}
      INVITATION_REQUEST_CC: ${INVITATION_REQUEST_CC}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
  backend-db:
    restart: always
    profiles: ["production", "testing", "development"]
    networks:
      - backend-db
    image: postgres:15.2
    volumes:
      - backend_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: backend
      POSTGRES_USER: backend
      POSTGRES_PASSWORD: ${BACKEND_DB_PASSWORD}
      PGUSER: backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  e2etests:
    profiles: ["testing"]
    image: ghcr.io/d-fine/dataland/dataland_e2etests:${DATALAND_E2ETESTS_VERSION}
    networks:
      - external
    volumes:
      - ./.git:/app/.git
    environment:
      KEYCLOAK_UPLOADER_PASSWORD: ${KEYCLOAK_UPLOADER_PASSWORD}
      KEYCLOAK_DATALAND_ADMIN_PASSWORD: ${KEYCLOAK_DATALAND_ADMIN_PASSWORD}
      KEYCLOAK_READER_PASSWORD: ${KEYCLOAK_UPLOADER_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      PGADMIN_PASSWORD: ${PGADMIN_PASSWORD}
      REALDATA: ${REALDATA}
      CYPRESS_EXECUTION_ENVIRONMENT: ${CYPRESS_EXECUTION_ENVIRONMENT}
      CYPRESS_TEST_GROUP: ${CYPRESS_TEST_GROUP}
      CYPRESS_SINGLE_POPULATE: ${CYPRESS_SINGLE_POPULATE:-false}
    links:
      - proxy:local-dev.dataland.com
      - admin-proxy:dataland-admin
  frontend-dev:
    # This container has been introduced to work around a docker bug where requests from a docker network to the host
    # don't work anymore after a certain amount of requests
    # https://github.com/docker/for-win/issues/8861
    restart: always
    profiles: ["development"]
    image: node:19.8.1
    networks:
      internal:
        aliases:
          - frontend
    volumes:
      - ./dataland-frontend:/app
      - frontend-dev-node-modules:/app/node_modules
    command: sh -c "cd /app && npm install && npm run dev"
  frontend:
    restart: always
    profiles: ["production", "testing"]
    image: ${FRONTEND_IMAGE:-ghcr.io/d-fine/dataland/dataland_frontend_test:${DATALAND_FRONTEND_TEST_VERSION}}
    networks:
      - internal
  internal-storage:
    restart: always
    profiles: [ "production", "testing", "development" ]
    image: ${INTERNAL_STORAGE_IMAGE:-ghcr.io/d-fine/dataland/dataland_internal_storage_test:${DATALAND_INTERNAL_STORAGE_TEST_VERSION}}
    networks:
      - internal
      - internal-storage-db
    environment:
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
      INTERNAL_STORAGE_DB_PASSWORD: ${INTERNAL_STORAGE_DB_PASSWORD}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      INTERNAL_BACKEND_URL: ${INTERNAL_BACKEND_URL:-http://backend:8080/api}
    depends_on:
      - internal-storage-db
  internal-storage-db:
    restart: always
    profiles: [ "production", "testing", "development" ]
    networks:
      - internal-storage-db
    image: postgres:15.2
    volumes:
      - internal_storage_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: internal_storage
      POSTGRES_USER: internal_storage
      POSTGRES_PASSWORD: ${INTERNAL_STORAGE_DB_PASSWORD}
      PGUSER: internal_storage
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  keycloak-db:
    restart: always
    profiles: ["production", "testing", "development", "init"]
    networks:
      - keycloak-db
    image: postgres:15.2
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      PGUSER: keycloak
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  keycloak:
    restart: always
    profiles: ["production", "development"]
    networks:
      - internal
      - keycloak-db
    image: ghcr.io/d-fine/dataland/dataland_keycloak:${DATALAND_KEYCLOAK_VERSION}
    command: ${KEYCLOAK_START_COMMAND:-start}
    expose:
      - "8080"
    environment:
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL}
    depends_on:
      - keycloak-db
  keycloak-initializer:
    profiles: ["testing", "init"]
    networks:
      internal:
        aliases:
          - keycloak
      keycloak-db:
        aliases:
          - keycloak
    image: ghcr.io/d-fine/dataland/dataland_keycloak:${DATALAND_KEYCLOAK_VERSION}
    volumes:
      - ./dataland-keycloak/users:/keycloak_users
    command: initialize
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_READER_VALUE: ${KEYCLOAK_READER_VALUE}
      KEYCLOAK_READER_SALT: ${KEYCLOAK_READER_SALT}
      KEYCLOAK_UPLOADER_VALUE: ${KEYCLOAK_UPLOADER_VALUE}
      KEYCLOAK_UPLOADER_SALT: ${KEYCLOAK_UPLOADER_SALT}
      KEYCLOAK_DATALAND_ADMIN_VALUE: ${KEYCLOAK_DATALAND_ADMIN_VALUE}
      KEYCLOAK_DATALAND_ADMIN_SALT: ${KEYCLOAK_DATALAND_ADMIN_SALT}
      KEYCLOAK_GOOGLE_ID: ${KEYCLOAK_GOOGLE_ID}
      KEYCLOAK_GOOGLE_SECRET: ${KEYCLOAK_GOOGLE_SECRET}
      KEYCLOAK_LINKEDIN_ID: ${KEYCLOAK_LINKEDIN_ID}
      KEYCLOAK_LINKEDIN_SECRET: ${KEYCLOAK_LINKEDIN_SECRET}
      MAILJET_API_SECRET: ${MAILJET_API_SECRET}
      MAILJET_API_ID: ${MAILJET_API_ID}
    expose:
      - "8080"
    depends_on:
      - keycloak-db
  pgadmin:
    restart: always
    image: ghcr.io/d-fine/dataland/dataland_pgadmin:${DATALAND_PGADMIN_VERSION}
    networks:
      - keycloak-db
      - backend-db
      - api-key-manager-db
      - internal
      - internal-storage-db
      - document-manager-db
    profiles: ["production", "testing", "development"]
    volumes:
      - pgadmin_config:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dataland.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      BACKEND_DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      API_KEY_MANAGER_DB_PASSWORD: ${API_KEY_MANAGER_DB_PASSWORD}
      INTERNAL_STORAGE_DB_PASSWORD: ${INTERNAL_STORAGE_DB_PASSWORD}
      DOCUMENT_MANAGER_DB_PASSWORD: ${DOCUMENT_MANAGER_DB_PASSWORD}
      PGADMIN_DISABLE_POSTFIX: "true"
      SCRIPT_NAME: "/pgadmin"
  rabbitmq:
    restart: always
    profiles: ["production", "testing", "development"]
    image: ghcr.io/d-fine/dataland/dataland_rabbitmq:${DATALAND_RABBITMQ_VERSION}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - internal
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS_HASH: ${RABBITMQ_PASS_HASH}
    healthcheck:
      test: rabbitmq-diagnostics -q alarms
      interval: 30s
      timeout: 3s
    deploy:
      resources:
        limits:
          # Always maintain 1.5 ratio between disk_free_limit.absolute of rabbitMQ conf and the memory here
          memory: 512M
  qa-service:
    restart: always
    profiles: ["production", "testing", "development"]
    image: ${QA_SERVICE_IMAGE:-ghcr.io/d-fine/dataland/dataland_qa_service_test:${DATALAND_QA_SERVICE_TEST_VERSION}}
    networks:
      - internal
    expose:
      - "8080"
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
networks:
  internal:
  external:
  keycloak-db:
  backend-db:
  api-key-manager-db:
  internal-storage-db:
  document-manager-db:
volumes:
  keycloak_data:
    driver: local
  backend_data:
    driver: local
  api_key_manager_data:
    driver: local
  internal_storage_data:
    driver: local
  rabbitmq_data:
    driver: local
  letsencrypt:
    driver: local
  pgadmin_config:
    driver: local
  frontend-dev-node-modules:
    driver: local
  document_manager_data:
    driver: local
