version: "3.8"
services:
  proxy:
    build:
      context: ./dataland-inbound-proxy
      args:
        PROXY_ENVIRONMENT: ${PROXY_ENVIRONMENT:-development}
    restart: always
    profiles: ["production", "testing", "productionInMemory", "development"]
    networks:
      - external
      - internal
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - ./local/certs:/certs/custom
    environment:
      # This variable will be inserted into the NGINX server config file (URLS separated by a space e.g. dataland.com www.dataland.com)
      PROXY_NGINX_URLS: ${PROXY_NGINX_URLS}
      # This is the path to the letsencrypt directory (usualy /etc/letsencrypt/live/FIRST_DOMAIN_ON_CERT)
      PROXY_LETSENCRYPT_PATH: ${PROXY_LETSENCRYPT_PATH}
      # These are the config options for the initial LetsEncrypt certificate request
      PROXY_LETSENCRYPT_ARGS: ${PROXY_LETSENCRYPT_ARGS}
  backend:
    restart: always
    profiles: ["production", "testing", "productionInMemory"]
    networks:
      - internal
    build:
      context: ./
      dockerfile: ${BACKEND_DOCKERFILE:-./dataland-backend/DockerfileTest}
    expose:
      - "8080"
    environment:
      DATALAND_SKYMINDERCLIENT_TOKEN: ${DATALAND_SKYMINDERCLIENT_TOKEN}
      DATALAND_SKYMINDERCLIENT_USER: ${DATALAND_SKYMINDERCLIENT_USER}
      DATALAND_EDC_TOKEN: ${DATALAND_EDC_TOKEN}
      DATALAND_EDC_USER: ${DATALAND_EDC_USER}
      SKYMINDER_URL: ${SKYMINDER_URL}
      SKYMINDER_USER: ${SKYMINDER_USER}
      SKYMINDER_PW: ${SKYMINDER_PW}
  e2etests:
    profiles: ["testing"]
    build:
      context: ./
      dockerfile: ./dataland-e2etests/Dockerfile
    networks:
      - external
    environment:
      DATALAND_SKYMINDERCLIENT_TOKEN: ${DATALAND_SKYMINDERCLIENT_TOKEN}
      DATALAND_SKYMINDERCLIENT_USER: ${DATALAND_SKYMINDERCLIENT_USER}
      DATALAND_EDC_TOKEN: ${DATALAND_EDC_TOKEN}
      DATALAND_EDC_USER: ${DATALAND_EDC_USER}
      KEYCLOAK_UPLOADER_PASSWORD: ${KEYCLOAK_UPLOADER_PASSWORD}
      KEYCLOAK_READER_PASSWORD: ${KEYCLOAK_READER_PASSWORD}
      ENVIRONMENT: ${ENVIRONMENT}
    links:
      - proxy:dataland-local.duckdns.org
  frontend:
    restart: always
    profiles: ["production", "testing", "productionInMemory"]
    build:
      context: ./
      dockerfile: ${FRONTEND_DOCKERFILE:-./dataland-frontend/DockerfileTest}
      args:
        DATALAND_EDC_TOKEN: ${DATALAND_EDC_TOKEN}
        DATALAND_EDC_USER: ${DATALAND_EDC_USER}
    expose:
      - "80"
    networks:
      - internal
  skyminder-dummyserver:
    profiles: ["testing", "development"]
    image: ghcr.io/d-fine/datalandskyminder/skyminderdummyserver:latest
    networks:
      - internal
      - external
    ports:
      - "8085:8080"
    environment:
      DATALAND_SKYMINDERCLIENT_TOKEN: ${DATALAND_SKYMINDERCLIENT_TOKEN}
      DATALAND_SKYMINDERCLIENT_USER: ${DATALAND_SKYMINDERCLIENT_USER}
  edc-dummyserver:
    restart: always
    profiles: ["testing", "development", "productionInMemory"]
    image: ghcr.io/d-fine/datalandedc/edcdummyserver:0.2.3
    environment:
      SERVER_PORT: 9191
      SERVER_SERVLET_CONTEXT-PATH: /api
    networks:
      internal:
        aliases:
          - dataland-edc
      external:
        aliases:
          - dataland-edc
    ports:
      - "9191:9191"
  dataland-edc:
    restart: always
    profiles: ["production"]
    image: ghcr.io/d-fine/datalandedc/edcserver:0.2.2
    networks:
     - internal
    expose:
      - "9191"
      - "9292"
    environment:
      DATALAND_EDC_WEB_URI: ${DATALAND_EDC_WEB_URI}
      DATALAND_EDC_IDS_URI: ${DATALAND_EDC_IDS_URI}
      TRUSTEE_WEB_URI: ${TRUSTEE_WEB_URI}
      TRUSTEE_IDS_URI: ${TRUSTEE_IDS_URI}
      EDC_OAUTH_PROVIDER_AUDIENCE: ${EDC_OAUTH_PROVIDER_AUDIENCE}
      EDC_OAUTH_PROVIDER_JWKS_URL: ${EDC_OAUTH_PROVIDER_JWKS_URL}
      EDC_OAUTH_TOKEN_URL: ${EDC_OAUTH_TOKEN_URL}
      IDS_WEBHOOK_ADDRESS: ${IDS_WEBHOOK_ADDRESS}
      TRUSTEE_CREDENTIALS: ${TRUSTEE_CREDENTIALS}
      SERVER_TOMCAT_THREADS_MIN-SPARE: 100
  develop:
    profiles: ["devcontainer"]
    build:
      context: ./
      dockerfile: ./devcontainer/Dockerfile
    volumes:
      - "./:/code:rw"
    expose:
      - "8080"
    networks:
      - external
      - internal
    environment:
      DATALAND_SKYMINDERCLIENT_TOKEN: ${DATALAND_SKYMINDERCLIENT_TOKEN}
      DATALAND_SKYMINDERCLIENT_USER: ${DATALAND_SKYMINDERCLIENT_USER}
      DATALAND_EDC_TOKEN: ${DATALAND_EDC_TOKEN}
      DATALAND_EDC_USER: ${DATALAND_EDC_USER}
      SKYMINDER_URL: ${SKYMINDER_URL}
      SKYMINDER_USER: ${SKYMINDER_USER}
      SKYMINDER_PW: ${SKYMINDER_PW}
  keycloak-db:
    restart: always
    profiles: ["production", "productionInMemory", "testing", "development", "init"]
    networks:
      - internal
    image: postgres
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
  keycloak:
    restart: always
    profiles: ["production", "productionInMemory", "development"]
    networks:
      - internal
    build:
      context: ./
      dockerfile: ${KEYCLOAK_DOCKERFILE:-./dataland-keycloak/Dockerfile}
    command: ${KEYCLOAK_START_COMMAND:-start}
    expose:
      - "8080"
    environment:
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    depends_on:
      - keycloak-db
  keycloak-initializer:
    profiles: [ "init", "testing" ]
    networks:
      internal:
        aliases:
          - keycloak
    build:
      context: ./
      dockerfile: ${KEYCLOAK_DOCKERFILE:-./dataland-keycloak/Dockerfile}
    volumes:
      - ./dataland-keycloak/realms:/opt/keycloak/data/import
    command: start --import-realm
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_READER_VALUE: ${KEYCLOAK_READER_VALUE}
      KEYCLOAK_READER_SALT: ${KEYCLOAK_READER_SALT}
      KEYCLOAK_UPLOADER_VALUE: ${KEYCLOAK_UPLOADER_VALUE}
      KEYCLOAK_UPLOADER_SALT: ${KEYCLOAK_UPLOADER_SALT}
      KEYCLOAK_GOOGLE_ID: ${KEYCLOAK_GOOGLE_ID}
      KEYCLOAK_GOOGLE_SECRET: ${KEYCLOAK_GOOGLE_SECRET}
    expose:
      - "8080"
    depends_on:
      - keycloak-db
networks:
  internal:
  external:
volumes:
  keycloak_data:
    driver: local
  letsencrypt:
    driver: local