version: "3.8"
# Docker-compose file for the dataland stack.
# Things can be configured by using docker-compose profiles. Valid profiles:
# production: The profile to be used if the stack is deployed in a production-like setup
# testing: The profile to be used for testing in the CI (i.e.: starts a testing-container along with the rest of the stack)
# productionInMemory: The profile to be used if the stack is deployed in a production-like setup but DatalandEDC should be replaced by an in-memory storage
# development: The profile to be used for local development. Leaves out frontend and backend
# init: The profile to be used if keycloak-db should be re-initialized

services:
  proxy:
    image: ${PROXY_IMAGE:-ghcr.io/d-fine/dataland/dataland_inbound_proxy_development:${DATALAND_INBOUND_PROXY_DEVELOPMENT_VERSION}}
    restart: always
    profiles: ["production", "testing", "productionInMemory", "development"]
    networks:
      - external
      - internal
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - ./local/certs:/certs/custom
    environment:
      # The primary server URL all other URLS get redirected to
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
      # This is the path to the letsencrypt directory (usually /etc/letsencrypt/live/FIRST_DOMAIN_ON_CERT)
      PROXY_LETSENCRYPT_PATH: ${PROXY_LETSENCRYPT_PATH}
      # These are the config options for the initial LetsEncrypt certificate request
      PROXY_LETSENCRYPT_ARGS: ${PROXY_LETSENCRYPT_ARGS}
  admin-proxy:
    image: ghcr.io/d-fine/dataland/dataland_inbound_admin_proxy:${DATALAND_INBOUND_ADMIN_PROXY_VERSION}
    restart: always
    profiles: [ "production", "testing", "productionInMemory", "development" ]
    networks:
      - external
      - internal
      - backend-db
      - keycloak-db
    ports:
      - "127.0.0.1:6789:6789"
      - "127.0.0.1:5433-5434:5433-5434"
  backend:
    restart: always
    profiles: ["production", "testing", "productionInMemory"]
    networks:
      - internal
      - backend-db
    image: ${BACKEND_IMAGE:-ghcr.io/d-fine/dataland/dataland_backend_test:${DATALAND_BACKEND_TEST_VERSION}}
    expose:
      - "8080"
    depends_on:
      - backend-db
    environment:
      BACKEND_DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
  backend-db:
    restart: always
    profiles: ["production", "productionInMemory", "testing", "development"]
    networks:
      - backend-db
    image: postgres:15.1
    volumes:
      - backend_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: backend
      POSTGRES_USER: backend
      POSTGRES_PASSWORD: ${BACKEND_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  e2etests:
    profiles: ["testing"]
    image: ghcr.io/d-fine/dataland/dataland_e2etests:${DATALAND_E2ETESTS_VERSION}
    networks:
      - external
    volumes:
      - ./.git:/app/.git
    environment:
      CYPRESS_KEYCLOAK_UPLOADER_PASSWORD: ${KEYCLOAK_UPLOADER_PASSWORD}
      KEYCLOAK_UPLOADER_PASSWORD: ${KEYCLOAK_UPLOADER_PASSWORD}
      CYPRESS_KEYCLOAK_READER_PASSWORD: ${KEYCLOAK_READER_PASSWORD}
      KEYCLOAK_READER_PASSWORD: ${KEYCLOAK_UPLOADER_PASSWORD}
      CYPRESS_KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      CYPRESS_KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      CYPRESS_PGADMIN_PASSWORD: ${PGADMIN_PASSWORD}
      ENVIRONMENT: ${ENVIRONMENT}
      CYPRESS_EXECUTION_ENVIRONMENT: ${CYPRESS_EXECUTION_ENVIRONMENT}
      CYPRESS_TEST_GROUP: ${CYPRESS_TEST_GROUP}
      CYPRESS_SINGLE_POPULATE: ${CYPRESS_SINGLE_POPULATE:-false}
      CYPRESS_REALDATA: ${REALDATA}
      CYPRESS_PREPOPULATE_TIMEOUT_S: 180
      CYPRESS_PREVISIT_TIMEOUT_S: 180
    links:
      - proxy:local-dev.dataland.com
      - admin-proxy:dataland-admin
  frontend-dev:
    # This container has been introduced to work around a docker bug where requests from a docker network to the host
    # don't work anymore after a certain amount of requests
    # https://github.com/docker/for-win/issues/8861
    restart: always
    profiles: ["development"]
    image: node:18.12.1
    networks:
      - internal
    volumes:
      - ./dataland-frontend:/app
      - frontend-dev-node-modules:/app/node_modules
    command: sh -c "cd /app && npm install && npm run dev"
  frontend:
    restart: always
    profiles: ["production", "testing", "productionInMemory"]
    image: ${FRONTEND_IMAGE:-ghcr.io/d-fine/dataland/dataland_frontend_test:${DATALAND_FRONTEND_TEST_VERSION}}
    expose:
      - "80"
    networks:
      - internal
  edc-dummyserver:
    restart: always
    profiles: ["testing", "development", "productionInMemory"]
    image: ghcr.io/d-fine/datalandedc/edcdummyserver:0.2.9
    environment:
      SERVER_PORT: 9191
      SERVER_SERVLET_CONTEXT-PATH: /api
    networks:
      internal:
        aliases:
          - dataland-edc
      external:
        aliases:
          - dataland-edc
    ports:
      - "9191:9191"
  dataland-edc:
    restart: always
    profiles: ["production"]
    image: ghcr.io/d-fine/datalandedc/edcserver:0.2.9
    networks:
      - internal
    expose:
      - "9191"
      - "9292"
    environment:
      DATALAND_EDC_ASSET_ACCESS_URI: ${DATALAND_EDC_ASSET_ACCESS_URI}
      TRUSTEE_IDS_URI: ${TRUSTEE_IDS_URI}
      EDC_OAUTH_PROVIDER_AUDIENCE: ${EDC_OAUTH_PROVIDER_AUDIENCE}
      EDC_OAUTH_PROVIDER_JWKS_URL: ${EDC_OAUTH_PROVIDER_JWKS_URL}
      EDC_OAUTH_TOKEN_URL: ${EDC_OAUTH_TOKEN_URL}
      IDS_WEBHOOK_ADDRESS: ${IDS_WEBHOOK_ADDRESS}
      SERVER_TOMCAT_THREADS_MIN-SPARE: 100
  keycloak-db:
    restart: always
    profiles: ["production", "productionInMemory", "testing", "development", "init"]
    networks:
      - keycloak-db
    image: postgres:15.1
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || false" ]
      interval: 30s
      timeout: 3s
  keycloak:
    restart: always
    profiles: ["production", "productionInMemory", "development"]
    networks:
      - internal
      - keycloak-db
    image: ghcr.io/d-fine/dataland/dataland_keycloak:${DATALAND_KEYCLOAK_VERSION}
    command: ${KEYCLOAK_START_COMMAND:-start}
    expose:
      - "8080"
    environment:
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL}
    depends_on:
      - keycloak-db
  keycloak-initializer:
    profiles: [ "init", "testing" ]
    networks:
      internal:
        aliases:
          - keycloak
      keycloak-db:
        aliases:
          - keycloak
    image: ghcr.io/d-fine/dataland/dataland_keycloak:${DATALAND_KEYCLOAK_VERSION}
    volumes:
      - ./dataland-keycloak/users:/keycloak_users
    command: initialize
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_READER_VALUE: ${KEYCLOAK_READER_VALUE}
      KEYCLOAK_READER_SALT: ${KEYCLOAK_READER_SALT}
      KEYCLOAK_UPLOADER_VALUE: ${KEYCLOAK_UPLOADER_VALUE}
      KEYCLOAK_UPLOADER_SALT: ${KEYCLOAK_UPLOADER_SALT}
      KEYCLOAK_GOOGLE_ID: ${KEYCLOAK_GOOGLE_ID}
      KEYCLOAK_GOOGLE_SECRET: ${KEYCLOAK_GOOGLE_SECRET}
      KEYCLOAK_LINKEDIN_ID: ${KEYCLOAK_LINKEDIN_ID}
      KEYCLOAK_LINKEDIN_SECRET: ${KEYCLOAK_LINKEDIN_SECRET}
      KEYCLOAK_MAILJET_API_SECRET: ${KEYCLOAK_MAILJET_API_SECRET}
      KEYCLOAK_MAILJET_API_ID: ${KEYCLOAK_MAILJET_API_ID}
    expose:
      - "8080"
    depends_on:
      - keycloak-db
  pgadmin:
    restart: always
    image: ghcr.io/d-fine/dataland/dataland_pgadmin:${DATALAND_PGADMIN_VERSION}
    networks:
      - keycloak-db
      - backend-db
      - internal
    profiles: [ "production", "testing", "productionInMemory", "development" ]
    volumes:
      - pgadmin_config:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dataland.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      BACKEND_DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      PGADMIN_DISABLE_POSTFIX: "true"
      SCRIPT_NAME: "/pgadmin"
networks:
  internal:
  external:
  keycloak-db:
  backend-db:
volumes:
  keycloak_data:
    driver: local
  backend_data:
    driver: local
  letsencrypt:
    driver: local
  pgadmin_config:
    driver: local
  frontend-dev-node-modules:
    driver: local
