# USAGE: simply run this script in an ELEVATED! powershell window
# The Script can take quite some time (something like a minute) to complete
[Environment]::SetEnvironmentVariable("BACKEND_DOCKERFILE", "./dataland-backend/DockerfileTest", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("CYPRESS_PREPOPULATE_TIMEOUT_S", "40", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("CYPRESS_PREVISIT_TIMEOUT_S", "90", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("#GITHUB_TOKEN", "Token", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("#GITHUB_USER", "ppuetsch", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("#DATALAND_EDC_TOKEN", $env:GITHUB_TOKEN, [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("#DATALAND_EDC_USER", $env:GITHUB_USER, [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("DATALAND_SKYMINDERCLIENT_TOKEN", $env:GITHUB_TOKEN, [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("DATALAND_SKYMINDERCLIENT_USER", $env:GITHUB_USER, [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("ELECTRON_EXTRA_LAUNCH_ARGS", "--ignore-connections-limit=localhost:8090,proxy,localhost,preview-dataland.duckdns.org,dev-dataland.duckdns.org", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("FRONTEND_DOCKERFILE", "./dataland-frontend/DockerfileTest", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("IN_MEMORY", "true", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("INITIALIZE_KEYCLOAK", "false", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_ADMIN", "admin", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_ADMIN_PASSWORD", "admin", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_DB_PASSWORD", "dummy", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_DOCKERFILE", "./dataland-keycloak/Dockerfile", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_FRONTEND_URL", "http://localhost/keycloak", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_READER_PASSWORD", "test", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_READER_SALT", "6ZN+5rRT/wQcQqvNhXIsfA==", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_READER_VALUE", "qT0vhQ7bQA0OuAlJslpDr421pJQjZWIHxXZYePO9IOVVfZUX+85SwuwVrLgL/9xiW5hjyxlhKqQzUl7xUh+hVQ==", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_UPLOADER_PASSWORD", "test", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_UPLOADER_SALT", "6ZN+5rRT/wQcQqvNhXIsfA==", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("KEYCLOAK_UPLOADER_VALUE", "qT0vhQ7bQA0OuAlJslpDr421pJQjZWIHxXZYePO9IOVVfZUX+85SwuwVrLgL/9xiW5hjyxlhKqQzUl7xUh+hVQ==", [System.EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("REALDATA", "false", [System.EnvironmentVariableTarget]::Machine)
# If needed, set to value that can be found in internal wiki [Environment]::SetEnvironmentVariable("SKYMINDER_PW", "${{ secrets.SKYMINDER_PW }}", [System.EnvironmentVariableTarget]::Machine)
# If needed, set to value that can be found in internal wiki [Environment]::SetEnvironmentVariable("SKYMINDER_URL", ""http://skyminder-dummyserver:8080"", [System.EnvironmentVariableTarget]::Machine)
# If needed, set to value that can be found in internal wiki [Environment]::SetEnvironmentVariable("SKYMINDER_USER", "${{ secrets.SKYMINDER_USER }}", [System.EnvironmentVariableTarget]::Machine)
# If needed, set to your sonar token [Environment]::SetEnvironmentVariable("SONAR_TOKEN", "${{ secrets.SONAR_TOKEN }}", [System.EnvironmentVariableTarget]::Machine)
# Only needed in CD.yaml - no need to set locally [Environment]::SetEnvironmentVariable("SSH_PRIVATE_KEY", "${{ secrets.SSH_PRIVATE_KEY }}", [System.EnvironmentVariableTarget]::Machine)
# Only needed in CD.yaml - no need to set locally [Environment]::SetEnvironmentVariable("TARGETSERVER_HOST_KEYS", "${{ secrets.TARGETSERVER_HOST_KEYS }}", [System.EnvironmentVariableTarget]::Machine)
# If needed (to test EurDat Integration) - set to Value that can be found in internal wiki [Environment]::SetEnvironmentVariable("TARGETSERVER_STARTUP_URL", "${{ secrets.TARGETSERVER_STARTUP_URL }}", [System.EnvironmentVariableTarget]::Machine)
# If needed (to test EurDat Integration) - set to Value that can be found in internal wiki [Environment]::SetEnvironmentVariable("TARGETSERVER_URL", "${{ secrets.TARGETSERVER_URL }}", [System.EnvironmentVariableTarget]::Machine)
# TODO: figure out value [Environment]::SetEnvironmentVariable("TEASER_COMPANY_PERM_IDS", "${{ secrets.TEASER_COMPANY_PERM_IDS }}", [System.EnvironmentVariableTarget]::Machine)
# If needed (to test EurDat Integration) - set to Value that can be found in internal wiki [Environment]::SetEnvironmentVariable("TRUSTEE_BASE_URL", "${{ secrets.TRUSTEE_BASE_URL }}", [System.EnvironmentVariableTarget]::Machine)
# If needed (to test EurDat Integration) - set to Value that can be found in internal wiki [Environment]::SetEnvironmentVariable("TRUSTEE_CREDENTIALS", "${{ secrets.TRUSTEE_CREDENTIALS }}", [System.EnvironmentVariableTarget]::Machine)
# If needed (to test EurDat Integration) - set to Value that can be found in internal wiki [Environment]::SetEnvironmentVariable("TRUSTEE_ENVIRONMENT_NAME", "${{ github.event.inputs.trusteeEnvironmentName }}", [System.EnvironmentVariableTarget]::Machine)
