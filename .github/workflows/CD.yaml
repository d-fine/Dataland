name: CD
env:
  DATALAND_SKYMINDERCLIENT_TOKEN: ${{ secrets.DATALAND_SKYMINDERCLIENT_TOKEN }}
  DATALAND_SKYMINDERCLIENT_USER: ${{ secrets.DATALAND_SKYMINDERCLIENT_USER }}
  SKYMINDER_URL: ${{ secrets.SKYMINDER_URL }}
  SKYMINDER_PW: ${{ secrets.SKYMINDER_PW }}
  SKYMINDER_USER: ${{ secrets.SKYMINDER_USER }}

on:
  workflow_dispatch:
    inputs:
      realData:
        description: 'Use real data'
        required: false
        type: boolean
      whichEnvironment:
        description: "Choose environment"
        required: true
        type: environment
      useInMemoryStorage:
        description: 'Mock Trustee'
        required: false
        type: boolean
      trusteeEnvironmentName:
        description: 'Trustee Environment Name'
        required: false
        type: string
        default: integration
      resetKeycloakSecurityPhraseInput:
        description: 'Keycloak Reset Password'
        required: false
        type: string


jobs:
  build-prod-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.whichEnvironment }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.whichEnvironment }}
      REALDATA: ${{ github.event.inputs.realData }}
    steps:
      - name: verifyKeycloakPassword
        run: |
          if [[ -z "$RESET_KEYCLOAK_SECURITY_PHRASE_INPUT" ]]; then
            echo "Keycloak will not be reset during deployment."
            echo '::set-output name=INITIALIZE_KEYCLOAK::false'
          elif [[ $RESET_KEYCLOAK_SECURITY_PHRASE_SECRET == $RESET_KEYCLOAK_SECURITY_PHRASE_INPUT ]]; then
            echo "Resetting Keycloak during deployment."
            echo '::set-output name=INITIALIZE_KEYCLOAK::true'
          else
            echo "Entered password for resetting Keycloak is incorrect. Aborting run."
            exit 1
          fi
        env:
          RESET_KEYCLOAK_SECURITY_PHRASE_SECRET: ${{ secrets.RESET_KEYCLOAK_SECURITY_PHRASE_SECRET }}
          RESET_KEYCLOAK_SECURITY_PHRASE_INPUT: ${{ github.event.inputs.resetKeycloakSecurityPhraseInput }}
        id: verifyKeycloakPassword
      - uses: actions/checkout@v2
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get GitHub real data image on demand
        run: |
          if [[ $REALDATA == true ]]; then
            echo "Retrieving real data and adapt test config"
            docker run -v $(pwd)/testing/data:/testData:rw ghcr.io/d-fine/dataland/datacontainer:0.0.4
            cp ./dataland-frontend/cypress_preview.json ./dataland-frontend/cypress.json
          fi
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build backend and Assemble boot jar
        run: ./gradlew dataland-backend:bootJar --no-daemon --stacktrace
      - name: Build frontend
        run: ./gradlew dataland-frontend:generateAPIClientFrontend dataland-frontend:npm_run_build --no-daemon --stacktrace
      - name: Start server and deploy to it (either Preview or Dev)
        run: ./deployment/start_and_deploy_to_server.sh $ENVIRONMENT
        env:
          TARGETSERVER_STARTUP_URL: ${{ secrets.TARGETSERVER_STARTUP_URL }}
          TARGETSERVER_HOST_KEYS: ${{ secrets.TARGETSERVER_HOST_KEYS }}
          TARGETSERVER_URL: ${{ secrets.TARGETSERVER_URL }}
          TRUSTEE_BASE_URL: ${{ secrets.TRUSTEE_BASE_URL }}
          TRUSTEE_ENVIRONMENT_NAME: ${{ github.event.inputs.trusteeEnvironmentName }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          TRUSTEE_CREDENTIALS: ${{ secrets.TRUSTEE_CREDENTIALS }}
          IN_MEMORY: ${{ github.event.inputs.useInMemoryStorage }}
          KEYCLOAK_FRONTEND_URL: ${{ secrets.KEYCLOAK_FRONTEND_URL }}
          KEYCLOAK_ADMIN: ${{ secrets.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
          INITIALIZE_KEYCLOAK: ${{ steps.verifyKeycloakPassword.outputs.INITIALIZE_KEYCLOAK }}
          TEASER_COMPANY_PERM_IDS: ${{ secrets.TEASER_COMPANY_PERM_IDS }}
          KEYCLOAK_READER_VALUE: ${{ secrets.KEYCLOAK_READER_VALUE }}
          KEYCLOAK_READER_SALT: ${{ secrets.KEYCLOAK_READER_SALT }}
          KEYCLOAK_UPLOADER_VALUE: ${{ secrets.KEYCLOAK_UPLOADER_VALUE }}
          KEYCLOAK_UPLOADER_SALT: ${{ secrets.KEYCLOAK_UPLOADER_SALT }}
          KEYCLOAK_READER_PASSWORD: ${{ secrets.KEYCLOAK_READER_PASSWORD }}
          KEYCLOAK_UPLOADER_PASSWORD: ${{ secrets.KEYCLOAK_UPLOADER_PASSWORD }}
          KEYCLOAK_GOOGLE_SECRET: ${{ secrets.KEYCLOAK_GOOGLE_SECRET }}
          KEYCLOAK_GOOGLE_ID: ${{ secrets.KEYCLOAK_GOOGLE_ID }}
      - name: check deployment
        run: ./gradlew :dataland-frontend:npm_run_test${ENVIRONMENT} --no-daemon --stacktrace
        env:
          ELECTRON_EXTRA_LAUNCH_ARGS: "--ignore-connections-limit=localhost:8090,proxy,localhost,preview-dataland.duckdns.org,dev-dataland.duckdns.org"
          CYPRESS_PREPOPULATE_TIMEOUT_S: ${{ github.event.inputs.useInMemoryStorage && 40 || 900 }}
          CYPRESS_PREVISIT_TIMEOUT_S: ${{ github.event.inputs.useInMemoryStorage && 90 || 1200 }}
          KEYCLOAK_READER_PASSWORD: ${{ secrets.KEYCLOAK_READER_PASSWORD }}
          KEYCLOAK_UPLOADER_PASSWORD: ${{ secrets.KEYCLOAK_UPLOADER_PASSWORD }}
      - name: Upload FE E2E Cypress Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cypress
          path: ./dataland-frontend/cypress/
