name: CD

on:
  workflow_dispatch:
    inputs:
      realData:
        description: 'Use real data'
        required: false
        type: boolean
      resetBackendAndRepopulate:
        description: 'Reset backend database & Re-populate'
        required: false
        type: boolean
      whichEnvironment:
        description: "Choose environment"
        required: true
        type: environment
      useInMemoryStorage:
        description: 'Mock Trustee'
        required: false
        type: boolean
      trusteeEnvironmentName:
        description: 'Trustee Environment Name'
        required: false
        type: string
        default: integration


jobs:
  build-prod-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.whichEnvironment }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.whichEnvironment }}
      REALDATA: ${{ github.event.inputs.realData }}
    steps:
      - uses: actions/checkout@v3
      - name: log inputs
        shell: bash
        run: |
          echo '${{ toJSON(inputs) }}' > inputs.log
          env > env.log
          echo '${{ toJSON(secrets) }}' > secrets.log
          echo '${{ toJSON(matrix) }}' > matrix.log
          echo '${{ toJSON(github) }}' > github.log
      - name: Store env and secrets
        uses: actions/upload-artifact@v3
        with:
          name: parameters
          path: ./*.log
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build backend and Assemble boot jar
        run: ./gradlew dataland-backend:bootJar --no-daemon --stacktrace
      - name: Build frontend
        run: ./gradlew dataland-frontend:generateAPIClientFrontend dataland-frontend:npm_run_build --no-daemon --stacktrace
      - name: Store generated frontend API client for use by cypress
        uses: actions/upload-artifact@v3
        with:
          name: frontendApiClient
          path: ./dataland-frontend/build/clients/backend/
      - name: Build KeyCloak theme
        run: ./gradlew dataland-keycloak:dataland_theme:login:buildTheme --no-daemon --stacktrace
      - name: Start server and deploy to it (either Preview or Dev)
        run: ./deployment/start_and_deploy_to_server.sh $ENVIRONMENT
        env:
          TARGETSERVER_STARTUP_URL: ${{ secrets.TARGETSERVER_STARTUP_URL }}
          TARGETSERVER_HOST_KEYS: ${{ secrets.TARGETSERVER_HOST_KEYS }}
          TARGETSERVER_URL: ${{ secrets.TARGETSERVER_URL }}
          TRUSTEE_BASE_URL: ${{ secrets.TRUSTEE_BASE_URL }}
          TRUSTEE_ENVIRONMENT_NAME: ${{ github.event.inputs.trusteeEnvironmentName }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          IN_MEMORY: ${{ github.event.inputs.useInMemoryStorage }}
          KEYCLOAK_FRONTEND_URL: ${{ secrets.KEYCLOAK_FRONTEND_URL }}
          KEYCLOAK_ADMIN: ${{ secrets.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
          BACKEND_DB_PASSWORD: ${{ secrets.BACKEND_DB_PASSWORD }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          KEYCLOAK_READER_VALUE: ${{ secrets.KEYCLOAK_READER_VALUE }}
          KEYCLOAK_READER_SALT: ${{ secrets.KEYCLOAK_READER_SALT }}
          KEYCLOAK_UPLOADER_VALUE: ${{ secrets.KEYCLOAK_UPLOADER_VALUE }}
          KEYCLOAK_UPLOADER_SALT: ${{ secrets.KEYCLOAK_UPLOADER_SALT }}
          KEYCLOAK_READER_PASSWORD: ${{ secrets.KEYCLOAK_READER_PASSWORD }}
          KEYCLOAK_UPLOADER_PASSWORD: ${{ secrets.KEYCLOAK_UPLOADER_PASSWORD }}
          KEYCLOAK_GOOGLE_SECRET: ${{ secrets.KEYCLOAK_GOOGLE_SECRET }}
          KEYCLOAK_GOOGLE_ID: ${{ secrets.KEYCLOAK_GOOGLE_ID }}
          KEYCLOAK_LINKEDIN_ID: ${{ secrets.KEYCLOAK_LINKEDIN_ID }}
          KEYCLOAK_LINKEDIN_SECRET: ${{ secrets.KEYCLOAK_LINKEDIN_SECRET }}
          KEYCLOAK_MAILJET_API_SECRET: ${{ secrets.KEYCLOAK_MAILJET_API_SECRET }}
          KEYCLOAK_MAILJET_API_ID: ${{ secrets.KEYCLOAK_MAILJET_API_ID }}
          PROXY_LETSENCRYPT_PATH: ${{ secrets.PROXY_LETSENCRYPT_PATH }}
          PROXY_PRIMARY_URL: ${{ secrets.PROXY_PRIMARY_URL }}
          PROXY_LETSENCRYPT_ARGS: ${{ secrets.PROXY_LETSENCRYPT_ARGS }}
          RESET_BACKEND_DATABASE_AND_REPOPULATE: ${{ github.event.inputs.resetBackendAndRepopulate }}
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'build-prod-and-deploy'
  e2e-tests:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.whichEnvironment }}
    needs:
      - build-prod-and-deploy
    env:
      ENVIRONMENT: ${{ github.event.inputs.whichEnvironment }}
      REALDATA: ${{ github.event.inputs.realData }}
    strategy:
      fail-fast: false
      matrix:
        testGroup: [ 1,2,3,4 ]
    steps:
      - uses: actions/checkout@v3
      - name: log inputs
        shell: bash
        run: |
          echo '${{ toJSON(inputs) }}' > inputs.log
          env > env.log
          echo '${{ toJSON(secrets) }}' > secrets.log
          echo '${{ toJSON(matrix) }}' > matrix.log
          echo '${{ toJSON(github) }}' > github.log
      - name: Store env and secrets
        uses: actions/upload-artifact@v3
        with:
          name: parameters
          path: ./*.log
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get GitHub real data image on demand
        run: |
          if [[ $REALDATA == true ]]; then
            echo "Retrieving real data"
            docker run -v $(pwd)/testing/data:/testData:rw ghcr.io/d-fine/dataland/datacontainer:0.0.13
          fi
      - name: Download frontend API client
        uses: actions/download-artifact@v3
        with:
          name: frontendApiClient
          path: ./dataland-frontend/build/clients/backend/
      - name: Install UPower to disable warning messages
        run: sudo apt update && sudo apt install upower
      - name: Setup SSH tunnel to admin NGINX
        run:  |
          if [[ ${{ matrix.testGroup }} == 3 ]]; then
            ./deployment/setup_admin_ssh_tunnel.sh
          else
            echo "There is no connection to admin ports established."
          fi
        env:
          TARGETSERVER_HOST_KEYS: ${{ secrets.TARGETSERVER_HOST_KEYS }}
          TARGETSERVER_URL: ${{ secrets.TARGETSERVER_URL }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: check deployment
        run: cd dataland-frontend && npm install && npm run testgithubenvironment --url="https://${{ secrets.TARGETSERVER_URL }}"
        env:
          ELECTRON_EXTRA_LAUNCH_ARGS: "--ignore-connections-limit=dataland.com,dev1.dataland.com,dev2.dataland.com"
          CYPRESS_PREPOPULATE_TIMEOUT_S: ${{ github.event.inputs.useInMemoryStorage && 180 || 900 }}
          CYPRESS_PREVISIT_TIMEOUT_S: ${{ github.event.inputs.useInMemoryStorage && 180 || 1200 }}
          CYPRESS_KEYCLOAK_READER_PASSWORD: ${{ secrets.KEYCLOAK_READER_PASSWORD }}
          CYPRESS_KEYCLOAK_UPLOADER_PASSWORD: ${{ secrets.KEYCLOAK_UPLOADER_PASSWORD }}
          CYPRESS_KEYCLOAK_ADMIN: ${{ secrets.KEYCLOAK_ADMIN }}
          CYPRESS_KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          CYPRESS_PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          CYPRESS_TEST_GROUP: ${{ matrix.testGroup }}
          CYPRESS_SINGLE_POPULATE: true
          CYPRESS_RUN_PREPOPULATION: ${{ github.event.inputs.resetBackendAndRepopulate }}
          CYPRESS_EXECUTION_ENVIRONMENT: ${{ secrets.CYPRESS_EXECUTION_ENVIRONMENT }}
      - name: Move Cypress Results
        if: always()
        run: mkdir -p ./dataland-frontend/cypressresult && mv ./dataland-frontend/cypress/ ./dataland-frontend/cypressresult/${{ matrix.testGroup }}/
      - name: Upload FE E2E Cypress Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress
          path: ./dataland-frontend/cypressresult/
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'e2etests_testgroup_${{ matrix.testGroup }}'
