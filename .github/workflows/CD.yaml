name: CD

on:
  workflow_dispatch:
    inputs:
      resetStackAndRepopulate:
        description: 'Reset non-user related Docker Volumes & Re-populate'
        required: false
        type: boolean
      loadGleifGoldenCopy:
        description: 'Load the full GLEIF Golden Copy File into the database'
        required: false
        type: boolean
      whichEnvironment:
        description: "Choose environment"
        required: true
        type: environment

jobs:
  log-everything:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log everything
        with:
          github: ${{ toJSON(github) }}
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          runner: ${{ toJSON(runner) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
  rebuild-docker-images:
    uses: ./.github/workflows/RebuildDockerImages.yaml
  upload-dataland-frontend-client:
    runs-on: ubuntu-latest
    needs:
      - rebuild-docker-images
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - name: Extract Frontend Client from E2Etest Image
        run: |
          mkdir -p ./dataland-frontend/ 
          docker run --rm --entrypoint cp -v $(pwd):/hostdir ghcr.io/d-fine/dataland/dataland_e2etests:${{ needs.rebuild-docker-images.outputs.dataland_e2tests_version }} -r /app/dataland-frontend/build/ /hostdir/dataland-frontend
      - name: Store generated frontend API clients for use by cypress
        uses: actions/upload-artifact@v3
        with:
          name: frontendClients
          path: ./dataland-frontend/build/clients/
  deploy-to-server-with-latest-built-images:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.whichEnvironment }}
    needs:
      - rebuild-docker-images
    env:
      ENVIRONMENT: ${{ github.event.inputs.whichEnvironment }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: ./.github/workflows/downloadImageVersions
      - name: Start server and deploy to it (either Preview or Dev)
        run: ./deployment/start_and_deploy_to_server.sh $ENVIRONMENT
        env:
          TARGETSERVER_HOST_KEYS: ${{ vars.TARGETSERVER_HOST_KEYS }}
          TARGETSERVER_URL: ${{ vars.TARGETSERVER_URL }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          KEYCLOAK_FRONTEND_URL: ${{ vars.KEYCLOAK_FRONTEND_URL }}
          KEYCLOAK_ADMIN: ${{ vars.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
          BACKEND_DB_PASSWORD: ${{ secrets.BACKEND_DB_PASSWORD }}
          API_KEY_MANAGER_DB_PASSWORD: ${{ secrets.API_KEY_MANAGER_DB_PASSWORD }}
          INTERNAL_STORAGE_DB_PASSWORD: ${{ secrets.INTERNAL_STORAGE_DB_PASSWORD }}
          DOCUMENT_MANAGER_DB_PASSWORD: ${{ secrets.DOCUMENT_MANAGER_DB_PASSWORD }}
          QA_SERVICE_DB_PASSWORD: ${{ secrets.QA_SERVICE_DB_PASSWORD }}
          COMMUNITY_MANAGER_DB_PASSWORD: ${{ secrets.COMMUNITY_MANAGER_DB_PASSWORD }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          KEYCLOAK_DATALAND_ADMIN_VALUE: ${{ secrets.KEYCLOAK_DATALAND_ADMIN_VALUE }}
          KEYCLOAK_DATALAND_ADMIN_SALT: ${{ secrets.KEYCLOAK_DATALAND_ADMIN_SALT }}
          DATALAND_BATCH_MANAGER_CLIENT_SECRET: ${{ secrets.DATALAND_BATCH_MANAGER_CLIENT_SECRET }}
          DATALAND_AUTOMATED_QA_SERVICE_CLIENT_SECRET: ${{ secrets.DATALAND_AUTOMATED_QA_SERVICE_CLIENT_SECRET }}
          KEYCLOAK_READER_VALUE: ${{ secrets.KEYCLOAK_READER_VALUE }}
          KEYCLOAK_READER_SALT: ${{ secrets.KEYCLOAK_READER_SALT }}
          KEYCLOAK_UPLOADER_VALUE: ${{ secrets.KEYCLOAK_UPLOADER_VALUE }}
          KEYCLOAK_UPLOADER_SALT: ${{ secrets.KEYCLOAK_UPLOADER_SALT }}
          KEYCLOAK_REVIEWER_VALUE: ${{ secrets.KEYCLOAK_REVIEWER_VALUE }}
          KEYCLOAK_REVIEWER_SALT: ${{ secrets.KEYCLOAK_REVIEWER_SALT }}
          KEYCLOAK_GOOGLE_SECRET: ${{ secrets.KEYCLOAK_GOOGLE_SECRET }}
          KEYCLOAK_GOOGLE_ID: ${{ secrets.KEYCLOAK_GOOGLE_ID }}
          KEYCLOAK_LINKEDIN_ID: ${{ secrets.KEYCLOAK_LINKEDIN_ID }}
          KEYCLOAK_LINKEDIN_SECRET: ${{ secrets.KEYCLOAK_LINKEDIN_SECRET }}
          MAILJET_API_SECRET: ${{ secrets.MAILJET_API_SECRET }}
          MAILJET_API_ID: ${{ secrets.MAILJET_API_ID }}
          NOTIFICATION_RECEIVERS_DATA_OWNERSHIP_REQUEST: ${{ secrets.NOTIFICATION_RECEIVERS_DATA_OWNERSHIP_REQUEST }}
          NOTIFICATION_RECEIVERS_CC_DATA_OWNERSHIP_REQUEST: ${{ secrets.NOTIFICATION_RECEIVERS_CC_DATA_OWNERSHIP_REQUEST }}
          NOTIFICATION_RECEIVERS_BULK_DATA_REQUEST: ${{ secrets.NOTIFICATION_RECEIVERS_BULK_DATA_REQUEST }}
          NOTIFICATION_RECEIVERS_CC_BULK_DATA_REQUEST: ${{ secrets.NOTIFICATION_RECEIVERS_CC_BULK_DATA_REQUEST }}
          PROXY_LETSENCRYPT_PATH: ${{ vars.PROXY_LETSENCRYPT_PATH }}
          PROXY_PRIMARY_URL: ${{ vars.TARGETSERVER_URL }}
          PROXY_LETSENCRYPT_ARGS: ${{ vars.PROXY_LETSENCRYPT_ARGS }}
          RESET_STACK_AND_REPOPULATE: ${{ github.event.inputs.resetStackAndRepopulate }}
          RABBITMQ_USER: ${{ vars.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_PASS_HASH: ${{ secrets.RABBITMQ_PASS_HASH }}
          LOAD_GLEIF_GOLDEN_COPY: ${{ github.event.inputs.loadGleifGoldenCopy }}
          BACKEND_MIGRATION_BASELINE_VERSION: ${{ vars.BACKEND_MIGRATION_BASELINE_VERSION }}
          COMMUNITY_MANAGER_MIGRATION_BASELINE_VERSION: ${{ vars.COMMUNITY_MANAGER_MIGRATION_BASELINE_VERSION }}
          INTERNAL_STORAGE_MIGRATION_BASELINE_VERSION: ${{ vars.INTERNAL_STORAGE_MIGRATION_BASELINE_VERSION }}
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'deploy-to-server-with-latest-built-images'
      - name: Verify images
        run: ./deployment/verifyImagesRemote.sh
        env:
          TARGETSERVER_URL: ${{ vars.TARGETSERVER_URL }}
  e2e-tests:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.whichEnvironment }}
    needs:
      - deploy-to-server-with-latest-built-images
      - upload-dataland-frontend-client
    strategy:
      fail-fast: false
      matrix:
        testGroup: [ 1,2,3,4 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download frontend API clients
        uses: actions/download-artifact@v3
        with:
          name: frontendClients
          path: ./dataland-frontend/build/clients/
      - name: Install UPower to disable warning messages
        run: sudo apt update && sudo apt install upower
      - name: Setup SSH tunnel to admin NGINX
        run: |
          if [[ ${{ matrix.testGroup }} == 3 ]]; then
            ./deployment/setup_admin_ssh_tunnel.sh
          else
            echo "There is no connection to admin ports established."
          fi
        env:
          TARGETSERVER_HOST_KEYS: ${{ vars.TARGETSERVER_HOST_KEYS }}
          TARGETSERVER_URL: ${{ vars.TARGETSERVER_URL }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: check deployment
        run: cd dataland-frontend && npm install && npm run testgithubenvironment --url="https://${{ vars.TARGETSERVER_URL }}"
        env:
          ELECTRON_EXTRA_LAUNCH_ARGS: "--ignore-connections-limit=dataland.com,test.dataland.com,dev1.dataland.com,dev2.dataland.com,dev3.dataland.com"
          KEYCLOAK_READER_PASSWORD: ${{ secrets.KEYCLOAK_READER_PASSWORD }}
          KEYCLOAK_UPLOADER_PASSWORD: ${{ secrets.KEYCLOAK_UPLOADER_PASSWORD }}
          KEYCLOAK_REVIEWER_PASSWORD: ${{ secrets.KEYCLOAK_REVIEWER_PASSWORD }}
          KEYCLOAK_DATALAND_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_DATALAND_ADMIN_PASSWORD }}
          KEYCLOAK_ADMIN: ${{ vars.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          CYPRESS_RESET_DATABASE: ${{ github.event.inputs.resetStackAndRepopulate }}
          CYPRESS_EXECUTION_ENVIRONMENT: ${{ vars.CYPRESS_EXECUTION_ENVIRONMENT }}
          CYPRESS_TEST_GROUP: ${{ matrix.testGroup }}
          CYPRESS_SINGLE_POPULATE: true
          CYPRESS_RUN_PREPOPULATION: ${{ github.event.inputs.resetStackAndRepopulate }}
          RABBITMQ_USER: ${{ vars.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_PASS_HASH: ${{ secrets.RABBITMQ_PASS_HASH }}
      - name: Move Cypress Results
        if: always()
        run: |
          mkdir -p ./dataland-frontend/cypressresult ./dataland-frontend/cypressresult/${{ matrix.testGroup }} ./dataland-frontend/cypress && 7z a -t7z -mhe=on -p"${{ secrets.SENSITIVE_ARTIFACT_ENCRYPTION_KEY }}" ./dataland-frontend/cypressresult/${{ matrix.testGroup }}/out.7z ./dataland-frontend/cypress/
      - name: Upload FE E2E Cypress Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress
          path: ./dataland-frontend/cypressresult/
          retention-days: 1
