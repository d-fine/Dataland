name: CI
env:
  DATALAND_SKYMINDERCLIENT_TOKEN: ${{ secrets.DATALAND_SKYMINDERCLIENT_TOKEN }}
  DATALAND_SKYMINDERCLIENT_USER: ${{ secrets.DATALAND_SKYMINDERCLIENT_USER }}
  SKYMINDER_URL: ${{ secrets.SKYMINDER_URL }}
  SKYMINDER_PW: ${{ secrets.SKYMINDER_PW }}
  SKYMINDER_USER: ${{ secrets.SKYMINDER_USER }}

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build all and Assemble boot jar
        run: ./gradlew assemble
      - name: Build frontend
        run: ./gradlew dataland-frontend:npm_run_build
      - name: Copy the files in .gradle into a new folder in the workspace
        run: cp -r /home/runner/.gradle ./gradlecache
      - name: Upload Build Directories
        uses: actions/upload-artifact@v2
        with:
          name: buildDirectories
          path: "**/build/"
      # setup Docker build action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build an eclipse temurin base image and push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the source code
          context: .
          file: ./deployment/Dockerfile
          tags: ghcr.io/d-fine/dataland/temurinbase:latest
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      # We shuld also build base images for cypress (needed by e2e-test-app)


  unit-tests-prebuild:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-docker-image
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: actions/download-artifact@v2
        with:
          name: buildDirectories
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Execute Frontend and Backend tests
        run: |
          docker build ./testcontainer -t unittests
          docker run -v $(pwd)/:/app:rw unittests
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: TestReportPreBuild
          path: ./**/build/reports
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: JaCoCoResultsUnitTests
          path: ./dataland-backend/build/jacoco/*.exec
      - name: Uoload FE lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: lcovResultsUnit
          path: ./dataland-frontend/coverage/**/lcov.info


  unit-tests:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-docker-image
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: actions/download-artifact@v2
        with:
          name: buildDirectories
      - name: Execute Backend tests
        run: ./gradlew ktlintcheck detekt :dataland-backend:test --no-daemon
      - name: Execute Frontend Unit Tests
        run: ./gradlew :dataland-frontend:npm_run_testunit
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: TestReport
          path: ./**/build/reports
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: JaCoCoResultsUnitTests
          path: ./dataland-backend/build/jacoco/*.exec
      - name: Upload FE lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: lcovResultsUnit
          path: ./dataland-frontend/coverage/**/lcov.info
  e2e-tests:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v2
      - name: Execute E2E Tests
        run: ./testing-shell-scripts/execute_e2e_tests.sh
        env:
          SKYMINDER_URL: "http://skyminder-server:8080"
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: JaCoCoResultsE2ETest
          path: ./*.exec
      - name: Upload FE E2E lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: lcovResultsE2E
          path: ./lcov.info
  sonar:
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'workflow_dispatch'
    needs:
      - e2e-tests
      - unit-tests
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: actions/download-artifact@v2
        with:
          name: buildDirectories
      - uses: actions/download-artifact@v2
        with:
          name: JaCoCoResultsUnitTests
      - uses: actions/download-artifact@v2
        with:
          name: JaCoCoResultsE2ETest
      - uses: actions/download-artifact@v2
        with:
          name: lcovResultsUnit
          path: fe-coverage/unit
      - uses: actions/download-artifact@v2
        with:
          name: lcovResultsE2E
          path: fe-coverage/e2e
      - name: Generate jacocoTestReport and run Sonar
        if: always()
        run: ./gradlew jacocoTestReport sonarqube --no-daemon
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  summary:
    runs-on: ubuntu-latest
    if: success()
    needs:
      - sonar
    steps:
      - name: Summary of this workflow's overall outcome
        run: exit 0
