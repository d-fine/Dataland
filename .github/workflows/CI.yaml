name: CI
env:
  GITHUB_USER: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    branches:
      - '**'

jobs:
  log-everything:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/logObjects
        name: log everything
        with:
          github: ${{ toJSON(github) }}
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          runner: ${{ toJSON(runner) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
  rebuild-docker-images:
    uses: ./.github/workflows/RebuildDockerImages.yaml
  frontend-component-tests:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Frontend component testing
        run: timeout -v 15m ./testing/execute_frontend_component_tests.sh
# Uncomment the lines below to enable debug logging for investigating flaky component tests.
#        env:
#          DEBUG: cypress:*
        if: always()
      - name: Upload Cypress Component Testing Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: componentTestCypressLogs
          path: cypress-component-test-logs.log
          overwrite: true
      - name: Upload lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lcovResults
          path: ./dataland-frontend/coverage/*.info
          overwrite: true
      - name: Upload FE Cypress Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-component-tests
          path: ./dataland-frontend/cypress
          overwrite: true
  framework-toolbox-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Execute framework-toolbox integrationTest
        run: ./gradlew dataland-framework-toolbox:integrationTest --no-daemon --stacktrace
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: JaCoCoResultsUnitTests
          path: ./**/*.exec
          overwrite: true
  gradle-based-tests:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: assemble project
        run: ./gradlew assemble --no-daemon --stacktrace
      - name: Execute linting and detekt
        run: ./gradlew ktlintCheck detekt --no-daemon --stacktrace
        if: always()
      - name: Execute unit tests for all spring services
        run: ./gradlew :dataland-backend:test :dataland-backend-utils:test :dataland-internal-storage:test :dataland-api-key-manager:test :dataland-qa-service:test :dataland-document-manager:test :dataland-batch-manager:test :dataland-community-manager:test :dataland-framework-toolbox:test --no-daemon --stacktrace
        if: always()
        env:
          MAILJET_API_ID: ${{ secrets.MAILJET_API_ID }}
          MAILJET_API_SECRET: ${{ secrets.MAILJET_API_SECRET }}
          NOTIFICATION_INTERNAL_RECEIVERS_DATA_REQUEST: "dummy@dataland.com;someoneelse@dataland.com"
          NOTIFICATION_INTERNAL_CC_DATA_REQUEST: ""
      - name: Frontend linting
        run: ./gradlew :dataland-frontend:generateClients :dataland-frontend:npm_run_lintci :dataland-frontend:npm_run_checkdependencies --no-daemon --stacktrace
        if: always()
      - name: Keycloak theme linting
        run: ./gradlew :dataland-keycloak:dataland_theme:login:npm_run_lintci --no-daemon --stacktrace
        if: always()
      - name: Execute Frontend Scripts to check if they run successfully
        if: always()
        run: ./gradlew :dataland-frontend:npm_run_fakefixtures --stacktrace
      - name: verify OpenApi Files
        if: always()
        env:
          DATALAND_COMMUNITY_MANAGER_CLIENT_SECRET: "password"
        run: testing/verifyOpenApiFiles.sh
      - name: verify no it.only exists
        if: always()
        run: |
          ! grep -ri "it\.only" dataland-frontend/tests/
      - name: Upload Test and Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: GradleReports
          path: |
            ./**/build/reports
            ./**/coverage
          overwrite: true
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: JaCoCoResultsUnitTests
          path: ./**/*.exec
          overwrite: true
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'unit-tests-backend'
  python-tests:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - name: Prepare python environment
        if: always()
        run: | 
          cd ./dataland-automated-qa-service
          pip install --no-cache-dir -r requirements.txt
          pip install -e .
          openapi-python-client generate --path ../dataland-document-manager/documentManagerOpenApi.json
          openapi-python-client generate --path ../dataland-backend/backendOpenApi.json
          pip install --no-cache-dir ./dataland-backend-api-documentation-client
          pip install --no-cache-dir ./dataland-document-manager-api-documentation-client
      - name: Python linting
        if: always()
        run: |
          pip install ruff
          ruff check --preview ./dataland-automated-qa-service/src
      - name: Execute python unit tests and measure coverage
        if: always()
        run: |
          cd ./dataland-automated-qa-service
          coverage run --source="./src/main" -m pytest -o log_cli=true -o log_cli_level=INFO
          coverage xml
          mv ./coverage.xml ./automated-qa-service-unit-test.xml
        env:
          DATALAND_AUTOMATED_QA_SERVICE_CLIENT_SECRET: "dummy"
          RABBITMQ_USER: "dummy"
          RABBITMQ_PASS: "dummy"
          PROXY_PRIMARY_URL: ${PROXY_PRIMARY_URL:-local-dev.dataland.com}
          INTERNAL_BACKEND_URL: ${INTERNAL_BACKEND_URL:-http://backend:8080/api}
      - name: Upload Python Unit Test Coverage Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: PythonUnitTestCoverage
          path: ./dataland-automated-qa-service/automated-qa-service-unit-test.xml
          overwrite: true
  e2e-tests:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs:
      - rebuild-docker-images
    strategy:
      fail-fast: false
      matrix:
        include:
          - testExecutor: "CYPRESS"
            testGroup: 1
          - testExecutor: "CYPRESS"
            testGroup: 2
          - testExecutor: "CYPRESS"
            testGroup: 3
          - testExecutor: "CYPRESS"
            testGroup: 4
          - testExecutor: "E2ETESTS"
            testGroup: 0
          - testExecutor: "RESTARTABILITY"
            testGroup: 100
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/downloadImageVersions
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - name: Retrieve SSL certificates for local-dev.dataland.com
        run: ./testing/retrieve_ssl_certs.sh
        env:
          TARGETSERVER_HOST_KEYS: ${{ vars.TARGETSERVER_HOST_KEYS }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Execute E2E Tests
        run: ./testing/e2e_test_launcher.sh
        env:
          KEYCLOAK_FRONTEND_URL: "https://local-dev.dataland.com/keycloak"
          KEYCLOAK_DB_PASSWORD: "password"
          BACKEND_DB_PASSWORD: "password"
          API_KEY_MANAGER_DB_PASSWORD: "password"
          INTERNAL_STORAGE_DB_PASSWORD: "password"
          DOCUMENT_MANAGER_DB_PASSWORD: "password"
          QA_SERVICE_DB_PASSWORD: "password"
          COMMUNITY_MANAGER_DB_PASSWORD: "password"
          PGADMIN_PASSWORD: "password"
          KEYCLOAK_DATALAND_ADMIN_VALUE: "Dic1AEUG0nKnZ8me/3GMxgfyUmbwmJwDWNXkC7arLcij2BDB0xeOgk8ZpfZPKmFNikr9Is5I4+Nyk3MB9zs7mA=="
          KEYCLOAK_DATALAND_ADMIN_SALT: "K9nzg086pCNjq8dxl84GZg=="
          KEYCLOAK_DATALAND_ADMIN_PASSWORD: "password"
          DATALAND_BATCH_MANAGER_CLIENT_SECRET: "password"
          DATALAND_COMMUNITY_MANAGER_CLIENT_SECRET: "password"
          DATALAND_AUTOMATED_QA_SERVICE_CLIENT_SECRET: "password"
          KEYCLOAK_READER_VALUE: "Dic1AEUG0nKnZ8me/3GMxgfyUmbwmJwDWNXkC7arLcij2BDB0xeOgk8ZpfZPKmFNikr9Is5I4+Nyk3MB9zs7mA=="
          KEYCLOAK_READER_SALT: "K9nzg086pCNjq8dxl84GZg=="
          KEYCLOAK_READER_PASSWORD: "password"
          KEYCLOAK_UPLOADER_VALUE: "Dic1AEUG0nKnZ8me/3GMxgfyUmbwmJwDWNXkC7arLcij2BDB0xeOgk8ZpfZPKmFNikr9Is5I4+Nyk3MB9zs7mA=="
          KEYCLOAK_UPLOADER_SALT: "K9nzg086pCNjq8dxl84GZg=="
          KEYCLOAK_UPLOADER_PASSWORD: "password"
          KEYCLOAK_REVIEWER_VALUE: "Dic1AEUG0nKnZ8me/3GMxgfyUmbwmJwDWNXkC7arLcij2BDB0xeOgk8ZpfZPKmFNikr9Is5I4+Nyk3MB9zs7mA=="
          KEYCLOAK_REVIEWER_SALT: "K9nzg086pCNjq8dxl84GZg=="
          KEYCLOAK_REVIEWER_PASSWORD: "password"
          KEYCLOAK_PREMIUM_USER_VALUE: "Dic1AEUG0nKnZ8me/3GMxgfyUmbwmJwDWNXkC7arLcij2BDB0xeOgk8ZpfZPKmFNikr9Is5I4+Nyk3MB9zs7mA=="
          KEYCLOAK_PREMIUM_USER_SALT: "K9nzg086pCNjq8dxl84GZg=="
          KEYCLOAK_PREMIUM_USER_PASSWORD: "password"
          KEYCLOAK_ADMIN: "admin"
          KEYCLOAK_ADMIN_PASSWORD: "password"
          KEYCLOAK_GOOGLE_ID: "irrelevant_in_ci"
          KEYCLOAK_GOOGLE_SECRET: "irrelevant_in_ci"
          PROXY_PRIMARY_URL: local-dev.dataland.com
          PROXY_LETSENCRYPT_PATH: /etc/letsencrypt/local-dev.dataland.com
          PROXY_IMAGE: ghcr.io/d-fine/dataland/dataland_inbound_proxy:${{ env.DATALAND_INBOUND_PROXY_VERSION }}
          CYPRESS_EXECUTION_ENVIRONMENT: "ci"
          CYPRESS_TEST_GROUP: ${{ matrix.testGroup }}
          TEST_EXECUTOR: ${{ matrix.testExecutor }}
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          MAILJET_API_ID: ${{ secrets.MAILJET_API_ID }}
          MAILJET_API_SECRET: ${{ secrets.MAILJET_API_SECRET }}
          NOTIFICATION_INTERNAL_RECEIVERS_DATA_REQUEST: "dummy.mail@dataland.com"
          NOTIFICATION_INTERNAL_CC_DATA_REQUEST: "dummy.mail2@dataland.com"
          NOTIFICATION_RECEIVERS_DATA_OWNERSHIP_REQUEST: "dummy.mail@dataland.com"
          NOTIFICATION_RECEIVERS_CC_DATA_OWNERSHIP_REQUEST: "dummy.mail2@dataland.com"
          RABBITMQ_USER: "admin"
          RABBITMQ_PASS: "dataland"
          RABBITMQ_PASS_HASH: "1s3+3kZqRTAgidTV6NE+adO3ja5NFNQZHa9MBwhJ0Kx7Fw6F"
          FRONTEND_LOCATION_CONFIG: "Test"
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: JaCoCoResultsE2ETest
          path: ./*.exec
          overwrite: true
      - name: Upload Python Coverage Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: PythonE2eTestCoverage
          path: ./*.xml
          overwrite: true
      - name: Upload lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lcovResults
          path: ./*.info
          overwrite: true
      - name: Upload E2E Test and Cypress Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2eTestReports
          path: |
            ./cypress
            ./coverage
            ./reports
          overwrite: true
      - name: Upload database dumps
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2eTestDatabaseDumps
          path: ./dbdumps/
          overwrite: true
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'e2etests_testgroup_${{ matrix.testGroup }}'
  sonar:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs:
      - e2e-tests
      - gradle-based-tests
      - frontend-component-tests
      - python-tests
      - framework-toolbox-tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
          vars: ${{ toJSON(vars) }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: actions/download-artifact@v4
        name: PythonUnitTestCoverage
        with:
          name: PythonUnitTestCoverage
          path: python-coverage
      - uses: actions/download-artifact@v4
        name: PythonE2eTestCoverage
        with:
          name: PythonE2eTestCoverage
          path: python-coverage
      - name: Convert Python coverage paths
        if: always()
        run: |
          cd ./python-coverage
          sed -i "s%src/main%/home/runner/work/Dataland/Dataland/dataland-automated-qa-service/src/main%g" ./*.xml
          sed -i "s%.//home%/home%g" ./*.xml
      - uses: actions/download-artifact@v4
        name: JaCoCoResultsUnitTests
        with:
          name: JaCoCoResultsUnitTests
      - uses: actions/download-artifact@v4
        name: JaCoCoResultsE2ETest
        with:
          name: JaCoCoResultsE2ETest
      - uses: actions/download-artifact@v4
        name: lcovResults
        with:
          name: lcovResults
          path: fe-coverage
      - name: Prepare Repo for Sonar
        if: ${{ !cancelled() }}
        run: |
          ./gradlew compileKotlin compileJava compileTestKotlin compileTestJava npmSetup npmInstall generateClients npm_run_build \
          -x detekt -x ktlintCheck -x jacocoTestReport -x kaptKotlin -x kaptTestKotlin -x kaptGenerateStubsTestKotlin -x kaptGenerateStubsKotlin \
          --no-daemon --stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: jacocoTestReport
        if: ${{ !cancelled() }}
        # jacocoTestReport must be executed in a gradle-job that is started AFTER classes are compiled - because
        # the build.gradle.kts only looks for .class files at start of gradle (and not at start of task).
        run: ./gradlew jacocoTestReport --no-daemon --stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Sonar
        if: ${{ !cancelled() }}
        run: |
          touch ./build/reports/sonarProperties.txt
          ./gradlew sonar -D"sonar.scanner.dumpToFile"="./build/reports/sonarProperties.txt" --no-daemon --stacktrace
          ./gradlew sonar --no-daemon --stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Upload Reports
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: SonarStageReports
          path: ./build/reports
          overwrite: true
  manual-maintenance-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Check if manual maintenance was executed recently"
        run: git log --since $(date -d "- 35 days" "+%x") | grep -ie "manual.maintenance" || ( echo "Last Manual Maintenance is too old. Do it now!"; exit 1)
  summary:
    runs-on: ubuntu-latest
    if: success()
    needs:
      - sonar
      - manual-maintenance-check
    steps:
      - name: Summary of this workflow's overall outcome
        run: exit 0
