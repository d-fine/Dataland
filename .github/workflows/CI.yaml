name: CI
env:
  GITHUB_USER: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REALDATA: false

on:
  push:
    branches:
      - '**'

jobs:
  log-everything:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log everything
        with:
          github: ${{ toJSON(github) }}
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          runner: ${{ toJSON(runner) }}
          secrets: ${{ toJSON(secrets) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
  rebuild-docker-images:
    uses: ./.github/workflows/RebuildDockerImages.yaml
  unit-tests-backend:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs:
      - rebuild-docker-images
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/downloadImageVersions
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Execute Backend unit tests by using base image from GitHub Registry
        run: |
          docker run -v $(pwd):/app:rw \
          -e GITHUB_TOKEN \
          -e GITHUB_USER \
          ghcr.io/d-fine/dataland/dataland_backend_test:${DATALAND_BACKEND_TEST_VERSION} \
          /app/gradlew -p /app ktlintcheck detekt :dataland-backend:test :dataland-csvconverter:test --no-daemon --stacktrace
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: TestReport
          path: ./**/build/reports
      - name: Upload JaCoCo Exec Results for backend
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: JaCoCoResultsBackendUnitTests
          path: ./dataland-backend/build/jacoco/*.exec
      - name: Upload JaCoCo Exec Results for csv converter
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: JaCoCoResultsCsvConverterUnitTests
          path: ./dataland-csvconverter/build/jacoco/*.exec
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'unit-tests-backend'
  component-tests-frontend:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs:
      - rebuild-docker-images
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Execute Frontend Component Tests
        run: ./gradlew :dataland-frontend:generateAPIClientFrontend :dataland-frontend:npm_run_lintci :dataland-frontend:npm_run_testcomponent :dataland-frontend:npm_run_checkdependencies --no-daemon --stacktrace
      - name: Upload FE lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lcovResults
          path: ./dataland-frontend/coverage/lcov.info
      - name: Execute Frontend Scripts to check if they run successfully
        run: ./gradlew :dataland-frontend:npm_run_fakefixtures --stacktrace
  e2e-tests:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs:
      - rebuild-docker-images
    strategy:
      fail-fast: false
      matrix:
        include:
          - testExecutor: "CYPRESS"
            testGroup: 1
          - testExecutor: "CYPRESS"
            testGroup: 2
          - testExecutor: "CYPRESS"
            testGroup: 3
          - testExecutor: "CYPRESS"
            testGroup: 4
          - testExecutor: "E2ETESTS"
            testGroup: 0
          - testExecutor: "RESTARTABILITY"
            testGroup: 100
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/downloadImageVersions
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
      - name: Retrieve SSL certificates for local-dev.dataland.com
        run: ./testing/retrieve_ssl_certs.sh
        env:
          DATALAND_LETSENCRYPT_HOST_KEYS: ${{ secrets.DATALAND_LETSENCRYPT_HOST_KEYS }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Execute E2E Tests
        run: ./testing/e2e_test_launcher.sh
        env:
          KEYCLOAK_FRONTEND_URL: "https://local-dev.dataland.com/keycloak"
          KEYCLOAK_DB_PASSWORD: "password"
          BACKEND_DB_PASSWORD: "password"
          PGADMIN_PASSWORD: "password"
          KEYCLOAK_READER_VALUE: "qT0vhQ7bQA0OuAlJslpDr421pJQjZWIHxXZYePO9IOVVfZUX+85SwuwVrLgL/9xiW5hjyxlhKqQzUl7xUh+hVQ=="
          KEYCLOAK_READER_SALT: "6ZN+5rRT/wQcQqvNhXIsfA=="
          KEYCLOAK_READER_PASSWORD: "test"
          KEYCLOAK_UPLOADER_VALUE: "qT0vhQ7bQA0OuAlJslpDr421pJQjZWIHxXZYePO9IOVVfZUX+85SwuwVrLgL/9xiW5hjyxlhKqQzUl7xUh+hVQ=="
          KEYCLOAK_UPLOADER_SALT: "6ZN+5rRT/wQcQqvNhXIsfA=="
          KEYCLOAK_UPLOADER_PASSWORD: "test"
          KEYCLOAK_ADMIN: "admin"
          KEYCLOAK_ADMIN_PASSWORD: "admin"
          KEYCLOAK_GOOGLE_ID: ${{ secrets.KEYCLOAK_GOOGLE_ID }}
          KEYCLOAK_GOOGLE_SECRET: ${{ secrets.KEYCLOAK_GOOGLE_SECRET }}
          PROXY_PRIMARY_URL: local-dev.dataland.com
          PROXY_LETSENCRYPT_PATH: /etc/letsencrypt/local-dev.dataland.com
          PROXY_IMAGE: ghcr.io/d-fine/dataland/dataland_inbound_proxy_production:${{ env.DATALAND_INBOUND_PROXY_PRODUCTION_VERSION }}
          ENVIRONMENT: "development"
          CYPRESS_EXECUTION_ENVIRONMENT: "ci"
          CYPRESS_TEST_GROUP: ${{ matrix.testGroup }}
          TEST_EXECUTOR: ${{ matrix.testExecutor }}
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
      - name: Upload JaCoCo Exec Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: JaCoCoResultsE2ETest
          path: ./*.exec
      - name: Upload lcov Exec Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lcovResults
          path: ./*.info
      - name: Upload FE E2E Cypress Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress
          path: ./cypress
      - name: Upload E2E Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2eTestReports
          path: ./reports
      - name: Upload database dumps
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2eTestDatabaseDumps
          path: ./dbdumps/
      - uses: ./.github/workflows/dockerLogs
        if: always()
        with:
          subfolder: 'e2etests_testgroup_${{ matrix.testGroup }}'
  gradle-assemble:
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: assemble project
        run: ./gradlew assemble --no-daemon --stacktrace
      - name: Upload build folders
        if:
        uses: actions/upload-artifact@v3
        with:
          name: gradleBuildFolders
          path: |
            ./**/build/
            .gradle
            !dataland-csvconverter/build/distributions
            !dataland-csvconverter/build/libs
            !dataland-backend/build/libs
            !dataland-e2etests/build/resources
            !dataland-backend/build/tmp/kapt3/incApCache/main
  sonar:
    runs-on: ubuntu-latest
    needs:
      - e2e-tests
      - unit-tests-backend
      - component-tests-frontend
      - gradle-assemble
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ./.github/workflows/logObjects
        name: log job contexts
        with:
          env: ${{ toJSON(env) }}
          job: ${{ toJSON(job) }}
          steps: ${{ toJSON(steps) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          needs: ${{ toJSON(needs) }}
          inputs: ${{ toJSON(inputs) }}
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: actions/download-artifact@v3
        with:
          name: gradleBuildFolders
      - uses: actions/download-artifact@v3
        with:
          name: JaCoCoResultsBackendUnitTests
      - uses: actions/download-artifact@v3
        with:
          name: JaCoCoResultsCsvConverterUnitTests
      - uses: actions/download-artifact@v3
        with:
          name: JaCoCoResultsE2ETest
      - uses: actions/download-artifact@v3
        with:
          name: lcovResults
          path: fe-coverage
      - name: Generate jacocoTestReport and run Sonar
        if: always()
        run: ./gradlew jacocoTestReport sonarqube --no-daemon --stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  summary:
    runs-on: ubuntu-latest
    if: success()
    needs:
      - sonar
    steps:
      - name: Summary of this workflow's overall outcome
        run: exit 0
