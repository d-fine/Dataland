// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { type SfdrData } from "@clients/backend";
import { type MLDTConfig } from "@/components/resources/dataTable/MultiLayerDataTableConfiguration";
import { type AvailableMLDTDisplayObjectTypes } from "@/components/resources/dataTable/MultiLayerDataTableCellDisplayer";
import { formatCurrencyForDisplay } from "@/components/resources/dataTable/conversion/CurrencyDataPointValueGetterFactory";
import { formatNumberForDatatable } from "@/components/resources/dataTable/conversion/NumberValueGetterFactory";
import { wrapDisplayValueWithDatapointInformation } from "@/components/resources/dataTable/conversion/DataPoints";
import { formatYesNoNoEvidenceFoundValueForDatatable } from "@/components/resources/dataTable/conversion/YesNoNoEvidenceFoundValueGetterFactory";
import { formatHighImpactClimateSectorForDisplay } from "@/components/resources/dataTable/conversion/HighImpactClimateGetterFactory";
import { formatStringForDatatable } from "@/components/resources/dataTable/conversion/PlainStringValueGetterFactory";
import { getOriginalNameFromTechnicalName } from "@/components/resources/dataTable/conversion/Utils";
export const sfdrViewConfiguration: MLDTConfig<SfdrData> = [
  {
    type: "section",
    label: "General",
    expandOnPageLoad: true,
    shouldDisplay: (): boolean => true,
    children: [
      {
        type: "section",
        label: "General",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Data Date",
            explanation: "The year for which the data is reported",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatStringForDatatable(dataset.general?.general?.dataDate),
          },
          {
            type: "cell",
            label: "Fiscal Year Deviation",
            explanation: "Does the fiscal year deviate from the calendar year?",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes => {
              const mappings = {
                Deviation: "Deviation",
                NoDeviation: "No Deviation",
              };
              return formatStringForDatatable(
                dataset.general?.general?.fiscalYearDeviation
                  ? getOriginalNameFromTechnicalName(dataset.general?.general?.fiscalYearDeviation, mappings)
                  : "",
              );
            },
          },
          {
            type: "cell",
            label: "Fiscal Year End",
            explanation: "The date the fiscal year ends",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatStringForDatatable(dataset.general?.general?.fiscalYearEnd),
          },
        ],
      },
    ],
    labelBadgeColor: "orange",
  },
  {
    type: "section",
    label: "Environmental",
    expandOnPageLoad: true,
    shouldDisplay: (): boolean => true,
    children: [
      {
        type: "section",
        label: "Greenhouse gas emissions ",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Scope 1 GHG emissions",
            explanation:
              "Scope 1 carbon emissions, namely emissions generated from sources that are controlled by the company that issues the underlying assets",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1GhgEmissionsInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 GHG emissions",
                dataset.environmental?.greenhouseGasEmissions?.scope1GhgEmissionsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 2 GHG emissions",
            explanation:
              "Scope 2 carbon emissions, namely emissions from the consumption of purchased electricity, steam, or other sources of energy generated upstream from the company that issues the underlying assets",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 2 GHG emissions",
                dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 2 GHG emissions (location-based)",
            explanation: "Scope 2 carbon emissions computed using the location-based method",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsLocationBasedInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 2 GHG emissions (location-based)",
                dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsLocationBasedInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 2 GHG emissions (market-based)",
            explanation: "Scope 2 carbon emissions computed using the market-based method",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsMarketBasedInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 2 GHG emissions (market-based)",
                dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsMarketBasedInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 1 and 2 GHG emissions",
            explanation: "Sum of scope 1 and 2 carbon emissions",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1And2GhgEmissionsInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 and 2 GHG emissions",
                dataset.environmental?.greenhouseGasEmissions?.scope1And2GhgEmissionsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 1 and 2 GHG emissions (location-based)",
            explanation:
              "Sum of scope 1 and 2 carbon emissions, using the location-based method to compute scope 2 carbon emissions",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1And2GhgEmissionsLocationBasedInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 and 2 GHG emissions (location-based)",
                dataset.environmental?.greenhouseGasEmissions?.scope1And2GhgEmissionsLocationBasedInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 1 and 2 GHG emissions (market-based)",
            explanation:
              "Sum of scope 1 and 2 carbon emissions, using the market-based method to compute scope 2 carbon emissions",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1And2GhgEmissionsMarketBasedInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 and 2 GHG emissions (market-based)",
                dataset.environmental?.greenhouseGasEmissions?.scope1And2GhgEmissionsMarketBasedInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 3 GHG emissions",
            explanation:
              "Scope 3 carbon emissions in tonnes, i.e. all indirect upstream and downstream emissions that are not included in scope 2",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope3GhgEmissionsInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 3 GHG emissions",
                dataset.environmental?.greenhouseGasEmissions?.scope3GhgEmissionsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 1 and 2 and 3 GHG emissions",
            explanation: "Sum of scope 1, 2 and 3 carbon emissions",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1And2And3GhgEmissionsInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 and 2 and 3 GHG emissions",
                dataset.environmental?.greenhouseGasEmissions?.scope1And2And3GhgEmissionsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 1 and 2 and 3 GHG emissions (location-based)",
            explanation:
              "Sum of scope 1, 2 and 3 carbon emissions, using the location-based method to compute scope 2 carbon emissions",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1And2And3GhgEmissionsLocationBasedInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 and 2 and 3 GHG emissions (location-based)",
                dataset.environmental?.greenhouseGasEmissions?.scope1And2And3GhgEmissionsLocationBasedInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Scope 1 and 2 and 3 GHG emissions (market-based)",
            explanation:
              "Sum of scope 1, 2 and 3 carbon emissions, using the market-based method to compute scope 2 carbon emissions",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1And2And3GhgEmissionsMarketBasedInTonnes?.value,
                  "Tonnes",
                ),
                "Scope 1 and 2 and 3 GHG emissions (market-based)",
                dataset.environmental?.greenhouseGasEmissions?.scope1And2And3GhgEmissionsMarketBasedInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Enterprise Value",
            explanation:
              "The sum, at fiscal year-end, of the market capitalisation of ordinary shares, the market capitalisation of preferred shares, and the book value of total debt and non-controlling interests, without the deduction of cash or cash equivalents. See also Regulation, Annex I top (4).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatCurrencyForDisplay(
                dataset.environmental?.greenhouseGasEmissions?.enterpriseValue,
                "Enterprise Value",
              ),
          },
          {
            type: "cell",
            label: "Total Revenue",
            explanation:
              "Total revenue for the financial year. i.e., income arising in the course of an entity's ordinary activities, the amounts derived from the sale of products and the provision of services after deducting sales rebates and value added tax and other taxes directly linked to turnover. Overall turnover is equivalent to a firm's total revenues over some period of time (millions)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatCurrencyForDisplay(dataset.environmental?.greenhouseGasEmissions?.totalRevenue, "Total Revenue"),
          },
          {
            type: "cell",
            label: "Carbon footprint",
            explanation:
              "Tonnes of GHG emissions / million of the enterprise value (in the same currency as the enterprise value)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.carbonFootprintInTonnesPerMillionEURRevenue?.value,
                  "Tonnes / \u20ACM Revenue",
                ),
                "Carbon footprint",
                dataset.environmental?.greenhouseGasEmissions?.carbonFootprintInTonnesPerMillionEURRevenue,
              ),
          },
          {
            type: "cell",
            label: "GHG intensity",
            explanation: "Tonnes of GHG emissions / million of the revenue (in the same currency as the total revenue)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.ghgIntensityInTonnesPerMillionEURRevenue?.value,
                  "Tonnes / \u20ACM Revenue",
                ),
                "GHG intensity",
                dataset.environmental?.greenhouseGasEmissions?.ghgIntensityInTonnesPerMillionEURRevenue,
              ),
          },
          {
            type: "cell",
            label: "Fossil Fuel Sector Exposure",
            explanation:
              "(Part of) revenues derived from exploration, mining, extraction, production, processing, storage, refining or distribution, including transportation, storage and trade, of fossil fuels as defined in Article 2, point (62), of Regulation (EU) 2018/1999 of the European Parliament and of the Council? See also Regulation, Annex I, top (5).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.fossilFuelSectorExposure?.value,
                ),
                "Fossil Fuel Sector Exposure",
                dataset.environmental?.greenhouseGasEmissions?.fossilFuelSectorExposure,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Energy performance",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Renewable Energy Production",
            explanation:
              "Total value of renewable energy produced, meaning energy from non-fossil sources, namely wind, solar (solar thermal and solar photovoltaic) and geothermal energy, ambient energy, tide, wave and other ocean energy, hydropower, biomass, landfill gas, sewage treatment plant gas, and biogas. See also Regulation, Annex I, top (6).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.renewableEnergyProductionInGWh?.value,
                  "GWh",
                ),
                "Renewable Energy Production",
                dataset.environmental?.energyPerformance?.renewableEnergyProductionInGWh,
              ),
          },
          {
            type: "cell",
            label: "Renewable Energy Consumption",
            explanation:
              "Total value of renewable energy consumed, meaning energy from non-fossil sources, namely wind, solar (solar thermal and solar photovoltaic) and geothermal energy, ambient energy, tide, wave and other ocean energy, hydropower, biomass, landfill gas, sewage treatment plant gas, and biogas. See also Regulation, Annex I, top (6).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.renewableEnergyConsumptionInGWh?.value,
                  "GWh",
                ),
                "Renewable Energy Consumption",
                dataset.environmental?.energyPerformance?.renewableEnergyConsumptionInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Production",
            explanation:
              "Total value of non-renewable energy produced, meaning energy from sources other than non-fossil sources. See also Regulation, Annex I, top (7).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyProductionInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Production",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyProductionInGWh,
              ),
          },
          {
            type: "cell",
            label: "Relative Non-Renewable Energy Production",
            explanation:
              "Share of non-renewable energy production from total energy production (i.e. renewable plus non-renewable).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.relativeNonRenewableEnergyProductionInPercent?.value,
                  "Percent",
                ),
                "Relative Non-Renewable Energy Production",
                dataset.environmental?.energyPerformance?.relativeNonRenewableEnergyProductionInPercent,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption",
            explanation:
              "Total value of non-renewable energy consumed, meaning energy from sources other than non-fossil sources.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionInGWh,
              ),
          },
          {
            type: "cell",
            label: "Relative Non-Renewable Energy Consumption",
            explanation:
              "Share of non-renewal energy consumption from total energy consumption (i.e. renewable plus non-renewable).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.relativeNonRenewableEnergyConsumptionInPercent?.value,
                  "Percent",
                ),
                "Relative Non-Renewable Energy Consumption",
                dataset.environmental?.energyPerformance?.relativeNonRenewableEnergyConsumptionInPercent,
              ),
          },
          {
            type: "cell",
            label: "Applicable High Impact Climate Sectors",
            explanation: "Sector applicable activities",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatHighImpactClimateSectorForDisplay(
                dataset.environmental?.energyPerformance?.applicableHighImpactClimateSectors,
              ),
          },
          {
            type: "cell",
            label: "Total High Impact Climate Sector Energy Consumption",
            explanation:
              "High impact climate sectors’ means the sectors listed in Sections A to H and Section L of Annex I to Regulation (EC) No 1893/2006 of the European Parliament and of the Council (Regulation (EC) No 1893/2006 of the European Parliament and of the Council of 20 December 2006 establishing the statistical classification of economic activities NACE Revision 2 and amending Council Regulation (EEC) No 3037/90 as well as certain EC Regulations on specific statistical domains (OJ L 393, 30.12.2006, p. 1)).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.totalHighImpactClimateSectorEnergyConsumptionInGWh?.value,
                  "GWh",
                ),
                "Total High Impact Climate Sector Energy Consumption",
                dataset.environmental?.energyPerformance?.totalHighImpactClimateSectorEnergyConsumptionInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Fossil Fuels",
            explanation:
              "Energy consumption from fossil fuels (sum of crude oil, natural gas, nuclear energy, lignite and coal) (non-renewable energy source)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionFossilFuelsInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Fossil Fuels",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionFossilFuelsInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Crude Oil",
            explanation: "Energy consumption from crude oil (non-renewable energy source)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionCrudeOilInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Crude Oil",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionCrudeOilInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Natural Gas",
            explanation: "Energy consumption from natural gas (non-renewable energy source)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionNaturalGasInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Natural Gas",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionNaturalGasInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Lignite",
            explanation: "Energy consumption from lignite (non-renewable energy source)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionLigniteInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Lignite",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionLigniteInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Coal",
            explanation: "Energy consumption from coal (non-renewable energy source)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionCoalInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Coal",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionCoalInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Nuclear Energy",
            explanation: "Energy consumption from nuclear energy (Uranium) (non-renewable energy source)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionNuclearEnergyInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Nuclear Energy",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionNuclearEnergyInGWh,
              ),
          },
          {
            type: "cell",
            label: "Non-Renewable Energy Consumption Other",
            explanation: "Energy consumption from any other available (used) non-renewable source of energy",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionOtherInGWh?.value,
                  "GWh",
                ),
                "Non-Renewable Energy Consumption Other",
                dataset.environmental?.energyPerformance?.nonRenewableEnergyConsumptionOtherInGWh,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Biodiversity",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Primary Forest And Wooded Land Of Native Species Exposure",
            explanation:
              "Sites/operations (partly) located in or near to primary forest and other wooded areas where activities of those sites/operations negatively affect those areas? See also Regulation, Annex I, table 1, indicator nr. 7).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.primaryForestAndWoodedLandOfNativeSpeciesExposure?.value,
                ),
                "Primary Forest And Wooded Land Of Native Species Exposure",
                dataset.environmental?.biodiversity?.primaryForestAndWoodedLandOfNativeSpeciesExposure,
              ),
          },
          {
            type: "cell",
            label: "Protected Areas Exposure",
            explanation:
              "Sites/operations (partly) located in or near protected areas where activities of those sites/operations negatively affect those areas? See also Regulation, Annex I, table 1, indicator nr. 7).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.protectedAreasExposure?.value,
                ),
                "Protected Areas Exposure",
                dataset.environmental?.biodiversity?.protectedAreasExposure,
              ),
          },
          {
            type: "cell",
            label: "Rare Or Endangered Ecosystems Exposure",
            explanation:
              "Sites/operations in or near areas designated for the protection of species (including flora and fauna) and where the activities of those sites/operations lead to the deterioration of natural habitats and the habitats of those species and disturb the species for which the protected area has been designated? See also Regulation, Annex I, table 1, indicator nr. 7 and Annex I, definition 18(a).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.rareOrEndangeredEcosystemsExposure?.value,
                ),
                "Rare Or Endangered Ecosystems Exposure",
                dataset.environmental?.biodiversity?.rareOrEndangeredEcosystemsExposure,
              ),
          },
          {
            type: "cell",
            label: "Highly Biodiverse Grassland Exposure",
            explanation:
              "Sites/operations (partly) located in highly biodiverse grassland that is: (i) natural, namely, grassland that would remain grassland in the absence of human intervention and which maintains the natural species composition and ecological characteristics and processes; or (ii) non-natural, namely, grassland that would cease to be grassland in the absence of human intervention and which is species-rich and not degraded, unless evidence is provided that the harvesting of the raw material is necessary to preserve its grassland status?",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.highlyBiodiverseGrasslandExposure?.value,
                ),
                "Highly Biodiverse Grassland Exposure",
                dataset.environmental?.biodiversity?.highlyBiodiverseGrasslandExposure,
              ),
          },
          {
            type: "cell",
            label: "Manufacture Of Agrochemical Pesticides Products",
            explanation: "Involvement in manufacture of pesticides and other agrochemical products",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.manufactureOfAgrochemicalPesticidesProducts?.value,
                ),
                "Manufacture Of Agrochemical Pesticides Products",
                dataset.environmental?.biodiversity?.manufactureOfAgrochemicalPesticidesProducts,
              ),
          },
          {
            type: "cell",
            label: "Land Degradation Desertification Soil Sealing Exposure",
            explanation: "Involvement in activities, which cause land degradation, desertification or soil sealing",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.landDegradationDesertificationSoilSealingExposure?.value,
                ),
                "Land Degradation Desertification Soil Sealing Exposure",
                dataset.environmental?.biodiversity?.landDegradationDesertificationSoilSealingExposure,
              ),
          },
          {
            type: "cell",
            label: "Sustainable Agriculture Policy",
            explanation: "Sustainable land/agriculture practices or policies",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.sustainableAgriculturePolicy?.value,
                ),
                "Sustainable Agriculture Policy",
                dataset.environmental?.biodiversity?.sustainableAgriculturePolicy,
              ),
          },
          {
            type: "cell",
            label: "Sustainable Oceans And Seas Policy",
            explanation: "Sustainable oceans/seas practices or policies",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.sustainableOceansAndSeasPolicy?.value,
                ),
                "Sustainable Oceans And Seas Policy",
                dataset.environmental?.biodiversity?.sustainableOceansAndSeasPolicy,
              ),
          },
          {
            type: "cell",
            label: "Threatened Species Exposure",
            explanation: "Operations, which affect threatened species",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.threatenedSpeciesExposure?.value,
                ),
                "Threatened Species Exposure",
                dataset.environmental?.biodiversity?.threatenedSpeciesExposure,
              ),
          },
          {
            type: "cell",
            label: "Biodiversity Protection Policy",
            explanation:
              "Existence of a biodiversity protection policy that encompasses operational sites owned, leased, managed in, or adjacent to, a protected area or an area of high biodiversity value outside protected areas",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.biodiversityProtectionPolicy?.value,
                ),
                "Biodiversity Protection Policy",
                dataset.environmental?.biodiversity?.biodiversityProtectionPolicy,
              ),
          },
          {
            type: "cell",
            label: "Deforestation Policy",
            explanation:
              'Existence of a policy to address deforestation. "Deforestation" means the human-induced conversion of forested land to non-forested land, which can be permanent, when this change is definitive, or temporary when this change is part of a cycle that includes natural or assisted regeneration, according to the Intergovernmental Science-Policy Platform on Biodiversity and Ecosystem Services (IPBES) as referred to in paragraph 100 of Decision No 1386/2013/EU of the European Parliament and of the Council.',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.biodiversity?.deforestationPolicy?.value,
                ),
                "Deforestation Policy",
                dataset.environmental?.biodiversity?.deforestationPolicy,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Water",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Emissions To Water",
            explanation:
              "Emissions to water (direct nitrates, direct phosphate emissions, direct pesticides) to water (tonnes)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.environmental?.water?.emissionsToWaterInTonnes?.value, "Tonnes"),
                "Emissions To Water",
                dataset.environmental?.water?.emissionsToWaterInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Water Consumption",
            explanation: "Amount of water consumed by the company",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.water?.waterConsumptionInCubicMeters?.value,
                  "Cubic Meters",
                ),
                "Water Consumption",
                dataset.environmental?.water?.waterConsumptionInCubicMeters,
              ),
          },
          {
            type: "cell",
            label: "Water Reused",
            explanation:
              "Amount of water recycled and reused by the company. Linked to Regulation, Annex I, Table 2, metric 6.2.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.environmental?.water?.waterReusedInCubicMeters?.value, "Cubic Meters"),
                "Water Reused",
                dataset.environmental?.water?.waterReusedInCubicMeters,
              ),
          },
          {
            type: "cell",
            label: "Relative Water Usage",
            explanation: "Average amount in cubic meters of fresh water used per million EUR revenue",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.water?.relativeWaterUsageInCubicMetersPerMillionEURRevenue?.value,
                  "Cubic Meters / \u20ACM Revenue",
                ),
                "Relative Water Usage",
                dataset.environmental?.water?.relativeWaterUsageInCubicMetersPerMillionEURRevenue,
              ),
          },
          {
            type: "cell",
            label: "Water Management Policy",
            explanation: "Existence of policies and procedures for water management",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(dataset.environmental?.water?.waterManagementPolicy?.value),
                "Water Management Policy",
                dataset.environmental?.water?.waterManagementPolicy,
              ),
          },
          {
            type: "cell",
            label: "High Water Stress Area Exposure",
            explanation:
              'Sites (partly) located in "areas of high water stress", i.e. regions where the percentage of total water withdrawn is high (60%) or extremely high (80%), without a water management policy',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.water?.highWaterStressAreaExposure?.value,
                ),
                "High Water Stress Area Exposure",
                dataset.environmental?.water?.highWaterStressAreaExposure,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Waste",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Hazardous and Radioactive Waste",
            explanation:
              "Tonnes of hazardous waste and radioactive waste generated, which are Explosives, Oxidizing substances, Highly flammable, Flammable, Harmful, Toxic, Carcinogenic, Corrosive, Infectious, Toxic for reproduction, Mutagenic, waste which releases toxic or very toxic gases in contact with water, air or an acid, Sensitizing, Ecotoxic, waste capable by any means after disposal of yielding substance which possesses any of the characteristics listed above (tonnes)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.waste?.hazardousAndRadioactiveWasteInTonnes?.value,
                  "Tonnes",
                ),
                "Hazardous and Radioactive Waste",
                dataset.environmental?.waste?.hazardousAndRadioactiveWasteInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Non-Recycled Waste",
            explanation:
              'Value of non-recycled waste generated. "Non-recycled waste" means any waste not recycled within the meaning of ‘recycling’ in Article 3(17) of Directive 2008/98/EC.',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.environmental?.waste?.nonRecycledWasteInTonnes?.value, "Tonnes"),
                "Non-Recycled Waste",
                dataset.environmental?.waste?.nonRecycledWasteInTonnes,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Emissions",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Emissions of Inorganic Pollutants",
            explanation:
              "Inorganic pollutants such as those arising due to radiant energy and noise, heat, or light, including arsenic, cadmium, lead, mercury, chromium, aluminium, nitrates, nitrites, and fluorides or contaminants of water such as arsenic, fluoride, iron, nitrate, heavy metals, etc.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.emissions?.emissionsOfInorganicPollutantsInTonnes?.value,
                  "Tonnes",
                ),
                "Emissions of Inorganic Pollutants",
                dataset.environmental?.emissions?.emissionsOfInorganicPollutantsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Emissions of Air Pollutants",
            explanation:
              "Air pollutants (Direct Sulphur dioxides (Sox/SO2) emissions, direct nitrogen oxides (NOx/NO2) emissions, direct ammonia (NH3) emissions, direct particulate matter (PM2.5) emissions, direct non-methane volatile organic compounds (NMVOC) emissions, direct total heavy metals (HM) emissions (encompassing cadmium, mercury and lead)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.emissions?.emissionsOfAirPollutantsInTonnes?.value,
                  "Tonnes",
                ),
                "Emissions of Air Pollutants",
                dataset.environmental?.emissions?.emissionsOfAirPollutantsInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Emissions of Ozone Depletion Substances",
            explanation:
              "Tonnes of ozone depletion substances, chemicals that destroy the earth's protective ozone layer. They include: chlorofluorocarbons (CFCs), halons, carbon tetrachloride (CCl4), methyl chloroform (CH3CCl3), hydrobromofluorocarbons (HBFCs), hydrochlorofluorocarbons (HCFCs), methyl bromide (CH3Br), bromochloromethane (CH2BrCl)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.emissions?.emissionsOfOzoneDepletionSubstancesInTonnes?.value,
                  "Tonnes",
                ),
                "Emissions of Ozone Depletion Substances",
                dataset.environmental?.emissions?.emissionsOfOzoneDepletionSubstancesInTonnes,
              ),
          },
          {
            type: "cell",
            label: "Carbon Reduction Initiatives",
            explanation:
              "Existence of policies or procedures for carbon emission reduction aimed at aligning with the Paris Agreement",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.environmental?.emissions?.carbonReductionInitiatives?.value,
                ),
                "Carbon Reduction Initiatives",
                dataset.environmental?.emissions?.carbonReductionInitiatives,
              ),
          },
        ],
      },
    ],
    labelBadgeColor: "green",
  },
  {
    type: "section",
    label: "Social",
    expandOnPageLoad: true,
    shouldDisplay: (): boolean => true,
    children: [
      {
        type: "section",
        label: "Social and employee matters",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Human Rights Legal Proceedings",
            explanation: "Involvement in Human Rights related legal proceedings",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.humanRightsLegalProceedings?.value,
                ),
                "Human Rights Legal Proceedings",
                dataset.social?.socialAndEmployeeMatters?.humanRightsLegalProceedings,
              ),
          },
          {
            type: "cell",
            label: "ILO Core Labour Standards",
            explanation: "Abidance by the ILO Core Labour Standards",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.iloCoreLabourStandards?.value,
                ),
                "ILO Core Labour Standards",
                dataset.social?.socialAndEmployeeMatters?.iloCoreLabourStandards,
              ),
          },
          {
            type: "cell",
            label: "Environmental Policy",
            explanation: "Existence of an environmental policy",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.environmentalPolicy?.value,
                ),
                "Environmental Policy",
                dataset.social?.socialAndEmployeeMatters?.environmentalPolicy,
              ),
          },
          {
            type: "cell",
            label: "Corruption Legal Proceedings",
            explanation: "Involvement in corruption-related legal proceedings",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.corruptionLegalProceedings?.value,
                ),
                "Corruption Legal Proceedings",
                dataset.social?.socialAndEmployeeMatters?.corruptionLegalProceedings,
              ),
          },
          {
            type: "cell",
            label: "Transparency Disclosure Policy",
            explanation:
              "Existence of a transparency policy. According to the OECD Guidelines for Multinational Enterprises, multinational companies should inform the public not only about their financial performance, but also about all of the important aspects of their business activities, such as how they are meeting social and environmental standards and what risks they foresee linked to their business activities.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.transparencyDisclosurePolicy?.value,
                ),
                "Transparency Disclosure Policy",
                dataset.social?.socialAndEmployeeMatters?.transparencyDisclosurePolicy,
              ),
          },
          {
            type: "cell",
            label: "Human Rights Due Diligence Policy",
            explanation:
              "Policies in place to support/respect human rights and conduct due diligence to ensure that business activities do not have a negative human rights impact.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.humanRightsDueDiligencePolicy?.value,
                ),
                "Human Rights Due Diligence Policy",
                dataset.social?.socialAndEmployeeMatters?.humanRightsDueDiligencePolicy,
              ),
          },
          {
            type: "cell",
            label: "Policy against Child Labour",
            explanation: "Policies in place to abolish all forms of child labour.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.policyAgainstChildLabour?.value,
                ),
                "Policy against Child Labour",
                dataset.social?.socialAndEmployeeMatters?.policyAgainstChildLabour,
              ),
          },
          {
            type: "cell",
            label: "Policy against Forced Labour",
            explanation: "Policies in place to abolish all forms of forced labour.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.policyAgainstForcedLabour?.value,
                ),
                "Policy against Forced Labour",
                dataset.social?.socialAndEmployeeMatters?.policyAgainstForcedLabour,
              ),
          },
          {
            type: "cell",
            label: "Policy against Discrimination in the Workplace",
            explanation: "Policies in place to eliminate discrimination in the workplace.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.policyAgainstDiscriminationInTheWorkplace?.value,
                ),
                "Policy against Discrimination in the Workplace",
                dataset.social?.socialAndEmployeeMatters?.policyAgainstDiscriminationInTheWorkplace,
              ),
          },
          {
            type: "cell",
            label: "ISO 14001 Certificate",
            explanation: "The company is ISO 14001 certified",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.iso14001Certificate?.value,
                ),
                "ISO 14001 Certificate",
                dataset.social?.socialAndEmployeeMatters?.iso14001Certificate,
              ),
          },
          {
            type: "cell",
            label: "Policy against Bribery and Corruption",
            explanation:
              "Existence of a policy on anti-corruption and anti-bribery consistent with the United Nations Convention against Corruption.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.policyAgainstBriberyAndCorruption?.value,
                ),
                "Policy against Bribery and Corruption",
                dataset.social?.socialAndEmployeeMatters?.policyAgainstBriberyAndCorruption,
              ),
          },
          {
            type: "cell",
            label: "Fair Business Marketing Advertising Policy",
            explanation:
              "Policies and procedures in place to apply fair business, marketing, and advertising practices and ensure the safety and quality of goods and services.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.fairBusinessMarketingAdvertisingPolicy?.value,
                ),
                "Fair Business Marketing Advertising Policy",
                dataset.social?.socialAndEmployeeMatters?.fairBusinessMarketingAdvertisingPolicy,
              ),
          },
          {
            type: "cell",
            label: "Technologies Expertise Transfer Policy",
            explanation:
              "Policies and procedures in place to permit the transfer and rapid dissemination of technologies and expertise",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.technologiesExpertiseTransferPolicy?.value,
                ),
                "Technologies Expertise Transfer Policy",
                dataset.social?.socialAndEmployeeMatters?.technologiesExpertiseTransferPolicy,
              ),
          },
          {
            type: "cell",
            label: "Fair Competition Policy",
            explanation: "Policies and procedures in place related to fair competition and anti-competitive cartels",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.fairCompetitionPolicy?.value,
                ),
                "Fair Competition Policy",
                dataset.social?.socialAndEmployeeMatters?.fairCompetitionPolicy,
              ),
          },
          {
            type: "cell",
            label: "Violation Of Tax Rules And Regulation",
            explanation:
              "Involvement in a violation of OECD Guidelines for Multinational Enterprises for Taxation: In the field of taxation, multinational enterprises should make their contribution to public finances within the framework of applicable law and regulations, in accordance with the tax rules and regulations of the host countries, and should cooperate with the tax authorities.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.violationOfTaxRulesAndRegulation?.value,
                ),
                "Violation Of Tax Rules And Regulation",
                dataset.social?.socialAndEmployeeMatters?.violationOfTaxRulesAndRegulation,
              ),
          },
          {
            type: "cell",
            label: "UN Global Compact Principles Compliance Policy",
            explanation:
              "Existence of a policy to monitor compliance with the UNGC principles or OECD Guidelines for Multinational Enterprises",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.unGlobalCompactPrinciplesCompliancePolicy?.value,
                ),
                "UN Global Compact Principles Compliance Policy",
                dataset.social?.socialAndEmployeeMatters?.unGlobalCompactPrinciplesCompliancePolicy,
              ),
          },
          {
            type: "cell",
            label: "OECD Guidelines For Multinational Enterprises Grievance Handling",
            explanation:
              "Existence of grievance/complaints handling mechanisms to address violations of the UNGC principles or OECD Guidelines for Multinational Enterprises",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.oecdGuidelinesForMultinationalEnterprisesGrievanceHandling
                    ?.value,
                ),
                "OECD Guidelines For Multinational Enterprises Grievance Handling",
                dataset.social?.socialAndEmployeeMatters?.oecdGuidelinesForMultinationalEnterprisesGrievanceHandling,
              ),
          },
          {
            type: "cell",
            label: "Average Gross Hourly Earnings Male Employees",
            explanation: "Average gross hourly earnings of male employees",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatCurrencyForDisplay(
                dataset.social?.socialAndEmployeeMatters?.averageGrossHourlyEarningsMaleEmployees,
                "Average Gross Hourly Earnings Male Employees",
              ),
          },
          {
            type: "cell",
            label: "Average Gross Hourly Earnings Female Employees",
            explanation: "Average gross hourly earnings of female employees",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatCurrencyForDisplay(
                dataset.social?.socialAndEmployeeMatters?.averageGrossHourlyEarningsFemaleEmployees,
                "Average Gross Hourly Earnings Female Employees",
              ),
          },
          {
            type: "cell",
            label: "Unadjusted gender pay gap",
            explanation: "Average unadjusted gender pay gap (female to male ratio, only considering gender)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.unadjustedGenderPayGapInPercent?.value,
                  "Percent",
                ),
                "Unadjusted gender pay gap",
                dataset.social?.socialAndEmployeeMatters?.unadjustedGenderPayGapInPercent,
              ),
          },
          {
            type: "cell",
            label: "Female Board Members",
            explanation:
              "Number of females on the board, i.e. means the administrative, management or supervisory body of a company",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.social?.socialAndEmployeeMatters?.femaleBoardMembers?.value, ""),
                "Female Board Members",
                dataset.social?.socialAndEmployeeMatters?.femaleBoardMembers,
              ),
          },
          {
            type: "cell",
            label: "Male Board Members",
            explanation:
              "Number of males on the board, i.e. means the administrative, management or supervisory body of a company.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.social?.socialAndEmployeeMatters?.maleBoardMembers?.value, ""),
                "Male Board Members",
                dataset.social?.socialAndEmployeeMatters?.maleBoardMembers,
              ),
          },
          {
            type: "cell",
            label: "Board gender diversity",
            explanation: "Percentage of female board members among all board members",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.boardGenderDiversityInPercent?.value,
                  "Percent",
                ),
                "Board gender diversity",
                dataset.social?.socialAndEmployeeMatters?.boardGenderDiversityInPercent,
              ),
          },
          {
            type: "cell",
            label: "Controversial Weapons Exposure",
            explanation:
              "Involvement in the manufacture or selling of controversial weapons such as anti- personnel mines, cluster munitions, chemical weapons and biological weapons.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.controversialWeaponsExposure?.value,
                ),
                "Controversial Weapons Exposure",
                dataset.social?.socialAndEmployeeMatters?.controversialWeaponsExposure,
              ),
          },
          {
            type: "cell",
            label: "Workplace Accident Prevention Policy",
            explanation: "Existence of a workplace accident prevention policy",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.workplaceAccidentPreventionPolicy?.value,
                ),
                "Workplace Accident Prevention Policy",
                dataset.social?.socialAndEmployeeMatters?.workplaceAccidentPreventionPolicy,
              ),
          },
          {
            type: "cell",
            label: "Rate Of Accidents",
            explanation:
              "Rate of recordable work-related injuries as defined in GRI, i.e. (Number of recordable work-related injuries) /  (number of hours worked ) x 200,000",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.rateOfAccidentsInPercent?.value,
                  "Percent",
                ),
                "Rate Of Accidents",
                dataset.social?.socialAndEmployeeMatters?.rateOfAccidentsInPercent,
              ),
          },
          {
            type: "cell",
            label: "Workdays Lost",
            explanation: "Number of workdays lost to injuries, accidents, fatalities or illness",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.social?.socialAndEmployeeMatters?.workdaysLostInDays?.value, "Days"),
                "Workdays Lost",
                dataset.social?.socialAndEmployeeMatters?.workdaysLostInDays,
              ),
          },
          {
            type: "cell",
            label: "Supplier Code Of Conduct",
            explanation:
              "Supplier code of conduct addressing unsafe working conditions, precarious work, child labor, and forced labor.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.supplierCodeOfConduct?.value,
                ),
                "Supplier Code Of Conduct",
                dataset.social?.socialAndEmployeeMatters?.supplierCodeOfConduct,
              ),
          },
          {
            type: "cell",
            label: "Grievance Handling Mechanism",
            explanation: "Existence of a grievance/complaints handling mechanism related to employee matters",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.grievanceHandlingMechanism?.value,
                ),
                "Grievance Handling Mechanism",
                dataset.social?.socialAndEmployeeMatters?.grievanceHandlingMechanism,
              ),
          },
          {
            type: "cell",
            label: "Whistleblower Protection Policy",
            explanation: "Existence of a policy on the protection of whistleblowers",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.whistleblowerProtectionPolicy?.value,
                ),
                "Whistleblower Protection Policy",
                dataset.social?.socialAndEmployeeMatters?.whistleblowerProtectionPolicy,
              ),
          },
          {
            type: "cell",
            label: "Reported Incidents Of Discrimination",
            explanation: "Number of reported discrimination-related incidents",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.reportedIncidentsOfDiscrimination?.value,
                  "",
                ),
                "Reported Incidents Of Discrimination",
                dataset.social?.socialAndEmployeeMatters?.reportedIncidentsOfDiscrimination,
              ),
          },
          {
            type: "cell",
            label: "Sanctioned Incidents Of Discrimination",
            explanation:
              "Number of discrimination related incidents reported that lead to any kind of penalty and/or fine",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.sanctionedIncidentsOfDiscrimination?.value,
                  "",
                ),
                "Sanctioned Incidents Of Discrimination",
                dataset.social?.socialAndEmployeeMatters?.sanctionedIncidentsOfDiscrimination,
              ),
          },
          {
            type: "cell",
            label: "CEO to Employee Pay Gap Ratio",
            explanation:
              "Annual total compensation for the highest compensated individual divided by the median annual total compensation for all employees (excluding the highest-compensated individual).",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.social?.socialAndEmployeeMatters?.ceoToEmployeePayGapRatio?.value, ""),
                "CEO to Employee Pay Gap Ratio",
                dataset.social?.socialAndEmployeeMatters?.ceoToEmployeePayGapRatio,
              ),
          },
          {
            type: "cell",
            label: "Excessive CEO pay ratio",
            explanation:
              "Average ratio of the annual total compensation for the highest compensated individual to the median annual total compensation for all employees (excluding the highest-compensated individual)",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.socialAndEmployeeMatters?.excessiveCeoPayRatioInPercent?.value,
                  "Percent",
                ),
                "Excessive CEO pay ratio",
                dataset.social?.socialAndEmployeeMatters?.excessiveCeoPayRatioInPercent,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Green securities",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Securities Not Certified As Green",
            explanation:
              "Possession of securities in investments that are not certified as green under a future EU legal act establishing an EU Green Bond Standard",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.greenSecurities?.securitiesNotCertifiedAsGreen?.value,
                ),
                "Securities Not Certified As Green",
                dataset.social?.greenSecurities?.securitiesNotCertifiedAsGreen,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Human rights",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Human Rights Policy",
            explanation: "Existence of a human rights policy",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(dataset.social?.humanRights?.humanRightsPolicy?.value),
                "Human Rights Policy",
                dataset.social?.humanRights?.humanRightsPolicy,
              ),
          },
          {
            type: "cell",
            label: "Human Rights Due Diligence",
            explanation:
              "Existence of due diligence processes to identify, prevent, mitigate and address adverse human rights impacts",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.humanRights?.humanRightsDueDiligence?.value,
                ),
                "Human Rights Due Diligence",
                dataset.social?.humanRights?.humanRightsDueDiligence,
              ),
          },
          {
            type: "cell",
            label: "Trafficking In Human Beings Policy",
            explanation: "Existence of a policy against trafficking in human beings",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.humanRights?.traffickingInHumanBeingsPolicy?.value,
                ),
                "Trafficking In Human Beings Policy",
                dataset.social?.humanRights?.traffickingInHumanBeingsPolicy,
              ),
          },
          {
            type: "cell",
            label: "Reported Child Labour Incidents",
            explanation: "Reported incidents of child labor within own operations or supply chain",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.humanRights?.reportedChildLabourIncidents?.value,
                ),
                "Reported Child Labour Incidents",
                dataset.social?.humanRights?.reportedChildLabourIncidents,
              ),
          },
          {
            type: "cell",
            label: "Reported Forced Or Compulsory Labour Incidents",
            explanation: "Reported incidents of forced or compulsory labor within own operations or supply chain.",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatYesNoNoEvidenceFoundValueForDatatable(
                  dataset.social?.humanRights?.reportedForcedOrCompulsoryLabourIncidents?.value,
                ),
                "Reported Forced Or Compulsory Labour Incidents",
                dataset.social?.humanRights?.reportedForcedOrCompulsoryLabourIncidents,
              ),
          },
          {
            type: "cell",
            label: "Number Of Reported Incidents Of Human Rights Violations",
            explanation: "Number of cases of severe human rights issues and incidents connected to the company",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.humanRights?.numberOfReportedIncidentsOfHumanRightsViolations?.value,
                  "",
                ),
                "Number Of Reported Incidents Of Human Rights Violations",
                dataset.social?.humanRights?.numberOfReportedIncidentsOfHumanRightsViolations,
              ),
          },
        ],
      },
      {
        type: "section",
        label: "Anti-corruption and anti-bribery",
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: "cell",
            label: "Cases of Insufficient Action against Bribery and Corruption",
            explanation:
              "Identified insufficiencies in actions taken to address breaches in procedures and standards of anti-corruption and anti-bribery",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.antiCorruptionAndAntiBribery?.casesOfInsufficientActionAgainstBriberyAndCorruption
                    ?.value,
                  "",
                ),
                "Cases of Insufficient Action against Bribery and Corruption",
                dataset.social?.antiCorruptionAndAntiBribery?.casesOfInsufficientActionAgainstBriberyAndCorruption,
              ),
          },
          {
            type: "cell",
            label: "Reported Convictions Of Bribery and Corruption",
            explanation: "Number of reported convictions for violations of anti-corruption and anti-bribery laws",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.social?.antiCorruptionAndAntiBribery?.reportedConvictionsOfBriberyAndCorruption?.value,
                  "",
                ),
                "Reported Convictions Of Bribery and Corruption",
                dataset.social?.antiCorruptionAndAntiBribery?.reportedConvictionsOfBriberyAndCorruption,
              ),
          },
          {
            type: "cell",
            label: "Total Amount Of Reported Fines Of Bribery and Corruption",
            explanation: "Amount of fines for violations of anti-corruption and anti-bribery laws",
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: SfdrData): AvailableMLDTDisplayObjectTypes =>
              formatCurrencyForDisplay(
                dataset.social?.antiCorruptionAndAntiBribery?.totalAmountOfReportedFinesOfBriberyAndCorruption,
                "Total Amount Of Reported Fines Of Bribery and Corruption",
              ),
          },
        ],
      },
    ],
    labelBadgeColor: "yellow",
  },
];
