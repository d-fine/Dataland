// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { type AxiosPromise, type AxiosRequestConfig, type AxiosInstance } from "axios";
import { type CompanyAssociatedData } from "@/api-models/CompanyAssociatedData";
import { type Configuration, type DataMetaInformation, type SmeData, SmeDataControllerApi } from "@clients/backend";
import { type PrivateFrameworkDataApi } from "@/utils/api/UnifiedFrameworkDataApi";
import { type DataAndMetaInformation } from "@/api-models/DataAndMetaInformation";

export class SmeApiClient implements PrivateFrameworkDataApi<SmeData> {
  private readonly openApiDataController: SmeDataControllerApi;

  constructor(configuration: Configuration | undefined, axiosInstance: AxiosInstance | undefined) {
    this.openApiDataController = new SmeDataControllerApi(configuration, undefined, axiosInstance);
  }

  getAllCompanyData(
    companyId: string,
    showOnlyActive?: boolean,
    reportingPeriod?: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<DataAndMetaInformation<SmeData>[]> {
    console.log("+-+-+-+-getAllCompanyData being called in ApiClients.ts"); // TODO  does not work yet in the Frontend
    return this.openApiDataController.getFrameworkDatasetsForCompany(
      companyId,
      showOnlyActive,
      reportingPeriod,
      options,
    );
  }

  getFrameworkData(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedData<SmeData>> {
    return this.openApiDataController.getCompanyAssociatedSmeData(dataId, options);
  }

  getPrivateDocument(dataId: string, hash: string, options?: AxiosRequestConfig): AxiosPromise<File> {
    return this.openApiDataController.getPrivateDocument(dataId, hash, options);
  }

  postFrameworkData(
    companyAssociatedSmeData: CompanyAssociatedData<SmeData>,
    documents: Array<File>,
    options?: AxiosRequestConfig,
  ): AxiosPromise<DataMetaInformation> {
    return this.openApiDataController.postSmeJsonAndDocuments(companyAssociatedSmeData, documents, options);
  }
}
