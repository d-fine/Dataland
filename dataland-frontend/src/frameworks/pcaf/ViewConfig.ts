// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { type PcafData } from '@clients/backend';
import { type MLDTConfig } from '@/components/resources/dataTable/MultiLayerDataTableConfiguration';
import { type AvailableMLDTDisplayObjectTypes } from '@/components/resources/dataTable/MultiLayerDataTableCellDisplayer';
import { formatNumberForDatatable } from '@/components/resources/dataTable/conversion/NumberValueGetterFactory';
import { wrapDisplayValueWithDatapointInformation } from '@/components/resources/dataTable/conversion/DataPoints';
import { formatStringForDatatable } from '@/components/resources/dataTable/conversion/PlainStringValueGetterFactory';
import { getOriginalNameFromTechnicalName } from '@/components/resources/dataTable/conversion/Utils';
export const pcafViewConfiguration: MLDTConfig<PcafData> = [
  {
    type: 'section',
    label: 'General',
    expandOnPageLoad: true,
    shouldDisplay: (): boolean => true,
    children: [
      {
        type: 'section',
        label: 'General',
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: 'cell',
            label: 'Fiscal Year Deviation',
            explanation: 'Does the fiscal year deviate from the calendar year?',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              ((): AvailableMLDTDisplayObjectTypes => {
                const mappings = {
                  Deviation: 'Deviation',
                  NoDeviation: 'No Deviation',
                };
                return formatStringForDatatable(
                  dataset.general?.general?.fiscalYearDeviation
                    ? getOriginalNameFromTechnicalName(dataset.general?.general?.fiscalYearDeviation, mappings)
                    : ''
                );
              })(),
          },
          {
            type: 'cell',
            label: 'Fiscal Year End',
            explanation: 'The date the fiscal year ends.',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              formatStringForDatatable(dataset.general?.general?.fiscalYearEnd),
          },
        ],
      },
      {
        type: 'section',
        label: 'Company',
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: 'cell',
            label: 'Main PCAF sector',
            explanation:
              'One of the following sectors the company is mainly operating in: "Communication Services"; "Consumer Discretionary"; "Consumer Staples"; "Energy"; "Financials"; "Health Care"; "Industrials"; "Industry"; "Information Technology"; "Machinery"; "Materials"; "Real estate"; "Sovereign"; "Utilities"',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                ((): AvailableMLDTDisplayObjectTypes => {
                  const mappings = {
                    CommunicationServices: 'Communication Services',
                    ConsumerDiscretionary: 'Consumer Discretionary',
                    ConsumerStaples: 'Consumer Staples',
                    Energy: 'Energy',
                    Financials: 'Financials',
                    HealthCare: 'Health Care',
                    Industrials: 'Industrials',
                    Industry: 'Industry',
                    InformationTechnology: 'Information Technology',
                    Machinery: 'Machinery',
                    Materials: 'Materials',
                    RealEstate: 'Real estate',
                    Sovereign: 'Sovereign',
                  };
                  return formatStringForDatatable(
                    dataset.general?.company?.mainPcafSector?.value
                      ? getOriginalNameFromTechnicalName(dataset.general?.company?.mainPcafSector?.value, mappings)
                      : ''
                  );
                })(),
                'Main PCAF sector',
                dataset.general?.company?.mainPcafSector
              ),
          },
          {
            type: 'cell',
            label: 'Company exchange status',
            explanation: '"Listed" if the company is listed on an exchange - otherwise "Unlisted"',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                ((): AvailableMLDTDisplayObjectTypes => {
                  const mappings = {
                    Listed: 'Listed',
                    Unlisted: 'Unlisted',
                  };
                  return formatStringForDatatable(
                    dataset.general?.company?.companyExchangeStatus?.value
                      ? getOriginalNameFromTechnicalName(
                          dataset.general?.company?.companyExchangeStatus?.value,
                          mappings
                        )
                      : ''
                  );
                })(),
                'Company exchange status',
                dataset.general?.company?.companyExchangeStatus
              ),
          },
        ],
      },
    ],
    labelBadgeColor: 'orange',
  },
  {
    type: 'section',
    label: 'Company Value',
    expandOnPageLoad: true,
    shouldDisplay: (): boolean => true,
    children: [
      {
        type: 'section',
        label: 'Listed company',
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: 'cell',
            label: 'Market capitalization',
            explanation: 'Market capitalization in EUR calculated as: number of shares * price per share',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.companyValue?.listedCompany?.marketCapitalizationInEUR?.value, 'EUR'),
                'Market capitalization',
                dataset.companyValue?.listedCompany?.marketCapitalizationInEUR
              ),
          },
          {
            type: 'cell',
            label: 'Book value of debt',
            explanation:
              'Book value of debt in EUR = all debt as listed on the company balance sheet (not to be mixed up with other definitions)',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.companyValue?.listedCompany?.bookValueOfDebtInEUR?.value, 'EUR'),
                'Book value of debt',
                dataset.companyValue?.listedCompany?.bookValueOfDebtInEUR
              ),
          },
          {
            type: 'cell',
            label: 'Minorities interest',
            explanation:
              'Minorities interest in EUR as potentially listed on the balance sheet for ownerships without control (typically for ownerships of less than 50%)',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.companyValue?.listedCompany?.minoritiesInterestInEUR?.value, 'EUR'),
                'Minorities interest',
                dataset.companyValue?.listedCompany?.minoritiesInterestInEUR
              ),
          },
        ],
      },
      {
        type: 'section',
        label: 'Unlisted company',
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: 'cell',
            label: 'Total equity and debt',
            explanation: 'Sum of total equity and total debt in EUR as listed on the balance sheet',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(dataset.companyValue?.unlistedCompany?.totalEquityAndDebtInEUR?.value, 'EUR'),
                'Total equity and debt',
                dataset.companyValue?.unlistedCompany?.totalEquityAndDebtInEUR
              ),
          },
        ],
      },
    ],
    labelBadgeColor: 'yellow',
  },
  {
    type: 'section',
    label: 'Environmental',
    expandOnPageLoad: true,
    shouldDisplay: (): boolean => true,
    children: [
      {
        type: 'section',
        label: 'Greenhouse gas emissions',
        expandOnPageLoad: true,
        shouldDisplay: (): boolean => true,
        children: [
          {
            type: 'cell',
            label: 'Scope 1 GHG emissions',
            explanation:
              'Scope 1 greenhouse gas emissions in tonnes, namely emissions generated from sources that are controlled by the company that issues the underlying assets (equity share approach preferably used).',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope1GhgEmissionsInTonnes?.value,
                  'Tonnes'
                ),
                'Scope 1 GHG emissions',
                dataset.environmental?.greenhouseGasEmissions?.scope1GhgEmissionsInTonnes
              ),
          },
          {
            type: 'cell',
            label: 'Scope 2 GHG emissions (location-based)',
            explanation:
              'Scope 2 greenhouse gas emissions in tonnes from the consumption of purchased electricity, steam, or other sources of energy computed using the location-based method (equity share approach preferably used).',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsLocationBasedInTonnes?.value,
                  'Tonnes'
                ),
                'Scope 2 GHG emissions (location-based)',
                dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsLocationBasedInTonnes
              ),
          },
          {
            type: 'cell',
            label: 'Scope 2 GHG emissions (market-based)',
            explanation:
              'Scope 2 greenhouse gas emissions in tonnes from the consumption of purchased electricity, steam, or other sources of energy computed using the market-based method (equity share approach preferably used).',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsMarketBasedInTonnes?.value,
                  'Tonnes'
                ),
                'Scope 2 GHG emissions (market-based)',
                dataset.environmental?.greenhouseGasEmissions?.scope2GhgEmissionsMarketBasedInTonnes
              ),
          },
          {
            type: 'cell',
            label: 'Scope 3 GHG emissions',
            explanation:
              'Scope 3 greenhouse gas emissions in tonnes, i.e. all indirect upstream and downstream emissions that are not included in scope 2 (equity share approach preferably used).',
            shouldDisplay: (): boolean => true,
            valueGetter: (dataset: PcafData): AvailableMLDTDisplayObjectTypes =>
              wrapDisplayValueWithDatapointInformation(
                formatNumberForDatatable(
                  dataset.environmental?.greenhouseGasEmissions?.scope3GhgEmissionsInTonnes?.value,
                  'Tonnes'
                ),
                'Scope 3 GHG emissions',
                dataset.environmental?.greenhouseGasEmissions?.scope3GhgEmissionsInTonnes
              ),
          },
        ],
      },
    ],
    labelBadgeColor: 'green',
  },
];
