{"version":3,"file":"NewMissionPage-1529eced.js","sources":["../../src/components/pages/NewMissionPage.vue"],"sourcesContent":["<template>\n  <TheHeader :landingPage=\"landingPage\" :contentData=\"content\" />\n  <main role=\"main\">test mission page</main>\n  <TheFooter :sections=\"landingPage?.sections\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, watch, inject } from \"vue\";\nimport { useRoute, useRouter, type NavigationFailure } from \"vue-router\";\nimport { useDialog } from \"primevue/usedialog\";\nimport SessionDialog from \"@/components/general/SessionDialog.vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { useSharedSessionStateStore } from \"@/stores/Stores\";\nimport { SessionDialogMode } from \"@/utils/SessionTimeoutUtils\";\n\nimport TheHeader from \"@/components/layout/TheHeader.vue\";\n\nimport TheFooter from \"@/components/layout/TheFooter.vue\";\n\n// Import the JSON content and types\nimport contentData from \"@/assets/content.json\";\nimport type { Content, Page } from \"@/types/ContentTypes\";\n\nconst content: Content = contentData;\nconst landingPage: Page | undefined = content.pages.find((page) => page.url === \"/lp\");\n\nconst dialog = useDialog();\nconst injectedAuthenticated = inject<boolean>(\"authenticated\");\nconst authenticated = ref(injectedAuthenticated);\nconst getKeycloakPromise = inject<() => Promise<Keycloak>>(\"getKeycloakPromise\");\nconst route = useRoute();\nconst router = useRouter();\nconst store = useSharedSessionStateStore();\nconst currentRefreshTokenInSharedStore = ref(store.refreshToken);\n\nonMounted(() => {\n  if (route.query.externalLogout === \"true\") {\n    openLogoutModal();\n  }\n  void checkAuthenticatedAndRedirectIfLoggedIn();\n});\n\nwatch(authenticated, () => {\n  void checkAuthenticatedAndRedirectIfLoggedIn();\n});\n\nwatch(currentRefreshTokenInSharedStore, () => {\n  void router.push({ path: \"/companies\", replace: true });\n});\n\nconst checkAuthenticatedAndRedirectIfLoggedIn = async (): Promise<void | NavigationFailure | undefined> => {\n  const keycloak = await assertDefined(getKeycloakPromise)();\n  if (keycloak.authenticated) {\n    return router.push({ path: \"/companies\", replace: true });\n  }\n  return Promise.resolve();\n};\n\nconst openLogoutModal = (): void => {\n  dialog.open(SessionDialog, {\n    props: {\n      modal: true,\n      dismissableMask: true,\n      showHeader: false,\n    },\n    data: {\n      sessionDialogMode: SessionDialogMode.ExternalLogout,\n    },\n    onClose: () => {\n      void router.replace(\"\");\n    },\n  });\n};\n</script>\n"],"names":["content","contentData","landingPage","page","dialog","useDialog","injectedAuthenticated","inject","authenticated","ref","getKeycloakPromise","route","useRoute","router","useRouter","store","useSharedSessionStateStore","currentRefreshTokenInSharedStore","onMounted","openLogoutModal","checkAuthenticatedAndRedirectIfLoggedIn","watch","assertDefined","SessionDialog","SessionDialogMode"],"mappings":"oTAwBA,MAAMA,EAAmBC,EACnBC,EAAgCF,EAAQ,MAAM,KAAMG,GAASA,EAAK,MAAQ,KAAK,EAE/EC,EAASC,IACTC,EAAwBC,EAAgB,eAAe,EACvDC,EAAgBC,EAAIH,CAAqB,EACzCI,EAAqBH,EAAgC,oBAAoB,EACzEI,EAAQC,IACRC,EAASC,IACTC,EAAQC,IACRC,EAAmCR,EAAIM,EAAM,YAAY,EAE/DG,EAAU,IAAM,CACVP,EAAM,MAAM,iBAAmB,QACjBQ,IAEbC,EAAwC,CAAA,CAC9C,EAEDC,EAAMb,EAAe,IAAM,CACpBY,EAAwC,CAAA,CAC9C,EAEDC,EAAMJ,EAAkC,IAAM,CACvCJ,EAAO,KAAK,CAAE,KAAM,aAAc,QAAS,GAAM,CAAA,CACvD,EAED,MAAMO,EAA0C,UAC7B,MAAME,EAAcZ,CAAkB,EAAE,GAC5C,cACJG,EAAO,KAAK,CAAE,KAAM,aAAc,QAAS,GAAM,EAEnD,QAAQ,UAGXM,EAAkB,IAAY,CAClCf,EAAO,KAAKmB,EAAe,CACzB,MAAO,CACL,MAAO,GACP,gBAAiB,GACjB,WAAY,EACd,EACA,KAAM,CACJ,kBAAmBC,EAAkB,cACvC,EACA,QAAS,IAAM,CACRX,EAAO,QAAQ,EAAE,CACxB,CAAA,CACD,CAAA"}