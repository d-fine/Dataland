{"version":3,"file":"CompanyInformation-8867f07d.js","sources":["../../src/components/pages/CompanyInformation.vue"],"sourcesContent":["<template>\n  <div class=\"p-3\">\n    <div v-if=\"waitingForData\" class=\"inline-loading text-center\">\n      <p class=\"font-medium text-xl\">Loading company information...</p>\n      <i class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n    </div>\n    <div v-else-if=\"companyInformation && !waitingForData\" class=\"grid align-items-end text-left\">\n      <div class=\"col-12\">\n        <h1 class=\"mb-0\" data-test=\"companyNameTitle\">{{ companyInformation.companyName }}</h1>\n      </div>\n\n      <div class=\"col-4\">\n        <span>Headquarter: </span>\n        <span class=\"font-semibold\">{{ companyInformation.headquarters }}</span>\n      </div>\n      <div class=\"col-4\">\n        <span>Sector: </span>\n        <span class=\"font-semibold\">{{ companyInformation.sector ?? \"&mdash;\" }}</span>\n      </div>\n    </div>\n    <div v-else-if=\"companyIdDoesNotExist\" class=\"col-12\">\n      <h1 class=\"mb-0\" data-test=\"noCompanyWithThisIdErrorIndicator\">No company with this ID present</h1>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { defineComponent, inject } from \"vue\";\nimport { type CompanyInformation } from \"@clients/backend\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\n\nexport default defineComponent({\n  name: \"CompanyInformation\",\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  data() {\n    return {\n      companyInformation: null as CompanyInformation | null,\n      waitingForData: true,\n      companyIdDoesNotExist: false,\n    };\n  },\n  props: {\n    companyID: {\n      type: String,\n      default: \"loading\",\n    },\n  },\n  mounted() {\n    void this.getCompanyInformation();\n  },\n  watch: {\n    companyID() {\n      void this.getCompanyInformation();\n    },\n  },\n  methods: {\n    /**\n     * Uses the dataland API to retrieve information about the company identified by the local\n     * companyId object.\n     */\n    async getCompanyInformation() {\n      try {\n        this.waitingForData = true;\n        if (this.companyID != \"loading\") {\n          const companyDataControllerApi = await new ApiClientProvider(\n            assertDefined(this.getKeycloakPromise)(),\n          ).getCompanyDataControllerApi();\n          const response = await companyDataControllerApi.getCompanyById(this.companyID);\n          this.companyInformation = response.data.companyInformation;\n          this.waitingForData = false;\n        }\n      } catch (error) {\n        console.error(error);\n        if (this.getErrorMessage(error).includes(\"404\")) {\n          this.companyIdDoesNotExist = true;\n        }\n        this.waitingForData = false;\n        this.companyInformation = null;\n      }\n    },\n    /**\n     * Tries to find a message in an error\n     * @param error the error to extract a message from\n     * @returns the extracted message\n     */\n    getErrorMessage(error: unknown) {\n      const noStringMessage = error instanceof Error ? error.message : \"\";\n      return typeof error === \"string\" ? error : noStringMessage;\n    },\n  },\n});\n</script>\n\n<style scoped>\n.inline-loading {\n  width: 450px;\n}\n</style>\n"],"names":["_sfc_main","defineComponent","inject","response","ApiClientProvider","assertDefined","error","noStringMessage","_hoisted_2","_hoisted_3","_withScopeId","_createElementVNode","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_15","_hoisted_16","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_hoisted_1","_toDisplayString","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_17","_createCommentVNode"],"mappings":"2JAiCA,MAAAA,EAAeC,EAAgB,CAC7B,KAAM,qBACN,OAAQ,CACC,MAAA,CACL,mBAAoBC,EAAgC,oBAAoB,CAAA,CAE5E,EACA,MAAO,CACE,MAAA,CACL,mBAAoB,KACpB,eAAgB,GAChB,sBAAuB,EAAA,CAE3B,EACA,MAAO,CACL,UAAW,CACT,KAAM,OACN,QAAS,SACX,CACF,EACA,SAAU,CACH,KAAK,uBACZ,EACA,MAAO,CACL,WAAY,CACL,KAAK,uBACZ,CACF,EACA,QAAS,CAKP,MAAM,uBAAwB,CACxB,GAAA,CAEE,GADJ,KAAK,eAAiB,GAClB,KAAK,WAAa,UAAW,CAI/B,MAAMC,EAAW,MAHgB,MAAM,IAAIC,EACzCC,EAAc,KAAK,kBAAkB,EAAE,GACvC,4BAA4B,GACkB,eAAe,KAAK,SAAS,EACxE,KAAA,mBAAqBF,EAAS,KAAK,mBACxC,KAAK,eAAiB,EACxB,QACOG,EAAO,CACd,QAAQ,MAAMA,CAAK,EACf,KAAK,gBAAgBA,CAAK,EAAE,SAAS,KAAK,IAC5C,KAAK,sBAAwB,IAE/B,KAAK,eAAiB,GACtB,KAAK,mBAAqB,IAC5B,CACF,EAMA,gBAAgBA,EAAgB,CAC9B,MAAMC,EAAkBD,aAAiB,MAAQA,EAAM,QAAU,GAC1D,OAAA,OAAOA,GAAU,SAAWA,EAAQC,CAC7C,CACF,CACF,CAAC,gEA9F8BC,EAAM,CAAA,IAAA,sCAE5BC,EAA6BC,EAAA,IAAAC,EAAA,IAAA,CAAA,MAAA,uBAAA,iCAAA,EAAA,CAAA,EAACC,EAAkBF,EAAA,IAAAC,EAAA,IAAA,CAAC,MAAA,wBAAA,cAAA,+CADpD,KAAiE,EAAA,CAAA,EACjEE,EAA0F,CAAAJ,KAErCK,EAAM,CAAA,IAAA,0CAErDC,EAAY,CAAA,MAAA,UAACC,EAAU,CAAA,MAAA,gDAKhB,WAEKN,EAAA,IAAAC,EAAA,OAAA,KAAA,gBAAA,EAAA,CAAA,+BAEV,MAAM,yEAGuBM,EAAc,CAAA,IAAA,kBAClCC,EAA6CR,EAAA,IAAAC,EAAA,KAAA,CAAC,MAAA,OAAA,YAAA,qCAA/D,kCAAmG,EAAA,CAAA,iBAnB1FQ,EAAcC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,CAAzB,OAAAC,EAAA,EAAAC,EAGM,MAHNC,EAGM,CAAAR,EACU,sBAAhB,MAaMZ,EAAAK,CAAA,GAAAO,EAZJ,oBAEM,CAAAA,EAFN,oBACyFO,EAAA,MAAAb,EAAA,CAAAH,EAAA,MAAAI,EAAA,CAGzFJ,EAGM,KAHNK,EAGMa,EAAAT,EAAA,mBAAA,WAAA,EAAA,CAAA,CAAA,CAAA,EADJT,EAAA,MAAwEmB,EAAxE,CAAAC,EAEFpB,EAGM,OAHNqB,EAGMH,EAAAT,EAAA,mBAAA,YAAA,EAAA,CAAA,CAAA,CAAA,EADJT,EAAA,MAA+EsB,EAA/E,CAAAC,mDAGY,CAAA,CAAA,CAAA,GAAAd,EAAA,uBAAAM,EAAA,EAAAC,EAAA,MAAAV,EAAAkB,CAAA,GAAAC,EAAA,GAAA,EAAA"}