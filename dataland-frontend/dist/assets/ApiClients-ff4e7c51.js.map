{"version":3,"file":"ApiClients-ff4e7c51.js","sources":["../../node_modules/axios/lib/helpers/bind.js","../../node_modules/axios/lib/utils.js","../../node_modules/axios/lib/core/AxiosError.js","../../node_modules/axios/lib/helpers/null.js","../../node_modules/axios/lib/helpers/toFormData.js","../../node_modules/axios/lib/helpers/AxiosURLSearchParams.js","../../node_modules/axios/lib/helpers/buildURL.js","../../node_modules/axios/lib/core/InterceptorManager.js","../../node_modules/axios/lib/defaults/transitional.js","../../node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","../../node_modules/axios/lib/platform/browser/classes/FormData.js","../../node_modules/axios/lib/platform/browser/classes/Blob.js","../../node_modules/axios/lib/platform/browser/index.js","../../node_modules/axios/lib/helpers/toURLEncodedForm.js","../../node_modules/axios/lib/helpers/formDataToJSON.js","../../node_modules/axios/lib/defaults/index.js","../../node_modules/axios/lib/helpers/parseHeaders.js","../../node_modules/axios/lib/core/AxiosHeaders.js","../../node_modules/axios/lib/core/transformData.js","../../node_modules/axios/lib/cancel/isCancel.js","../../node_modules/axios/lib/cancel/CanceledError.js","../../node_modules/axios/lib/core/settle.js","../../node_modules/axios/lib/helpers/cookies.js","../../node_modules/axios/lib/helpers/isAbsoluteURL.js","../../node_modules/axios/lib/helpers/combineURLs.js","../../node_modules/axios/lib/core/buildFullPath.js","../../node_modules/axios/lib/helpers/isURLSameOrigin.js","../../node_modules/axios/lib/helpers/parseProtocol.js","../../node_modules/axios/lib/helpers/speedometer.js","../../node_modules/axios/lib/adapters/xhr.js","../../node_modules/axios/lib/adapters/adapters.js","../../node_modules/axios/lib/core/dispatchRequest.js","../../node_modules/axios/lib/core/mergeConfig.js","../../node_modules/axios/lib/env/data.js","../../node_modules/axios/lib/helpers/validator.js","../../node_modules/axios/lib/core/Axios.js","../../node_modules/axios/lib/cancel/CancelToken.js","../../node_modules/axios/lib/helpers/spread.js","../../node_modules/axios/lib/helpers/isAxiosError.js","../../node_modules/axios/lib/helpers/HttpStatusCode.js","../../node_modules/axios/lib/axios.js","../../build/clients/backend/base.ts","../../build/clients/backend/common.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/company-data-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/eu-taxonomy-data-for-financials-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/eu-taxonomy-data-for-non-financials-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/invite-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/lksg-data-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/meta-data-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/p2p-data-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/sfdr-data-controller-api.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/api/sme-data-controller-api.ts","../../build/clients/backend/configuration.ts","../../src/components/wrapper/MiddleCenterDivWrapper.vue","../../src/components/wrapper/AuthenticationWrapper.vue","../../build/clients/documentmanager/base.ts","../../build/clients/documentmanager/common.ts","../../build/clients/documentmanager/org/dataland/datalandfrontend/openApiClient/documentmanager/api/document-controller-api.ts","../../build/clients/qaservice/base.ts","../../build/clients/qaservice/common.ts","../../build/clients/qaservice/org/dataland/datalandfrontend/openApiClient/qaservice/api/qa-controller-api.ts","../../build/clients/apikeymanager/base.ts","../../build/clients/apikeymanager/common.ts","../../build/clients/apikeymanager/org/dataland/datalandfrontend/openApiClient/apikeymanager/api/api-key-controller-api.ts","../../src/services/ApiClients.ts"],"sourcesContent":["'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n","'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== 'undefined' && (\n    (product = navigator.product) === 'ReactNative' ||\n    product === 'NativeScript' ||\n    product === 'NS')\n  ) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\n const isStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: platform.isNode ? 'http' : 'xhr',\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else {\n        requestHeaders.setContentType('multipart/form-data;', false); // mobile/desktop app frameworks\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","export const VERSION = \"1.5.0\";","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"/api\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAvailableDistinctValues } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { CompanyIdAndName } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { CompanyInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { CompanyInformationPatch } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataTypeEnum } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { IdentifierType } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { StoredCompany } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * CompanyDataControllerApi - axios parameter creator\n * @export\n */\nexport const CompanyDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Checks that an identifier of specified type exists.\n         * @summary Checks that an identifier of specified type exists.\n         * @param {IdentifierType} identifierType \n         * @param {string} identifier \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        existsIdentifier: async (identifierType: IdentifierType, identifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'identifierType' is not null or undefined\n            assertParamExists('existsIdentifier', 'identifierType', identifierType)\n            // verify required parameter 'identifier' is not null or undefined\n            assertParamExists('existsIdentifier', 'identifier', identifier)\n            const localVarPath = `/companies/identifiers/{identifierType}/{identifier}`\n                .replace(`{${\"identifierType\"}}`, encodeURIComponent(String(identifierType)))\n                .replace(`{${\"identifier\"}}`, encodeURIComponent(String(identifier)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Distinct values for the parameter countryCode and sector are returned\n         * @summary Retrieve available distinct values for company search filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAvailableCompanySearchFilters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/companies/meta-information`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Companies with associated framework data identified via the provided company name/identifier are retrieved and filtered by countryCode, sector and available framework data. Empty/Unspecified filters are ignored.\n         * @summary Retrieve specific companies with framework data by different filters or just all companies from the data store.\n         * @param {string} [searchString] \n         * @param {Set<DataTypeEnum>} [dataTypes] \n         * @param {Set<string>} [countryCodes] \n         * @param {Set<string>} [sectors] \n         * @param {boolean} [onlyCompanyNames] \n         * @param {boolean} [onlyWithDataFromCurrentUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanies: async (searchString?: string, dataTypes?: Set<DataTypeEnum>, countryCodes?: Set<string>, sectors?: Set<string>, onlyCompanyNames?: boolean, onlyWithDataFromCurrentUser?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/companies`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (searchString !== undefined) {\n                localVarQueryParameter['searchString'] = searchString;\n            }\n\n            if (dataTypes) {\n                localVarQueryParameter['dataTypes'] = Array.from(dataTypes);\n            }\n\n            if (countryCodes) {\n                localVarQueryParameter['countryCodes'] = Array.from(countryCodes);\n            }\n\n            if (sectors) {\n                localVarQueryParameter['sectors'] = Array.from(sectors);\n            }\n\n            if (onlyCompanyNames !== undefined) {\n                localVarQueryParameter['onlyCompanyNames'] = onlyCompanyNames;\n            }\n\n            if (onlyWithDataFromCurrentUser !== undefined) {\n                localVarQueryParameter['onlyWithDataFromCurrentUser'] = onlyWithDataFromCurrentUser;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Companies identified via the provided company name/identifier are retrieved\n         * @summary Retrieve specific companies by searching their names and identifiers\n         * @param {string} searchString \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompaniesBySearchString: async (searchString: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'searchString' is not null or undefined\n            assertParamExists('getCompaniesBySearchString', 'searchString', searchString)\n            const localVarPath = `/companies/names`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (searchString !== undefined) {\n                localVarQueryParameter['searchString'] = searchString;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Company information behind the given company Id is retrieved.\n         * @summary Retrieve company information.\n         * @param {string} companyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyById: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getCompanyById', 'companyId', companyId)\n            const localVarPath = `/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * A list of all company IDs that are currently set as teaser companies (accessible without authentication).\n         * @summary Get the company IDs of the teaser companies.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTeaserCompanies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/companies/teaser`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Provided fields of the company associated with the given company Id are updated.\n         * @summary Update company information selectively\n         * @param {string} companyId \n         * @param {CompanyInformationPatch} companyInformationPatch \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchCompanyById: async (companyId: string, companyInformationPatch: CompanyInformationPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('patchCompanyById', 'companyId', companyId)\n            // verify required parameter 'companyInformationPatch' is not null or undefined\n            assertParamExists('patchCompanyById', 'companyInformationPatch', companyInformationPatch)\n            const localVarPath = `/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyInformationPatch, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * A new company is added using the provided information, the generated company ID is returned.\n         * @summary Add a new company.\n         * @param {CompanyInformation} companyInformation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompany: async (companyInformation: CompanyInformation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyInformation' is not null or undefined\n            assertParamExists('postCompany', 'companyInformation', companyInformation)\n            const localVarPath = `/companies`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyInformation, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Replace all company information of the company associated with the given company Id\n         * @summary Update company information entirely\n         * @param {string} companyId \n         * @param {CompanyInformation} companyInformation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        putCompanyById: async (companyId: string, companyInformation: CompanyInformation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('putCompanyById', 'companyId', companyId)\n            // verify required parameter 'companyInformation' is not null or undefined\n            assertParamExists('putCompanyById', 'companyInformation', companyInformation)\n            const localVarPath = `/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyInformation, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * CompanyDataControllerApi - functional programming interface\n * @export\n */\nexport const CompanyDataControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = CompanyDataControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Checks that an identifier of specified type exists.\n         * @summary Checks that an identifier of specified type exists.\n         * @param {IdentifierType} identifierType \n         * @param {string} identifier \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async existsIdentifier(identifierType: IdentifierType, identifier: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.existsIdentifier(identifierType, identifier, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Distinct values for the parameter countryCode and sector are returned\n         * @summary Retrieve available distinct values for company search filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAvailableCompanySearchFilters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAvailableDistinctValues>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableCompanySearchFilters(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Companies with associated framework data identified via the provided company name/identifier are retrieved and filtered by countryCode, sector and available framework data. Empty/Unspecified filters are ignored.\n         * @summary Retrieve specific companies with framework data by different filters or just all companies from the data store.\n         * @param {string} [searchString] \n         * @param {Set<DataTypeEnum>} [dataTypes] \n         * @param {Set<string>} [countryCodes] \n         * @param {Set<string>} [sectors] \n         * @param {boolean} [onlyCompanyNames] \n         * @param {boolean} [onlyWithDataFromCurrentUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanies(searchString?: string, dataTypes?: Set<DataTypeEnum>, countryCodes?: Set<string>, sectors?: Set<string>, onlyCompanyNames?: boolean, onlyWithDataFromCurrentUser?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoredCompany>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanies(searchString, dataTypes, countryCodes, sectors, onlyCompanyNames, onlyWithDataFromCurrentUser, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Companies identified via the provided company name/identifier are retrieved\n         * @summary Retrieve specific companies by searching their names and identifiers\n         * @param {string} searchString \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompaniesBySearchString(searchString: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyIdAndName>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompaniesBySearchString(searchString, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Company information behind the given company Id is retrieved.\n         * @summary Retrieve company information.\n         * @param {string} companyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyById(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoredCompany>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyById(companyId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * A list of all company IDs that are currently set as teaser companies (accessible without authentication).\n         * @summary Get the company IDs of the teaser companies.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTeaserCompanies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeaserCompanies(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Provided fields of the company associated with the given company Id are updated.\n         * @summary Update company information selectively\n         * @param {string} companyId \n         * @param {CompanyInformationPatch} companyInformationPatch \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async patchCompanyById(companyId: string, companyInformationPatch: CompanyInformationPatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoredCompany>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCompanyById(companyId, companyInformationPatch, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * A new company is added using the provided information, the generated company ID is returned.\n         * @summary Add a new company.\n         * @param {CompanyInformation} companyInformation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompany(companyInformation: CompanyInformation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoredCompany>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompany(companyInformation, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Replace all company information of the company associated with the given company Id\n         * @summary Update company information entirely\n         * @param {string} companyId \n         * @param {CompanyInformation} companyInformation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async putCompanyById(companyId: string, companyInformation: CompanyInformation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoredCompany>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.putCompanyById(companyId, companyInformation, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * CompanyDataControllerApi - factory interface\n * @export\n */\nexport const CompanyDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = CompanyDataControllerApiFp(configuration)\n    return {\n        /**\n         * Checks that an identifier of specified type exists.\n         * @summary Checks that an identifier of specified type exists.\n         * @param {IdentifierType} identifierType \n         * @param {string} identifier \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        existsIdentifier(identifierType: IdentifierType, identifier: string, options?: any): AxiosPromise<void> {\n            return localVarFp.existsIdentifier(identifierType, identifier, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Distinct values for the parameter countryCode and sector are returned\n         * @summary Retrieve available distinct values for company search filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAvailableCompanySearchFilters(options?: any): AxiosPromise<CompanyAvailableDistinctValues> {\n            return localVarFp.getAvailableCompanySearchFilters(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Companies with associated framework data identified via the provided company name/identifier are retrieved and filtered by countryCode, sector and available framework data. Empty/Unspecified filters are ignored.\n         * @summary Retrieve specific companies with framework data by different filters or just all companies from the data store.\n         * @param {string} [searchString] \n         * @param {Set<DataTypeEnum>} [dataTypes] \n         * @param {Set<string>} [countryCodes] \n         * @param {Set<string>} [sectors] \n         * @param {boolean} [onlyCompanyNames] \n         * @param {boolean} [onlyWithDataFromCurrentUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanies(searchString?: string, dataTypes?: Set<DataTypeEnum>, countryCodes?: Set<string>, sectors?: Set<string>, onlyCompanyNames?: boolean, onlyWithDataFromCurrentUser?: boolean, options?: any): AxiosPromise<Array<StoredCompany>> {\n            return localVarFp.getCompanies(searchString, dataTypes, countryCodes, sectors, onlyCompanyNames, onlyWithDataFromCurrentUser, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Companies identified via the provided company name/identifier are retrieved\n         * @summary Retrieve specific companies by searching their names and identifiers\n         * @param {string} searchString \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompaniesBySearchString(searchString: string, options?: any): AxiosPromise<Array<CompanyIdAndName>> {\n            return localVarFp.getCompaniesBySearchString(searchString, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Company information behind the given company Id is retrieved.\n         * @summary Retrieve company information.\n         * @param {string} companyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyById(companyId: string, options?: any): AxiosPromise<StoredCompany> {\n            return localVarFp.getCompanyById(companyId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * A list of all company IDs that are currently set as teaser companies (accessible without authentication).\n         * @summary Get the company IDs of the teaser companies.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTeaserCompanies(options?: any): AxiosPromise<Array<string>> {\n            return localVarFp.getTeaserCompanies(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Provided fields of the company associated with the given company Id are updated.\n         * @summary Update company information selectively\n         * @param {string} companyId \n         * @param {CompanyInformationPatch} companyInformationPatch \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchCompanyById(companyId: string, companyInformationPatch: CompanyInformationPatch, options?: any): AxiosPromise<StoredCompany> {\n            return localVarFp.patchCompanyById(companyId, companyInformationPatch, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * A new company is added using the provided information, the generated company ID is returned.\n         * @summary Add a new company.\n         * @param {CompanyInformation} companyInformation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompany(companyInformation: CompanyInformation, options?: any): AxiosPromise<StoredCompany> {\n            return localVarFp.postCompany(companyInformation, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Replace all company information of the company associated with the given company Id\n         * @summary Update company information entirely\n         * @param {string} companyId \n         * @param {CompanyInformation} companyInformation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        putCompanyById(companyId: string, companyInformation: CompanyInformation, options?: any): AxiosPromise<StoredCompany> {\n            return localVarFp.putCompanyById(companyId, companyInformation, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * CompanyDataControllerApi - interface\n * @export\n * @interface CompanyDataControllerApi\n */\nexport interface CompanyDataControllerApiInterface {\n    /**\n     * Checks that an identifier of specified type exists.\n     * @summary Checks that an identifier of specified type exists.\n     * @param {IdentifierType} identifierType \n     * @param {string} identifier \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    existsIdentifier(identifierType: IdentifierType, identifier: string, options?: AxiosRequestConfig): AxiosPromise<void>;\n\n    /**\n     * Distinct values for the parameter countryCode and sector are returned\n     * @summary Retrieve available distinct values for company search filters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    getAvailableCompanySearchFilters(options?: AxiosRequestConfig): AxiosPromise<CompanyAvailableDistinctValues>;\n\n    /**\n     * Companies with associated framework data identified via the provided company name/identifier are retrieved and filtered by countryCode, sector and available framework data. Empty/Unspecified filters are ignored.\n     * @summary Retrieve specific companies with framework data by different filters or just all companies from the data store.\n     * @param {string} [searchString] \n     * @param {Set<DataTypeEnum>} [dataTypes] \n     * @param {Set<string>} [countryCodes] \n     * @param {Set<string>} [sectors] \n     * @param {boolean} [onlyCompanyNames] \n     * @param {boolean} [onlyWithDataFromCurrentUser] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    getCompanies(searchString?: string, dataTypes?: Set<DataTypeEnum>, countryCodes?: Set<string>, sectors?: Set<string>, onlyCompanyNames?: boolean, onlyWithDataFromCurrentUser?: boolean, options?: AxiosRequestConfig): AxiosPromise<Array<StoredCompany>>;\n\n    /**\n     * Companies identified via the provided company name/identifier are retrieved\n     * @summary Retrieve specific companies by searching their names and identifiers\n     * @param {string} searchString \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    getCompaniesBySearchString(searchString: string, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyIdAndName>>;\n\n    /**\n     * Company information behind the given company Id is retrieved.\n     * @summary Retrieve company information.\n     * @param {string} companyId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    getCompanyById(companyId: string, options?: AxiosRequestConfig): AxiosPromise<StoredCompany>;\n\n    /**\n     * A list of all company IDs that are currently set as teaser companies (accessible without authentication).\n     * @summary Get the company IDs of the teaser companies.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    getTeaserCompanies(options?: AxiosRequestConfig): AxiosPromise<Array<string>>;\n\n    /**\n     * Provided fields of the company associated with the given company Id are updated.\n     * @summary Update company information selectively\n     * @param {string} companyId \n     * @param {CompanyInformationPatch} companyInformationPatch \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    patchCompanyById(companyId: string, companyInformationPatch: CompanyInformationPatch, options?: AxiosRequestConfig): AxiosPromise<StoredCompany>;\n\n    /**\n     * A new company is added using the provided information, the generated company ID is returned.\n     * @summary Add a new company.\n     * @param {CompanyInformation} companyInformation \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    postCompany(companyInformation: CompanyInformation, options?: AxiosRequestConfig): AxiosPromise<StoredCompany>;\n\n    /**\n     * Replace all company information of the company associated with the given company Id\n     * @summary Update company information entirely\n     * @param {string} companyId \n     * @param {CompanyInformation} companyInformation \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApiInterface\n     */\n    putCompanyById(companyId: string, companyInformation: CompanyInformation, options?: AxiosRequestConfig): AxiosPromise<StoredCompany>;\n\n}\n\n/**\n * CompanyDataControllerApi - object-oriented interface\n * @export\n * @class CompanyDataControllerApi\n * @extends {BaseAPI}\n */\nexport class CompanyDataControllerApi extends BaseAPI implements CompanyDataControllerApiInterface {\n    /**\n     * Checks that an identifier of specified type exists.\n     * @summary Checks that an identifier of specified type exists.\n     * @param {IdentifierType} identifierType \n     * @param {string} identifier \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public existsIdentifier(identifierType: IdentifierType, identifier: string, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).existsIdentifier(identifierType, identifier, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Distinct values for the parameter countryCode and sector are returned\n     * @summary Retrieve available distinct values for company search filters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public getAvailableCompanySearchFilters(options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).getAvailableCompanySearchFilters(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Companies with associated framework data identified via the provided company name/identifier are retrieved and filtered by countryCode, sector and available framework data. Empty/Unspecified filters are ignored.\n     * @summary Retrieve specific companies with framework data by different filters or just all companies from the data store.\n     * @param {string} [searchString] \n     * @param {Set<DataTypeEnum>} [dataTypes] \n     * @param {Set<string>} [countryCodes] \n     * @param {Set<string>} [sectors] \n     * @param {boolean} [onlyCompanyNames] \n     * @param {boolean} [onlyWithDataFromCurrentUser] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public getCompanies(searchString?: string, dataTypes?: Set<DataTypeEnum>, countryCodes?: Set<string>, sectors?: Set<string>, onlyCompanyNames?: boolean, onlyWithDataFromCurrentUser?: boolean, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).getCompanies(searchString, dataTypes, countryCodes, sectors, onlyCompanyNames, onlyWithDataFromCurrentUser, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Companies identified via the provided company name/identifier are retrieved\n     * @summary Retrieve specific companies by searching their names and identifiers\n     * @param {string} searchString \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public getCompaniesBySearchString(searchString: string, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).getCompaniesBySearchString(searchString, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Company information behind the given company Id is retrieved.\n     * @summary Retrieve company information.\n     * @param {string} companyId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public getCompanyById(companyId: string, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).getCompanyById(companyId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * A list of all company IDs that are currently set as teaser companies (accessible without authentication).\n     * @summary Get the company IDs of the teaser companies.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public getTeaserCompanies(options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).getTeaserCompanies(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Provided fields of the company associated with the given company Id are updated.\n     * @summary Update company information selectively\n     * @param {string} companyId \n     * @param {CompanyInformationPatch} companyInformationPatch \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public patchCompanyById(companyId: string, companyInformationPatch: CompanyInformationPatch, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).patchCompanyById(companyId, companyInformationPatch, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * A new company is added using the provided information, the generated company ID is returned.\n     * @summary Add a new company.\n     * @param {CompanyInformation} companyInformation \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public postCompany(companyInformation: CompanyInformation, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).postCompany(companyInformation, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Replace all company information of the company associated with the given company Id\n     * @summary Update company information entirely\n     * @param {string} companyId \n     * @param {CompanyInformation} companyInformation \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CompanyDataControllerApi\n     */\n    public putCompanyById(companyId: string, companyInformation: CompanyInformation, options?: AxiosRequestConfig) {\n        return CompanyDataControllerApiFp(this.configuration).putCompanyById(companyId, companyInformation, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAssociatedDataEuTaxonomyDataForFinancials } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataAndMetaInformationEuTaxonomyDataForFinancials } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * EuTaxonomyDataForFinancialsControllerApi - axios parameter creator\n * @export\n */\nexport const EuTaxonomyDataForFinancialsControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyEuTaxonomyDataForFinancials: async (companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getAllCompanyEuTaxonomyDataForFinancials', 'companyId', companyId)\n            const localVarPath = `/data/eutaxonomy-financials/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedEuTaxonomyDataForFinancials: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getCompanyAssociatedEuTaxonomyDataForFinancials', 'dataId', dataId)\n            const localVarPath = `/data/eutaxonomy-financials/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataEuTaxonomyDataForFinancials} companyAssociatedDataEuTaxonomyDataForFinancials \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedEuTaxonomyDataForFinancials: async (companyAssociatedDataEuTaxonomyDataForFinancials: CompanyAssociatedDataEuTaxonomyDataForFinancials, bypassQa?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyAssociatedDataEuTaxonomyDataForFinancials' is not null or undefined\n            assertParamExists('postCompanyAssociatedEuTaxonomyDataForFinancials', 'companyAssociatedDataEuTaxonomyDataForFinancials', companyAssociatedDataEuTaxonomyDataForFinancials)\n            const localVarPath = `/data/eutaxonomy-financials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (bypassQa !== undefined) {\n                localVarQueryParameter['bypassQa'] = bypassQa;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyAssociatedDataEuTaxonomyDataForFinancials, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * EuTaxonomyDataForFinancialsControllerApi - functional programming interface\n * @export\n */\nexport const EuTaxonomyDataForFinancialsControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = EuTaxonomyDataForFinancialsControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllCompanyEuTaxonomyDataForFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataAndMetaInformationEuTaxonomyDataForFinancials>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanyEuTaxonomyDataForFinancials(companyId, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyAssociatedEuTaxonomyDataForFinancials(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAssociatedDataEuTaxonomyDataForFinancials>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssociatedEuTaxonomyDataForFinancials(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataEuTaxonomyDataForFinancials} companyAssociatedDataEuTaxonomyDataForFinancials \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials: CompanyAssociatedDataEuTaxonomyDataForFinancials, bypassQa?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials, bypassQa, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * EuTaxonomyDataForFinancialsControllerApi - factory interface\n * @export\n */\nexport const EuTaxonomyDataForFinancialsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = EuTaxonomyDataForFinancialsControllerApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyEuTaxonomyDataForFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataAndMetaInformationEuTaxonomyDataForFinancials>> {\n            return localVarFp.getAllCompanyEuTaxonomyDataForFinancials(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedEuTaxonomyDataForFinancials(dataId: string, options?: any): AxiosPromise<CompanyAssociatedDataEuTaxonomyDataForFinancials> {\n            return localVarFp.getCompanyAssociatedEuTaxonomyDataForFinancials(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataEuTaxonomyDataForFinancials} companyAssociatedDataEuTaxonomyDataForFinancials \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials: CompanyAssociatedDataEuTaxonomyDataForFinancials, bypassQa?: boolean, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials, bypassQa, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * EuTaxonomyDataForFinancialsControllerApi - interface\n * @export\n * @interface EuTaxonomyDataForFinancialsControllerApi\n */\nexport interface EuTaxonomyDataForFinancialsControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForFinancialsControllerApiInterface\n     */\n    getAllCompanyEuTaxonomyDataForFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataAndMetaInformationEuTaxonomyDataForFinancials>>;\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForFinancialsControllerApiInterface\n     */\n    getCompanyAssociatedEuTaxonomyDataForFinancials(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedDataEuTaxonomyDataForFinancials>;\n\n    /**\n     * \n     * @param {CompanyAssociatedDataEuTaxonomyDataForFinancials} companyAssociatedDataEuTaxonomyDataForFinancials \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForFinancialsControllerApiInterface\n     */\n    postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials: CompanyAssociatedDataEuTaxonomyDataForFinancials, bypassQa?: boolean, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n}\n\n/**\n * EuTaxonomyDataForFinancialsControllerApi - object-oriented interface\n * @export\n * @class EuTaxonomyDataForFinancialsControllerApi\n * @extends {BaseAPI}\n */\nexport class EuTaxonomyDataForFinancialsControllerApi extends BaseAPI implements EuTaxonomyDataForFinancialsControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForFinancialsControllerApi\n     */\n    public getAllCompanyEuTaxonomyDataForFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return EuTaxonomyDataForFinancialsControllerApiFp(this.configuration).getAllCompanyEuTaxonomyDataForFinancials(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForFinancialsControllerApi\n     */\n    public getCompanyAssociatedEuTaxonomyDataForFinancials(dataId: string, options?: AxiosRequestConfig) {\n        return EuTaxonomyDataForFinancialsControllerApiFp(this.configuration).getCompanyAssociatedEuTaxonomyDataForFinancials(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CompanyAssociatedDataEuTaxonomyDataForFinancials} companyAssociatedDataEuTaxonomyDataForFinancials \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForFinancialsControllerApi\n     */\n    public postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials: CompanyAssociatedDataEuTaxonomyDataForFinancials, bypassQa?: boolean, options?: AxiosRequestConfig) {\n        return EuTaxonomyDataForFinancialsControllerApiFp(this.configuration).postCompanyAssociatedEuTaxonomyDataForFinancials(companyAssociatedDataEuTaxonomyDataForFinancials, bypassQa, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAssociatedDataEuTaxonomyDataForNonFinancials } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataAndMetaInformationEuTaxonomyDataForNonFinancials } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * EuTaxonomyDataForNonFinancialsControllerApi - axios parameter creator\n * @export\n */\nexport const EuTaxonomyDataForNonFinancialsControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyEuTaxonomyDataForNonFinancials: async (companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getAllCompanyEuTaxonomyDataForNonFinancials', 'companyId', companyId)\n            const localVarPath = `/data/eutaxonomy-non-financials/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedEuTaxonomyDataForNonFinancials: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getCompanyAssociatedEuTaxonomyDataForNonFinancials', 'dataId', dataId)\n            const localVarPath = `/data/eutaxonomy-non-financials/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataEuTaxonomyDataForNonFinancials} companyAssociatedDataEuTaxonomyDataForNonFinancials \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedEuTaxonomyDataForNonFinancials: async (companyAssociatedDataEuTaxonomyDataForNonFinancials: CompanyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyAssociatedDataEuTaxonomyDataForNonFinancials' is not null or undefined\n            assertParamExists('postCompanyAssociatedEuTaxonomyDataForNonFinancials', 'companyAssociatedDataEuTaxonomyDataForNonFinancials', companyAssociatedDataEuTaxonomyDataForNonFinancials)\n            const localVarPath = `/data/eutaxonomy-non-financials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (bypassQa !== undefined) {\n                localVarQueryParameter['bypassQa'] = bypassQa;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyAssociatedDataEuTaxonomyDataForNonFinancials, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * EuTaxonomyDataForNonFinancialsControllerApi - functional programming interface\n * @export\n */\nexport const EuTaxonomyDataForNonFinancialsControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = EuTaxonomyDataForNonFinancialsControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllCompanyEuTaxonomyDataForNonFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataAndMetaInformationEuTaxonomyDataForNonFinancials>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanyEuTaxonomyDataForNonFinancials(companyId, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAssociatedDataEuTaxonomyDataForNonFinancials>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataEuTaxonomyDataForNonFinancials} companyAssociatedDataEuTaxonomyDataForNonFinancials \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials: CompanyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * EuTaxonomyDataForNonFinancialsControllerApi - factory interface\n * @export\n */\nexport const EuTaxonomyDataForNonFinancialsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = EuTaxonomyDataForNonFinancialsControllerApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyEuTaxonomyDataForNonFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataAndMetaInformationEuTaxonomyDataForNonFinancials>> {\n            return localVarFp.getAllCompanyEuTaxonomyDataForNonFinancials(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId: string, options?: any): AxiosPromise<CompanyAssociatedDataEuTaxonomyDataForNonFinancials> {\n            return localVarFp.getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataEuTaxonomyDataForNonFinancials} companyAssociatedDataEuTaxonomyDataForNonFinancials \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials: CompanyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa?: boolean, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * EuTaxonomyDataForNonFinancialsControllerApi - interface\n * @export\n * @interface EuTaxonomyDataForNonFinancialsControllerApi\n */\nexport interface EuTaxonomyDataForNonFinancialsControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForNonFinancialsControllerApiInterface\n     */\n    getAllCompanyEuTaxonomyDataForNonFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataAndMetaInformationEuTaxonomyDataForNonFinancials>>;\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForNonFinancialsControllerApiInterface\n     */\n    getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedDataEuTaxonomyDataForNonFinancials>;\n\n    /**\n     * \n     * @param {CompanyAssociatedDataEuTaxonomyDataForNonFinancials} companyAssociatedDataEuTaxonomyDataForNonFinancials \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForNonFinancialsControllerApiInterface\n     */\n    postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials: CompanyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa?: boolean, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n}\n\n/**\n * EuTaxonomyDataForNonFinancialsControllerApi - object-oriented interface\n * @export\n * @class EuTaxonomyDataForNonFinancialsControllerApi\n * @extends {BaseAPI}\n */\nexport class EuTaxonomyDataForNonFinancialsControllerApi extends BaseAPI implements EuTaxonomyDataForNonFinancialsControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForNonFinancialsControllerApi\n     */\n    public getAllCompanyEuTaxonomyDataForNonFinancials(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return EuTaxonomyDataForNonFinancialsControllerApiFp(this.configuration).getAllCompanyEuTaxonomyDataForNonFinancials(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForNonFinancialsControllerApi\n     */\n    public getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId: string, options?: AxiosRequestConfig) {\n        return EuTaxonomyDataForNonFinancialsControllerApiFp(this.configuration).getCompanyAssociatedEuTaxonomyDataForNonFinancials(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CompanyAssociatedDataEuTaxonomyDataForNonFinancials} companyAssociatedDataEuTaxonomyDataForNonFinancials \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EuTaxonomyDataForNonFinancialsControllerApi\n     */\n    public postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials: CompanyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa?: boolean, options?: AxiosRequestConfig) {\n        return EuTaxonomyDataForNonFinancialsControllerApiFp(this.configuration).postCompanyAssociatedEuTaxonomyDataForNonFinancials(companyAssociatedDataEuTaxonomyDataForNonFinancials, bypassQa, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { InviteMetaInfoEntity } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * InviteControllerApi - axios parameter creator\n * @export\n */\nexport const InviteControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a Dataland invite by uploading an Excel file containing the invite info.\n         * @summary Create a Dataland invite.\n         * @param {File} excelFile \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitInvite: async (excelFile: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'excelFile' is not null or undefined\n            assertParamExists('submitInvite', 'excelFile', excelFile)\n            const localVarPath = `/invite`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n            if (excelFile !== undefined) { \n                localVarFormParams.append('excelFile', excelFile as any);\n            }\n    \n    \n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * InviteControllerApi - functional programming interface\n * @export\n */\nexport const InviteControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = InviteControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a Dataland invite by uploading an Excel file containing the invite info.\n         * @summary Create a Dataland invite.\n         * @param {File} excelFile \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async submitInvite(excelFile: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteMetaInfoEntity>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.submitInvite(excelFile, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * InviteControllerApi - factory interface\n * @export\n */\nexport const InviteControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = InviteControllerApiFp(configuration)\n    return {\n        /**\n         * Create a Dataland invite by uploading an Excel file containing the invite info.\n         * @summary Create a Dataland invite.\n         * @param {File} excelFile \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitInvite(excelFile: File, options?: any): AxiosPromise<InviteMetaInfoEntity> {\n            return localVarFp.submitInvite(excelFile, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * InviteControllerApi - interface\n * @export\n * @interface InviteControllerApi\n */\nexport interface InviteControllerApiInterface {\n    /**\n     * Create a Dataland invite by uploading an Excel file containing the invite info.\n     * @summary Create a Dataland invite.\n     * @param {File} excelFile \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof InviteControllerApiInterface\n     */\n    submitInvite(excelFile: File, options?: AxiosRequestConfig): AxiosPromise<InviteMetaInfoEntity>;\n\n}\n\n/**\n * InviteControllerApi - object-oriented interface\n * @export\n * @class InviteControllerApi\n * @extends {BaseAPI}\n */\nexport class InviteControllerApi extends BaseAPI implements InviteControllerApiInterface {\n    /**\n     * Create a Dataland invite by uploading an Excel file containing the invite info.\n     * @summary Create a Dataland invite.\n     * @param {File} excelFile \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof InviteControllerApi\n     */\n    public submitInvite(excelFile: File, options?: AxiosRequestConfig) {\n        return InviteControllerApiFp(this.configuration).submitInvite(excelFile, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAssociatedDataLksgData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataAndMetaInformationLksgData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * LksgDataControllerApi - axios parameter creator\n * @export\n */\nexport const LksgDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyLksgData: async (companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getAllCompanyLksgData', 'companyId', companyId)\n            const localVarPath = `/data/lksg/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedLksgData: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getCompanyAssociatedLksgData', 'dataId', dataId)\n            const localVarPath = `/data/lksg/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataLksgData} companyAssociatedDataLksgData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedLksgData: async (companyAssociatedDataLksgData: CompanyAssociatedDataLksgData, bypassQa?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyAssociatedDataLksgData' is not null or undefined\n            assertParamExists('postCompanyAssociatedLksgData', 'companyAssociatedDataLksgData', companyAssociatedDataLksgData)\n            const localVarPath = `/data/lksg`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (bypassQa !== undefined) {\n                localVarQueryParameter['bypassQa'] = bypassQa;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyAssociatedDataLksgData, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LksgDataControllerApi - functional programming interface\n * @export\n */\nexport const LksgDataControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LksgDataControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllCompanyLksgData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataAndMetaInformationLksgData>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanyLksgData(companyId, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyAssociatedLksgData(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAssociatedDataLksgData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssociatedLksgData(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataLksgData} companyAssociatedDataLksgData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompanyAssociatedLksgData(companyAssociatedDataLksgData: CompanyAssociatedDataLksgData, bypassQa?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyAssociatedLksgData(companyAssociatedDataLksgData, bypassQa, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LksgDataControllerApi - factory interface\n * @export\n */\nexport const LksgDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LksgDataControllerApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyLksgData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataAndMetaInformationLksgData>> {\n            return localVarFp.getAllCompanyLksgData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedLksgData(dataId: string, options?: any): AxiosPromise<CompanyAssociatedDataLksgData> {\n            return localVarFp.getCompanyAssociatedLksgData(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataLksgData} companyAssociatedDataLksgData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedLksgData(companyAssociatedDataLksgData: CompanyAssociatedDataLksgData, bypassQa?: boolean, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.postCompanyAssociatedLksgData(companyAssociatedDataLksgData, bypassQa, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LksgDataControllerApi - interface\n * @export\n * @interface LksgDataControllerApi\n */\nexport interface LksgDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LksgDataControllerApiInterface\n     */\n    getAllCompanyLksgData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataAndMetaInformationLksgData>>;\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LksgDataControllerApiInterface\n     */\n    getCompanyAssociatedLksgData(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedDataLksgData>;\n\n    /**\n     * \n     * @param {CompanyAssociatedDataLksgData} companyAssociatedDataLksgData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LksgDataControllerApiInterface\n     */\n    postCompanyAssociatedLksgData(companyAssociatedDataLksgData: CompanyAssociatedDataLksgData, bypassQa?: boolean, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n}\n\n/**\n * LksgDataControllerApi - object-oriented interface\n * @export\n * @class LksgDataControllerApi\n * @extends {BaseAPI}\n */\nexport class LksgDataControllerApi extends BaseAPI implements LksgDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LksgDataControllerApi\n     */\n    public getAllCompanyLksgData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return LksgDataControllerApiFp(this.configuration).getAllCompanyLksgData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LksgDataControllerApi\n     */\n    public getCompanyAssociatedLksgData(dataId: string, options?: AxiosRequestConfig) {\n        return LksgDataControllerApiFp(this.configuration).getCompanyAssociatedLksgData(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CompanyAssociatedDataLksgData} companyAssociatedDataLksgData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LksgDataControllerApi\n     */\n    public postCompanyAssociatedLksgData(companyAssociatedDataLksgData: CompanyAssociatedDataLksgData, bypassQa?: boolean, options?: AxiosRequestConfig) {\n        return LksgDataControllerApiFp(this.configuration).postCompanyAssociatedLksgData(companyAssociatedDataLksgData, bypassQa, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataTypeEnum } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * MetaDataControllerApi - axios parameter creator\n * @export\n */\nexport const MetaDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Meta info about a specific data set registered by Dataland and identified by its data ID is retrieved.\n         * @summary Look up meta info about a specific data set.\n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDataMetaInfo: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getDataMetaInfo', 'dataId', dataId)\n            const localVarPath = `/metadata/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Meta info about data sets registered by Dataland can be retrieved.\n         * @summary Search in Dataland for meta info about data.\n         * @param {string} [companyId] \n         * @param {DataTypeEnum} [dataType] \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getListOfDataMetaInfo: async (companyId?: string, dataType?: DataTypeEnum, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/metadata`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (companyId !== undefined) {\n                localVarQueryParameter['companyId'] = companyId;\n            }\n\n            if (dataType !== undefined) {\n                localVarQueryParameter['dataType'] = dataType;\n            }\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * MetaDataControllerApi - functional programming interface\n * @export\n */\nexport const MetaDataControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = MetaDataControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Meta info about a specific data set registered by Dataland and identified by its data ID is retrieved.\n         * @summary Look up meta info about a specific data set.\n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDataMetaInfo(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataMetaInfo(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Meta info about data sets registered by Dataland can be retrieved.\n         * @summary Search in Dataland for meta info about data.\n         * @param {string} [companyId] \n         * @param {DataTypeEnum} [dataType] \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getListOfDataMetaInfo(companyId?: string, dataType?: DataTypeEnum, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataMetaInformation>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getListOfDataMetaInfo(companyId, dataType, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * MetaDataControllerApi - factory interface\n * @export\n */\nexport const MetaDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = MetaDataControllerApiFp(configuration)\n    return {\n        /**\n         * Meta info about a specific data set registered by Dataland and identified by its data ID is retrieved.\n         * @summary Look up meta info about a specific data set.\n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDataMetaInfo(dataId: string, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.getDataMetaInfo(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Meta info about data sets registered by Dataland can be retrieved.\n         * @summary Search in Dataland for meta info about data.\n         * @param {string} [companyId] \n         * @param {DataTypeEnum} [dataType] \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getListOfDataMetaInfo(companyId?: string, dataType?: DataTypeEnum, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataMetaInformation>> {\n            return localVarFp.getListOfDataMetaInfo(companyId, dataType, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * MetaDataControllerApi - interface\n * @export\n * @interface MetaDataControllerApi\n */\nexport interface MetaDataControllerApiInterface {\n    /**\n     * Meta info about a specific data set registered by Dataland and identified by its data ID is retrieved.\n     * @summary Look up meta info about a specific data set.\n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaDataControllerApiInterface\n     */\n    getDataMetaInfo(dataId: string, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n    /**\n     * Meta info about data sets registered by Dataland can be retrieved.\n     * @summary Search in Dataland for meta info about data.\n     * @param {string} [companyId] \n     * @param {DataTypeEnum} [dataType] \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaDataControllerApiInterface\n     */\n    getListOfDataMetaInfo(companyId?: string, dataType?: DataTypeEnum, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataMetaInformation>>;\n\n}\n\n/**\n * MetaDataControllerApi - object-oriented interface\n * @export\n * @class MetaDataControllerApi\n * @extends {BaseAPI}\n */\nexport class MetaDataControllerApi extends BaseAPI implements MetaDataControllerApiInterface {\n    /**\n     * Meta info about a specific data set registered by Dataland and identified by its data ID is retrieved.\n     * @summary Look up meta info about a specific data set.\n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaDataControllerApi\n     */\n    public getDataMetaInfo(dataId: string, options?: AxiosRequestConfig) {\n        return MetaDataControllerApiFp(this.configuration).getDataMetaInfo(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Meta info about data sets registered by Dataland can be retrieved.\n     * @summary Search in Dataland for meta info about data.\n     * @param {string} [companyId] \n     * @param {DataTypeEnum} [dataType] \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaDataControllerApi\n     */\n    public getListOfDataMetaInfo(companyId?: string, dataType?: DataTypeEnum, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return MetaDataControllerApiFp(this.configuration).getListOfDataMetaInfo(companyId, dataType, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAssociatedDataPathwaysToParisData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataAndMetaInformationPathwaysToParisData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * P2pDataControllerApi - axios parameter creator\n * @export\n */\nexport const P2pDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyP2pData: async (companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getAllCompanyP2pData', 'companyId', companyId)\n            const localVarPath = `/data/p2p/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedP2pData: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getCompanyAssociatedP2pData', 'dataId', dataId)\n            const localVarPath = `/data/p2p/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataPathwaysToParisData} companyAssociatedDataPathwaysToParisData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedP2pData: async (companyAssociatedDataPathwaysToParisData: CompanyAssociatedDataPathwaysToParisData, bypassQa?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyAssociatedDataPathwaysToParisData' is not null or undefined\n            assertParamExists('postCompanyAssociatedP2pData', 'companyAssociatedDataPathwaysToParisData', companyAssociatedDataPathwaysToParisData)\n            const localVarPath = `/data/p2p`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (bypassQa !== undefined) {\n                localVarQueryParameter['bypassQa'] = bypassQa;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyAssociatedDataPathwaysToParisData, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * P2pDataControllerApi - functional programming interface\n * @export\n */\nexport const P2pDataControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = P2pDataControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllCompanyP2pData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataAndMetaInformationPathwaysToParisData>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanyP2pData(companyId, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyAssociatedP2pData(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAssociatedDataPathwaysToParisData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssociatedP2pData(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataPathwaysToParisData} companyAssociatedDataPathwaysToParisData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData: CompanyAssociatedDataPathwaysToParisData, bypassQa?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData, bypassQa, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * P2pDataControllerApi - factory interface\n * @export\n */\nexport const P2pDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = P2pDataControllerApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanyP2pData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataAndMetaInformationPathwaysToParisData>> {\n            return localVarFp.getAllCompanyP2pData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedP2pData(dataId: string, options?: any): AxiosPromise<CompanyAssociatedDataPathwaysToParisData> {\n            return localVarFp.getCompanyAssociatedP2pData(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataPathwaysToParisData} companyAssociatedDataPathwaysToParisData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData: CompanyAssociatedDataPathwaysToParisData, bypassQa?: boolean, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData, bypassQa, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * P2pDataControllerApi - interface\n * @export\n * @interface P2pDataControllerApi\n */\nexport interface P2pDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof P2pDataControllerApiInterface\n     */\n    getAllCompanyP2pData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataAndMetaInformationPathwaysToParisData>>;\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof P2pDataControllerApiInterface\n     */\n    getCompanyAssociatedP2pData(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedDataPathwaysToParisData>;\n\n    /**\n     * \n     * @param {CompanyAssociatedDataPathwaysToParisData} companyAssociatedDataPathwaysToParisData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof P2pDataControllerApiInterface\n     */\n    postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData: CompanyAssociatedDataPathwaysToParisData, bypassQa?: boolean, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n}\n\n/**\n * P2pDataControllerApi - object-oriented interface\n * @export\n * @class P2pDataControllerApi\n * @extends {BaseAPI}\n */\nexport class P2pDataControllerApi extends BaseAPI implements P2pDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof P2pDataControllerApi\n     */\n    public getAllCompanyP2pData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return P2pDataControllerApiFp(this.configuration).getAllCompanyP2pData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof P2pDataControllerApi\n     */\n    public getCompanyAssociatedP2pData(dataId: string, options?: AxiosRequestConfig) {\n        return P2pDataControllerApiFp(this.configuration).getCompanyAssociatedP2pData(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CompanyAssociatedDataPathwaysToParisData} companyAssociatedDataPathwaysToParisData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof P2pDataControllerApi\n     */\n    public postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData: CompanyAssociatedDataPathwaysToParisData, bypassQa?: boolean, options?: AxiosRequestConfig) {\n        return P2pDataControllerApiFp(this.configuration).postCompanyAssociatedP2pData(companyAssociatedDataPathwaysToParisData, bypassQa, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAssociatedDataSfdrData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataAndMetaInformationSfdrData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * SfdrDataControllerApi - axios parameter creator\n * @export\n */\nexport const SfdrDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanySfdrData: async (companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getAllCompanySfdrData', 'companyId', companyId)\n            const localVarPath = `/data/sfdr/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedSfdrData: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getCompanyAssociatedSfdrData', 'dataId', dataId)\n            const localVarPath = `/data/sfdr/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataSfdrData} companyAssociatedDataSfdrData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedSfdrData: async (companyAssociatedDataSfdrData: CompanyAssociatedDataSfdrData, bypassQa?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyAssociatedDataSfdrData' is not null or undefined\n            assertParamExists('postCompanyAssociatedSfdrData', 'companyAssociatedDataSfdrData', companyAssociatedDataSfdrData)\n            const localVarPath = `/data/sfdr`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (bypassQa !== undefined) {\n                localVarQueryParameter['bypassQa'] = bypassQa;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyAssociatedDataSfdrData, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SfdrDataControllerApi - functional programming interface\n * @export\n */\nexport const SfdrDataControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SfdrDataControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllCompanySfdrData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataAndMetaInformationSfdrData>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanySfdrData(companyId, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyAssociatedSfdrData(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAssociatedDataSfdrData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssociatedSfdrData(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataSfdrData} companyAssociatedDataSfdrData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData: CompanyAssociatedDataSfdrData, bypassQa?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData, bypassQa, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SfdrDataControllerApi - factory interface\n * @export\n */\nexport const SfdrDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SfdrDataControllerApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanySfdrData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataAndMetaInformationSfdrData>> {\n            return localVarFp.getAllCompanySfdrData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedSfdrData(dataId: string, options?: any): AxiosPromise<CompanyAssociatedDataSfdrData> {\n            return localVarFp.getCompanyAssociatedSfdrData(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataSfdrData} companyAssociatedDataSfdrData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData: CompanyAssociatedDataSfdrData, bypassQa?: boolean, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData, bypassQa, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SfdrDataControllerApi - interface\n * @export\n * @interface SfdrDataControllerApi\n */\nexport interface SfdrDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SfdrDataControllerApiInterface\n     */\n    getAllCompanySfdrData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataAndMetaInformationSfdrData>>;\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SfdrDataControllerApiInterface\n     */\n    getCompanyAssociatedSfdrData(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedDataSfdrData>;\n\n    /**\n     * \n     * @param {CompanyAssociatedDataSfdrData} companyAssociatedDataSfdrData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SfdrDataControllerApiInterface\n     */\n    postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData: CompanyAssociatedDataSfdrData, bypassQa?: boolean, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n}\n\n/**\n * SfdrDataControllerApi - object-oriented interface\n * @export\n * @class SfdrDataControllerApi\n * @extends {BaseAPI}\n */\nexport class SfdrDataControllerApi extends BaseAPI implements SfdrDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SfdrDataControllerApi\n     */\n    public getAllCompanySfdrData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return SfdrDataControllerApiFp(this.configuration).getAllCompanySfdrData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SfdrDataControllerApi\n     */\n    public getCompanyAssociatedSfdrData(dataId: string, options?: AxiosRequestConfig) {\n        return SfdrDataControllerApiFp(this.configuration).getCompanyAssociatedSfdrData(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CompanyAssociatedDataSfdrData} companyAssociatedDataSfdrData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SfdrDataControllerApi\n     */\n    public postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData: CompanyAssociatedDataSfdrData, bypassQa?: boolean, options?: AxiosRequestConfig) {\n        return SfdrDataControllerApiFp(this.configuration).postCompanyAssociatedSfdrData(companyAssociatedDataSfdrData, bypassQa, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { CompanyAssociatedDataSmeData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataAndMetaInformationSmeData } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { DataMetaInformation } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/backend/model';\n/**\n * SmeDataControllerApi - axios parameter creator\n * @export\n */\nexport const SmeDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanySmeData: async (companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyId' is not null or undefined\n            assertParamExists('getAllCompanySmeData', 'companyId', companyId)\n            const localVarPath = `/data/sme/companies/{companyId}`\n                .replace(`{${\"companyId\"}}`, encodeURIComponent(String(companyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (showOnlyActive !== undefined) {\n                localVarQueryParameter['showOnlyActive'] = showOnlyActive;\n            }\n\n            if (reportingPeriod !== undefined) {\n                localVarQueryParameter['reportingPeriod'] = reportingPeriod;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedSmeData: async (dataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('getCompanyAssociatedSmeData', 'dataId', dataId)\n            const localVarPath = `/data/sme/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataSmeData} companyAssociatedDataSmeData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedSmeData: async (companyAssociatedDataSmeData: CompanyAssociatedDataSmeData, bypassQa?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'companyAssociatedDataSmeData' is not null or undefined\n            assertParamExists('postCompanyAssociatedSmeData', 'companyAssociatedDataSmeData', companyAssociatedDataSmeData)\n            const localVarPath = `/data/sme`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (bypassQa !== undefined) {\n                localVarQueryParameter['bypassQa'] = bypassQa;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(companyAssociatedDataSmeData, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SmeDataControllerApi - functional programming interface\n * @export\n */\nexport const SmeDataControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SmeDataControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllCompanySmeData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataAndMetaInformationSmeData>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanySmeData(companyId, showOnlyActive, reportingPeriod, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCompanyAssociatedSmeData(dataId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyAssociatedDataSmeData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssociatedSmeData(dataId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataSmeData} companyAssociatedDataSmeData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postCompanyAssociatedSmeData(companyAssociatedDataSmeData: CompanyAssociatedDataSmeData, bypassQa?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataMetaInformation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyAssociatedSmeData(companyAssociatedDataSmeData, bypassQa, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SmeDataControllerApi - factory interface\n * @export\n */\nexport const SmeDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SmeDataControllerApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} companyId \n         * @param {boolean} [showOnlyActive] \n         * @param {string} [reportingPeriod] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllCompanySmeData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: any): AxiosPromise<Array<DataAndMetaInformationSmeData>> {\n            return localVarFp.getAllCompanySmeData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} dataId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCompanyAssociatedSmeData(dataId: string, options?: any): AxiosPromise<CompanyAssociatedDataSmeData> {\n            return localVarFp.getCompanyAssociatedSmeData(dataId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CompanyAssociatedDataSmeData} companyAssociatedDataSmeData \n         * @param {boolean} [bypassQa] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postCompanyAssociatedSmeData(companyAssociatedDataSmeData: CompanyAssociatedDataSmeData, bypassQa?: boolean, options?: any): AxiosPromise<DataMetaInformation> {\n            return localVarFp.postCompanyAssociatedSmeData(companyAssociatedDataSmeData, bypassQa, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SmeDataControllerApi - interface\n * @export\n * @interface SmeDataControllerApi\n */\nexport interface SmeDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmeDataControllerApiInterface\n     */\n    getAllCompanySmeData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig): AxiosPromise<Array<DataAndMetaInformationSmeData>>;\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmeDataControllerApiInterface\n     */\n    getCompanyAssociatedSmeData(dataId: string, options?: AxiosRequestConfig): AxiosPromise<CompanyAssociatedDataSmeData>;\n\n    /**\n     * \n     * @param {CompanyAssociatedDataSmeData} companyAssociatedDataSmeData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmeDataControllerApiInterface\n     */\n    postCompanyAssociatedSmeData(companyAssociatedDataSmeData: CompanyAssociatedDataSmeData, bypassQa?: boolean, options?: AxiosRequestConfig): AxiosPromise<DataMetaInformation>;\n\n}\n\n/**\n * SmeDataControllerApi - object-oriented interface\n * @export\n * @class SmeDataControllerApi\n * @extends {BaseAPI}\n */\nexport class SmeDataControllerApi extends BaseAPI implements SmeDataControllerApiInterface {\n    /**\n     * \n     * @param {string} companyId \n     * @param {boolean} [showOnlyActive] \n     * @param {string} [reportingPeriod] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmeDataControllerApi\n     */\n    public getAllCompanySmeData(companyId: string, showOnlyActive?: boolean, reportingPeriod?: string, options?: AxiosRequestConfig) {\n        return SmeDataControllerApiFp(this.configuration).getAllCompanySmeData(companyId, showOnlyActive, reportingPeriod, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} dataId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmeDataControllerApi\n     */\n    public getCompanyAssociatedSmeData(dataId: string, options?: AxiosRequestConfig) {\n        return SmeDataControllerApiFp(this.configuration).getCompanyAssociatedSmeData(dataId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CompanyAssociatedDataSmeData} companyAssociatedDataSmeData \n     * @param {boolean} [bypassQa] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SmeDataControllerApi\n     */\n    public postCompanyAssociatedSmeData(companyAssociatedDataSmeData: CompanyAssociatedDataSmeData, bypassQa?: boolean, options?: AxiosRequestConfig) {\n        return SmeDataControllerApiFp(this.configuration).postCompanyAssociatedSmeData(companyAssociatedDataSmeData, bypassQa, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","<template>\n  <div class=\"middle-center-div\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  name: \"MiddleCenterDiv\",\n});\n</script>\n","<template>\n  <slot v-if=\"authenticated || disableAuthenticationWrapper\"></slot>\n  <MiddleCenterDiv v-else>\n    <h1 class=\"text-justify text-base font-normal\">\n      Checking Log-In status.\n      <i class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n    </h1>\n  </MiddleCenterDiv>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport MiddleCenterDiv from \"@/components/wrapper/MiddleCenterDivWrapper.vue\";\n\nexport default defineComponent({\n  name: \"AuthenticationWrapper\",\n  components: { MiddleCenterDiv },\n  props: {\n    disableAuthenticationWrapper: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n      authenticated: inject<boolean>(\"authenticated\"),\n    };\n  },\n  mounted: function () {\n    if (!this.authenticated && !this.disableAuthenticationWrapper) {\n      assertDefined(this.getKeycloakPromise)()\n        .then((keycloak) => {\n          if (!keycloak.authenticated) {\n            return keycloak.login();\n          }\n        })\n        .catch((error) => console.log(error));\n    }\n  },\n});\n</script>\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Document Manager API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"/documents\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Document Manager API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Document Manager API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { DocumentUploadResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/documentmanager/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/documentmanager/model';\n/**\n * DocumentControllerApi - axios parameter creator\n * @export\n */\nexport const DocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Check for a given document ID (hash) if the document already exists in the database.\n         * @summary Check if a document exists.\n         * @param {string} documentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        checkDocument: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'documentId' is not null or undefined\n            assertParamExists('checkDocument', 'documentId', documentId)\n            const localVarPath = `/{documentId}`\n                .replace(`{${\"documentId\"}}`, encodeURIComponent(String(documentId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Receive a document by its ID from internal storage.\n         * @summary Receive a document.\n         * @param {string} documentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocument: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'documentId' is not null or undefined\n            assertParamExists('getDocument', 'documentId', documentId)\n            const localVarPath = `/{documentId}`\n                .replace(`{${\"documentId\"}}`, encodeURIComponent(String(documentId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload a document and receive meta information\n         * @summary Upload a document.\n         * @param {File} pdfDocument \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postDocument: async (pdfDocument: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pdfDocument' is not null or undefined\n            assertParamExists('postDocument', 'pdfDocument', pdfDocument)\n            const localVarPath = `/`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n            if (pdfDocument !== undefined) { \n                localVarFormParams.append('pdfDocument', pdfDocument as any);\n            }\n    \n    \n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DocumentControllerApi - functional programming interface\n * @export\n */\nexport const DocumentControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DocumentControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Check for a given document ID (hash) if the document already exists in the database.\n         * @summary Check if a document exists.\n         * @param {string} documentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async checkDocument(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.checkDocument(documentId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Receive a document by its ID from internal storage.\n         * @summary Receive a document.\n         * @param {string} documentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDocument(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocument(documentId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload a document and receive meta information\n         * @summary Upload a document.\n         * @param {File} pdfDocument \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postDocument(pdfDocument: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentUploadResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postDocument(pdfDocument, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DocumentControllerApi - factory interface\n * @export\n */\nexport const DocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DocumentControllerApiFp(configuration)\n    return {\n        /**\n         * Check for a given document ID (hash) if the document already exists in the database.\n         * @summary Check if a document exists.\n         * @param {string} documentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        checkDocument(documentId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.checkDocument(documentId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Receive a document by its ID from internal storage.\n         * @summary Receive a document.\n         * @param {string} documentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocument(documentId: string, options?: any): AxiosPromise<File> {\n            return localVarFp.getDocument(documentId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload a document and receive meta information\n         * @summary Upload a document.\n         * @param {File} pdfDocument \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postDocument(pdfDocument: File, options?: any): AxiosPromise<DocumentUploadResponse> {\n            return localVarFp.postDocument(pdfDocument, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DocumentControllerApi - interface\n * @export\n * @interface DocumentControllerApi\n */\nexport interface DocumentControllerApiInterface {\n    /**\n     * Check for a given document ID (hash) if the document already exists in the database.\n     * @summary Check if a document exists.\n     * @param {string} documentId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentControllerApiInterface\n     */\n    checkDocument(documentId: string, options?: AxiosRequestConfig): AxiosPromise<void>;\n\n    /**\n     * Receive a document by its ID from internal storage.\n     * @summary Receive a document.\n     * @param {string} documentId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentControllerApiInterface\n     */\n    getDocument(documentId: string, options?: AxiosRequestConfig): AxiosPromise<File>;\n\n    /**\n     * Upload a document and receive meta information\n     * @summary Upload a document.\n     * @param {File} pdfDocument \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentControllerApiInterface\n     */\n    postDocument(pdfDocument: File, options?: AxiosRequestConfig): AxiosPromise<DocumentUploadResponse>;\n\n}\n\n/**\n * DocumentControllerApi - object-oriented interface\n * @export\n * @class DocumentControllerApi\n * @extends {BaseAPI}\n */\nexport class DocumentControllerApi extends BaseAPI implements DocumentControllerApiInterface {\n    /**\n     * Check for a given document ID (hash) if the document already exists in the database.\n     * @summary Check if a document exists.\n     * @param {string} documentId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentControllerApi\n     */\n    public checkDocument(documentId: string, options?: AxiosRequestConfig) {\n        return DocumentControllerApiFp(this.configuration).checkDocument(documentId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Receive a document by its ID from internal storage.\n     * @summary Receive a document.\n     * @param {string} documentId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentControllerApi\n     */\n    public getDocument(documentId: string, options?: AxiosRequestConfig) {\n        return DocumentControllerApiFp(this.configuration).getDocument(documentId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload a document and receive meta information\n     * @summary Upload a document.\n     * @param {File} pdfDocument \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentControllerApi\n     */\n    public postDocument(pdfDocument: File, options?: AxiosRequestConfig) {\n        return DocumentControllerApiFp(this.configuration).postDocument(pdfDocument, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland QA Service API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"/qa\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland QA Service API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland QA Service API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/qaservice/model';\n// @ts-ignore\nimport { QaStatus } from '../../../../../../org/dataland/datalandfrontend/openApiClient/qaservice/model';\n/**\n * QaControllerApi - axios parameter creator\n * @export\n */\nexport const QaControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Set the quality status after a dataset has been reviewed\n         * @summary Assign a quality status to a unreviewed dataset\n         * @param {string} dataId \n         * @param {QaStatus} qaStatus \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assignQaStatus: async (dataId: string, qaStatus: QaStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dataId' is not null or undefined\n            assertParamExists('assignQaStatus', 'dataId', dataId)\n            // verify required parameter 'qaStatus' is not null or undefined\n            assertParamExists('assignQaStatus', 'qaStatus', qaStatus)\n            const localVarPath = `/datasets/{dataId}`\n                .replace(`{${\"dataId\"}}`, encodeURIComponent(String(dataId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (qaStatus !== undefined) {\n                localVarQueryParameter['qaStatus'] = qaStatus;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a ordered list of dataset IDs which need to be reviewed\n         * @summary Get unreviewed datasets IDs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUnreviewedDatasetsIds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/datasets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * QaControllerApi - functional programming interface\n * @export\n */\nexport const QaControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = QaControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Set the quality status after a dataset has been reviewed\n         * @summary Assign a quality status to a unreviewed dataset\n         * @param {string} dataId \n         * @param {QaStatus} qaStatus \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assignQaStatus(dataId: string, qaStatus: QaStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assignQaStatus(dataId, qaStatus, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Gets a ordered list of dataset IDs which need to be reviewed\n         * @summary Get unreviewed datasets IDs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUnreviewedDatasetsIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnreviewedDatasetsIds(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * QaControllerApi - factory interface\n * @export\n */\nexport const QaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = QaControllerApiFp(configuration)\n    return {\n        /**\n         * Set the quality status after a dataset has been reviewed\n         * @summary Assign a quality status to a unreviewed dataset\n         * @param {string} dataId \n         * @param {QaStatus} qaStatus \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assignQaStatus(dataId: string, qaStatus: QaStatus, options?: any): AxiosPromise<void> {\n            return localVarFp.assignQaStatus(dataId, qaStatus, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Gets a ordered list of dataset IDs which need to be reviewed\n         * @summary Get unreviewed datasets IDs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUnreviewedDatasetsIds(options?: any): AxiosPromise<Array<string>> {\n            return localVarFp.getUnreviewedDatasetsIds(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * QaControllerApi - interface\n * @export\n * @interface QaControllerApi\n */\nexport interface QaControllerApiInterface {\n    /**\n     * Set the quality status after a dataset has been reviewed\n     * @summary Assign a quality status to a unreviewed dataset\n     * @param {string} dataId \n     * @param {QaStatus} qaStatus \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof QaControllerApiInterface\n     */\n    assignQaStatus(dataId: string, qaStatus: QaStatus, options?: AxiosRequestConfig): AxiosPromise<void>;\n\n    /**\n     * Gets a ordered list of dataset IDs which need to be reviewed\n     * @summary Get unreviewed datasets IDs.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof QaControllerApiInterface\n     */\n    getUnreviewedDatasetsIds(options?: AxiosRequestConfig): AxiosPromise<Array<string>>;\n\n}\n\n/**\n * QaControllerApi - object-oriented interface\n * @export\n * @class QaControllerApi\n * @extends {BaseAPI}\n */\nexport class QaControllerApi extends BaseAPI implements QaControllerApiInterface {\n    /**\n     * Set the quality status after a dataset has been reviewed\n     * @summary Assign a quality status to a unreviewed dataset\n     * @param {string} dataId \n     * @param {QaStatus} qaStatus \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof QaControllerApi\n     */\n    public assignQaStatus(dataId: string, qaStatus: QaStatus, options?: AxiosRequestConfig) {\n        return QaControllerApiFp(this.configuration).assignQaStatus(dataId, qaStatus, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Gets a ordered list of dataset IDs which need to be reviewed\n     * @summary Get unreviewed datasets IDs.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof QaControllerApi\n     */\n    public getUnreviewedDatasetsIds(options?: AxiosRequestConfig) {\n        return QaControllerApiFp(this.configuration).getUnreviewedDatasetsIds(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland API key manager API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"http://localhost/api-keys\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland API key manager API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland API key manager API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../../../../../../configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../../../../../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../../../../../base';\n// @ts-ignore\nimport { ApiKeyAndMetaInfo } from '../../../../../../org/dataland/datalandfrontend/openApiClient/apikeymanager/model';\n// @ts-ignore\nimport { ApiKeyMetaInfo } from '../../../../../../org/dataland/datalandfrontend/openApiClient/apikeymanager/model';\n// @ts-ignore\nimport { ErrorResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/apikeymanager/model';\n// @ts-ignore\nimport { RevokeApiKeyResponse } from '../../../../../../org/dataland/datalandfrontend/openApiClient/apikeymanager/model';\n/**\n * ApiKeyControllerApi - axios parameter creator\n * @export\n */\nexport const ApiKeyControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Generates and persists a new API key for the requesting user with an expiry date based on the number of valid days in the request param.\n         * @summary Generate a new API key.\n         * @param {number} [daysValid] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateApiKey: async (daysValid?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/generateApiKey`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n            if (daysValid !== undefined) {\n                localVarQueryParameter['daysValid'] = daysValid;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets meta info about the API key status of a user based on the Keycloak user ID.\n         * @summary Get API key meta info of a specific user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getApiKeyMetaInfoForUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/getApiKeyMetaInfoForUser`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Checks if API key exists in storage for the requesting user and revokes it. If there is no API key registered for the user, this is reported in the response.\n         * @summary Revoke an existing API key.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        revokeApiKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/revokeApiKey`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication default-bearer-auth required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            // authentication default-oauth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"default-oauth\", [], configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Checks if an API key is valid and returns the validation results together with its meta info.\n         * @summary Validate an API key.\n         * @param {string} apiKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validateApiKey: async (apiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'apiKey' is not null or undefined\n            assertParamExists('validateApiKey', 'apiKey', apiKey)\n            const localVarPath = `/validateApiKey`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (apiKey !== undefined) {\n                localVarQueryParameter['apiKey'] = apiKey;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ApiKeyControllerApi - functional programming interface\n * @export\n */\nexport const ApiKeyControllerApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ApiKeyControllerApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Generates and persists a new API key for the requesting user with an expiry date based on the number of valid days in the request param.\n         * @summary Generate a new API key.\n         * @param {number} [daysValid] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async generateApiKey(daysValid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyAndMetaInfo>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.generateApiKey(daysValid, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Gets meta info about the API key status of a user based on the Keycloak user ID.\n         * @summary Get API key meta info of a specific user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getApiKeyMetaInfoForUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyMetaInfo>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeyMetaInfoForUser(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Checks if API key exists in storage for the requesting user and revokes it. If there is no API key registered for the user, this is reported in the response.\n         * @summary Revoke an existing API key.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async revokeApiKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevokeApiKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeApiKey(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Checks if an API key is valid and returns the validation results together with its meta info.\n         * @summary Validate an API key.\n         * @param {string} apiKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async validateApiKey(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyMetaInfo>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.validateApiKey(apiKey, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ApiKeyControllerApi - factory interface\n * @export\n */\nexport const ApiKeyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ApiKeyControllerApiFp(configuration)\n    return {\n        /**\n         * Generates and persists a new API key for the requesting user with an expiry date based on the number of valid days in the request param.\n         * @summary Generate a new API key.\n         * @param {number} [daysValid] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateApiKey(daysValid?: number, options?: any): AxiosPromise<ApiKeyAndMetaInfo> {\n            return localVarFp.generateApiKey(daysValid, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Gets meta info about the API key status of a user based on the Keycloak user ID.\n         * @summary Get API key meta info of a specific user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getApiKeyMetaInfoForUser(options?: any): AxiosPromise<ApiKeyMetaInfo> {\n            return localVarFp.getApiKeyMetaInfoForUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Checks if API key exists in storage for the requesting user and revokes it. If there is no API key registered for the user, this is reported in the response.\n         * @summary Revoke an existing API key.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        revokeApiKey(options?: any): AxiosPromise<RevokeApiKeyResponse> {\n            return localVarFp.revokeApiKey(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Checks if an API key is valid and returns the validation results together with its meta info.\n         * @summary Validate an API key.\n         * @param {string} apiKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validateApiKey(apiKey: string, options?: any): AxiosPromise<ApiKeyMetaInfo> {\n            return localVarFp.validateApiKey(apiKey, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ApiKeyControllerApi - interface\n * @export\n * @interface ApiKeyControllerApi\n */\nexport interface ApiKeyControllerApiInterface {\n    /**\n     * Generates and persists a new API key for the requesting user with an expiry date based on the number of valid days in the request param.\n     * @summary Generate a new API key.\n     * @param {number} [daysValid] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApiInterface\n     */\n    generateApiKey(daysValid?: number, options?: AxiosRequestConfig): AxiosPromise<ApiKeyAndMetaInfo>;\n\n    /**\n     * Gets meta info about the API key status of a user based on the Keycloak user ID.\n     * @summary Get API key meta info of a specific user.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApiInterface\n     */\n    getApiKeyMetaInfoForUser(options?: AxiosRequestConfig): AxiosPromise<ApiKeyMetaInfo>;\n\n    /**\n     * Checks if API key exists in storage for the requesting user and revokes it. If there is no API key registered for the user, this is reported in the response.\n     * @summary Revoke an existing API key.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApiInterface\n     */\n    revokeApiKey(options?: AxiosRequestConfig): AxiosPromise<RevokeApiKeyResponse>;\n\n    /**\n     * Checks if an API key is valid and returns the validation results together with its meta info.\n     * @summary Validate an API key.\n     * @param {string} apiKey \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApiInterface\n     */\n    validateApiKey(apiKey: string, options?: AxiosRequestConfig): AxiosPromise<ApiKeyMetaInfo>;\n\n}\n\n/**\n * ApiKeyControllerApi - object-oriented interface\n * @export\n * @class ApiKeyControllerApi\n * @extends {BaseAPI}\n */\nexport class ApiKeyControllerApi extends BaseAPI implements ApiKeyControllerApiInterface {\n    /**\n     * Generates and persists a new API key for the requesting user with an expiry date based on the number of valid days in the request param.\n     * @summary Generate a new API key.\n     * @param {number} [daysValid] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApi\n     */\n    public generateApiKey(daysValid?: number, options?: AxiosRequestConfig) {\n        return ApiKeyControllerApiFp(this.configuration).generateApiKey(daysValid, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Gets meta info about the API key status of a user based on the Keycloak user ID.\n     * @summary Get API key meta info of a specific user.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApi\n     */\n    public getApiKeyMetaInfoForUser(options?: AxiosRequestConfig) {\n        return ApiKeyControllerApiFp(this.configuration).getApiKeyMetaInfoForUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Checks if API key exists in storage for the requesting user and revokes it. If there is no API key registered for the user, this is reported in the response.\n     * @summary Revoke an existing API key.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApi\n     */\n    public revokeApiKey(options?: AxiosRequestConfig) {\n        return ApiKeyControllerApiFp(this.configuration).revokeApiKey(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Checks if an API key is valid and returns the validation results together with its meta info.\n     * @summary Validate an API key.\n     * @param {string} apiKey \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiKeyControllerApi\n     */\n    public validateApiKey(apiKey: string, options?: AxiosRequestConfig) {\n        return ApiKeyControllerApiFp(this.configuration).validateApiKey(apiKey, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","import { Configuration } from \"@clients/backend/configuration\";\nimport {\n  CompanyDataControllerApi,\n  type CompanyDataControllerApiInterface,\n  EuTaxonomyDataForNonFinancialsControllerApi,\n  type EuTaxonomyDataForNonFinancialsControllerApiInterface,\n  EuTaxonomyDataForFinancialsControllerApi,\n  type EuTaxonomyDataForFinancialsControllerApiInterface,\n  MetaDataControllerApi,\n  type MetaDataControllerApiInterface,\n  LksgDataControllerApi,\n  type LksgDataControllerApiInterface,\n  SfdrDataControllerApi,\n  type SfdrDataControllerApiInterface,\n  type P2pDataControllerApiInterface,\n  P2pDataControllerApi,\n  type SmeDataControllerApiInterface,\n  SmeDataControllerApi,\n  InviteControllerApi,\n} from \"@clients/backend/api\";\nimport { DocumentControllerApi } from \"@clients/documentmanager\";\nimport { QaControllerApi } from \"@clients/qaservice\";\nimport type Keycloak from \"keycloak-js\";\nimport { ApiKeyControllerApi, type ApiKeyControllerApiInterface } from \"@clients/apikeymanager\";\nimport { updateTokenAndItsExpiryTimestampAndStoreBoth } from \"@/utils/SessionTimeoutUtils\";\nexport class ApiClientProvider {\n  keycloakPromise: Promise<Keycloak>;\n\n  constructor(keycloakPromise: Promise<Keycloak>) {\n    this.keycloakPromise = keycloakPromise;\n  }\n\n  async getConfiguration(): Promise<Configuration | undefined> {\n    const keycloak = await this.keycloakPromise;\n    if (keycloak.authenticated) {\n      updateTokenAndItsExpiryTimestampAndStoreBoth(keycloak);\n      return new Configuration({ accessToken: keycloak.token });\n    } else {\n      return undefined;\n    }\n  }\n\n  async getConstructedApi<T>(\n    constructor: new (configuration: Configuration | undefined, basePath: string) => T,\n    basePath = \"/api\",\n  ): Promise<T> {\n    const configuration = await this.getConfiguration();\n    return new constructor(configuration, basePath);\n  }\n\n  async getConstructedDocumentManager<T>(\n    constructor: new (configuration: Configuration | undefined, basePath: string) => T,\n  ): Promise<T> {\n    const configuration = await this.getConfiguration();\n    return new constructor(configuration, \"/documents\");\n  }\n\n  async getCompanyDataControllerApi(): Promise<CompanyDataControllerApiInterface> {\n    return this.getConstructedApi(CompanyDataControllerApi);\n  }\n\n  async getEuTaxonomyDataForNonFinancialsControllerApi(): Promise<EuTaxonomyDataForNonFinancialsControllerApiInterface> {\n    return this.getConstructedApi(EuTaxonomyDataForNonFinancialsControllerApi);\n  }\n\n  async getEuTaxonomyDataForFinancialsControllerApi(): Promise<EuTaxonomyDataForFinancialsControllerApiInterface> {\n    return this.getConstructedApi(EuTaxonomyDataForFinancialsControllerApi);\n  }\n\n  async getMetaDataControllerApi(): Promise<MetaDataControllerApiInterface> {\n    return this.getConstructedApi(MetaDataControllerApi);\n  }\n\n  async getLksgDataControllerApi(): Promise<LksgDataControllerApiInterface> {\n    return this.getConstructedApi(LksgDataControllerApi);\n  }\n\n  async getSfdrDataControllerApi(): Promise<SfdrDataControllerApiInterface> {\n    return this.getConstructedApi(SfdrDataControllerApi);\n  }\n\n  async getP2pDataControllerApi(): Promise<P2pDataControllerApiInterface> {\n    return this.getConstructedApi(P2pDataControllerApi);\n  }\n\n  async getSmeDataControllerApi(): Promise<SmeDataControllerApiInterface> {\n    return this.getConstructedApi(SmeDataControllerApi);\n  }\n\n  async getApiKeyManagerController(): Promise<ApiKeyControllerApiInterface> {\n    return this.getConstructedApi(ApiKeyControllerApi, \"/api-keys\");\n  }\n\n  async getDocumentControllerApi(): Promise<DocumentControllerApi> {\n    return this.getConstructedDocumentManager(DocumentControllerApi);\n  }\n\n  async getInviteControllerApi(): Promise<InviteControllerApi> {\n    return this.getConstructedApi(InviteControllerApi);\n  }\n\n  async getQaControllerApi(): Promise<QaControllerApi> {\n    return this.getConstructedApi(QaControllerApi, \"/qa\");\n  }\n}\n"],"names":["bind","fn","thisArg","toString","getPrototypeOf","kindOf","cache","thing","str","kindOfTest","type","typeOfTest","isArray","isUndefined","isBuffer","val","isFunction","isArrayBuffer","isArrayBufferView","result","isString","isNumber","isObject","isBoolean","isPlainObject","prototype","isDate","isFile","isBlob","isFileList","isStream","isFormData","kind","isURLSearchParams","trim","forEach","obj","allOwnKeys","i","l","keys","len","key","findKey","_key","_global","isContextDefined","context","merge","caseless","assignValue","targetKey","extend","a","b","stripBOM","content","inherits","constructor","superConstructor","props","descriptors","toFlatObject","sourceObj","destObj","filter","propFilter","prop","merged","endsWith","searchString","position","lastIndex","toArray","arr","isTypedArray","TypedArray","forEachEntry","iterator","pair","matchAll","regExp","matches","isHTMLForm","toCamelCase","m","p1","p2","hasOwnProperty","isRegExp","reduceDescriptors","reducer","reducedDescriptors","descriptor","name","ret","freezeMethods","value","toObjectSet","arrayOrString","delimiter","define","noop","toFiniteNumber","defaultValue","ALPHA","DIGIT","ALPHABET","generateString","size","alphabet","length","isSpecCompliantForm","toJSONObject","stack","visit","source","target","reducedValue","isAsyncFn","isThenable","utils","AxiosError","message","code","config","request","response","error","customProps","axiosError","httpAdapter","isVisitable","removeBrackets","renderKey","path","dots","token","isFlatArray","predicates","toFormData","formData","options","option","metaTokens","visitor","defaultVisitor","indexes","useBlob","convertValue","el","index","exposedHelpers","build","encode","charMap","match","AxiosURLSearchParams","params","encoder","_encode","buildURL","url","serializeFn","serializedParams","hashmarkIndex","InterceptorManager","fulfilled","rejected","id","h","InterceptorManager$1","transitionalDefaults","URLSearchParams$1","FormData$1","Blob$1","isStandardBrowserEnv","product","isStandardBrowserWebWorkerEnv","platform","URLSearchParams","FormData","Blob","toURLEncodedForm","data","helpers","parsePropPath","arrayToObject","formDataToJSON","buildPath","isNumericKey","isLast","stringifySafely","rawValue","parser","e","defaults","headers","contentType","hasJSONContentType","isObjectPayload","_FormData","transitional","forcedJSONParsing","JSONRequested","strictJSONParsing","status","method","defaults$1","ignoreDuplicateOf","parseHeaders","rawHeaders","parsed","line","$internals","normalizeHeader","header","normalizeValue","parseTokens","tokens","tokensRE","isValidHeaderName","matchHeaderValue","isHeaderNameFilter","formatHeader","w","char","buildAccessors","accessorName","methodName","arg1","arg2","arg3","AxiosHeaders","valueOrRewrite","rewrite","self","setHeader","_value","_header","_rewrite","lHeader","setHeaders","matcher","deleted","deleteHeader","format","normalized","targets","asStrings","first","computed","accessors","defineAccessor","mapped","headerValue","AxiosHeaders$1","transformData","fns","isCancel","CanceledError","settle","resolve","reject","validateStatus","cookies","expires","domain","secure","cookie","isAbsoluteURL","combineURLs","baseURL","relativeURL","buildFullPath","requestedURL","isURLSameOrigin","msie","urlParsingNode","originURL","resolveURL","href","requestURL","parseProtocol","speedometer","samplesCount","min","bytes","timestamps","head","tail","firstSampleTS","chunkLength","now","startedAt","bytesCount","passed","progressEventReducer","listener","isDownloadStream","bytesNotified","_speedometer","loaded","total","progressBytes","rate","inRange","isXHRAdapterSupported","xhrAdapter","requestData","requestHeaders","responseType","onCanceled","done","username","password","fullPath","onloadend","responseHeaders","err","timeoutErrorMessage","xsrfValue","cancel","protocol","knownAdapters","adapters","nameOrAdapter","adapter","throwIfCancellationRequested","dispatchRequest","reason","headersToObject","mergeConfig","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","configValue","VERSION","validators","deprecatedWarnings","validator","version","formatMessage","opt","desc","opts","assertOptions","schema","allowUnknown","Axios","instanceConfig","configOrUrl","paramsSerializer","contextHeaders","requestInterceptorChain","synchronousRequestInterceptors","interceptor","responseInterceptorChain","promise","chain","newConfig","onFulfilled","onRejected","generateHTTPMethod","isForm","Axios$1","CancelToken","executor","resolvePromise","onfulfilled","_resolve","c","CancelToken$1","spread","callback","isAxiosError","payload","HttpStatusCode","HttpStatusCode$1","createInstance","defaultConfig","instance","axios","promises","globalAxios","BASE_PATH","BaseAPI$3","configuration","basePath","__publicField","field","msg","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","accessToken","setOAuthToObject","scopes","localVarAccessTokenValue","setFlattenedQueryParams","urlSearchParams","parameter","item","currentKey","setSearchParams","objects","searchParams","serializeDataIfNeeded","requestOptions","nonString","toPathString","createRequestFunction","axiosArgs","axiosRequestArgs","CompanyDataControllerApiAxiosParamCreator","identifierType","identifier","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","dataTypes","countryCodes","sectors","onlyCompanyNames","onlyWithDataFromCurrentUser","companyId","companyInformationPatch","companyInformation","CompanyDataControllerApiFp","localVarAxiosParamCreator","localVarAxiosArgs","CompanyDataControllerApi","BaseAPI","EuTaxonomyDataForFinancialsControllerApiAxiosParamCreator","showOnlyActive","reportingPeriod","dataId","companyAssociatedDataEuTaxonomyDataForFinancials","bypassQa","EuTaxonomyDataForFinancialsControllerApiFp","EuTaxonomyDataForFinancialsControllerApi","EuTaxonomyDataForNonFinancialsControllerApiAxiosParamCreator","companyAssociatedDataEuTaxonomyDataForNonFinancials","EuTaxonomyDataForNonFinancialsControllerApiFp","EuTaxonomyDataForNonFinancialsControllerApi","InviteControllerApiAxiosParamCreator","excelFile","localVarFormParams","InviteControllerApiFp","InviteControllerApi","LksgDataControllerApiAxiosParamCreator","companyAssociatedDataLksgData","LksgDataControllerApiFp","LksgDataControllerApi","MetaDataControllerApiAxiosParamCreator","dataType","MetaDataControllerApiFp","MetaDataControllerApi","P2pDataControllerApiAxiosParamCreator","companyAssociatedDataPathwaysToParisData","P2pDataControllerApiFp","P2pDataControllerApi","SfdrDataControllerApiAxiosParamCreator","companyAssociatedDataSfdrData","SfdrDataControllerApiFp","SfdrDataControllerApi","SmeDataControllerApiAxiosParamCreator","companyAssociatedDataSmeData","SmeDataControllerApiFp","SmeDataControllerApi","Configuration","param","mime","jsonMime","_sfc_main$1","defineComponent","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_sfc_main","MiddleCenterDiv","inject","assertDefined","keycloak","_createElementVNode","_createTextVNode","_resolveComponent","_renderSlot","_createBlock","_component_MiddleCenterDiv","_withCtx","BaseAPI$2","DocumentControllerApiAxiosParamCreator","documentId","pdfDocument","DocumentControllerApiFp","DocumentControllerApi","BaseAPI$1","QaControllerApiAxiosParamCreator","qaStatus","QaControllerApiFp","QaControllerApi","ApiKeyControllerApiAxiosParamCreator","daysValid","apiKey","ApiKeyControllerApiFp","ApiKeyControllerApi","ApiClientProvider","keycloakPromise","updateTokenAndItsExpiryTimestampAndStoreBoth"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]}