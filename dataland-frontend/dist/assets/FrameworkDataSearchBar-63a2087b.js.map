{"version":3,"file":"FrameworkDataSearchBar-63a2087b.js","sources":["../../src/utils/SearchCompaniesForFrameworkDataPageDataRequester.ts","../../src/components/resources/frameworkDataSearch/FrameworkDataSearchBar.vue"],"sourcesContent":["/**\n * Module for getting stored companies by sending out an API-call and mapping the received stored companies to a\n * specific schema which is needed on the search page\n */\n\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport {\n  type StoredCompany,\n  type CompanyInformation,\n  type DataMetaInformation,\n  type DataTypeEnum,\n  QaStatus,\n  IdentifierType,\n} from \"@clients/backend\";\nimport type Keycloak from \"keycloak-js\";\nimport { ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE } from \"@/utils/Constants\";\nimport { useFrameworkFiltersStore } from \"@/stores/Stores\";\n\nexport interface DataSearchStoredCompany {\n  companyName: string;\n  companyInformation: CompanyInformation;\n  companyId: string;\n  permId: string;\n  dataRegisteredByDataland: Array<DataMetaInformation>;\n}\n\nexport interface FrameworkDataSearchFilterInterface {\n  companyNameFilter: string;\n  frameworkFilter: Array<DataTypeEnum>;\n  countryCodeFilter: Array<string>;\n  sectorFilter: Array<string>;\n}\n\n/**\n * Retrieve the value of the Perm Id of a company. Throws an exception if no perm id is found\n * @param  {StoredCompany} storedCompany      is the company object for which the Perm Id should be retrieved\n * @returns the perm id retrieved from the company object. Empty string if no perm id is known.\n */\nfunction retrievePermIdFromStoredCompany(storedCompany: StoredCompany): string {\n  const permIdIdentifier = storedCompany.companyInformation.identifiers[IdentifierType.PermId];\n  if (permIdIdentifier.length == 1) {\n    return permIdIdentifier[0];\n  } else if (permIdIdentifier.length == 0) {\n    return \"\";\n  } else {\n    console.error(\"More than one PermId found for a specific company\");\n    return permIdIdentifier[0];\n  }\n}\n\n/**\n * map the received stored companies of an API-call to the required scheme for the search page to display\n * @param  {Array<StoredCompany>} responseData      the received data with the company objects\n * @returns a list of companies in the format expected by the search page\n */\nfunction mapStoredCompanyToFrameworkDataSearchPage(responseData: Array<StoredCompany>): Array<DataSearchStoredCompany> {\n  return responseData.map(\n    (company): DataSearchStoredCompany => ({\n      companyName: company.companyInformation.companyName,\n      companyInformation: company.companyInformation,\n      companyId: company.companyId,\n      permId: retrievePermIdFromStoredCompany(company),\n      dataRegisteredByDataland: company.dataRegisteredByDataland,\n    }),\n  );\n}\n\n/**\n * send out an API-call to get stored companies and map the response to the required scheme for the search page\n * @param  {string} searchString           the string that is used to search companies\n * @param  {boolean} onlyCompanyNames      boolean which decides if the searchString should only be used to query\n *                                         companies by name, or additionally by identifier values\n * @param {Array<string>} frameworkFilter\n *                                         search for companies that hold at least one data set for at least one of\n *                                         the frameworks mentioned in frameworksToFilter and don't filter if\n *                                         frameworksToFilter is empty\n * @param countryCodeFilter                If not empty only companies whose headquarter is in one of the\n *                                         countries specified by the country codes are returned\n * @param sectorFilter                     If not empty only companies whose sector is in the set is returned\n * @param {any} keycloakPromise            a promise to the Keycloak Object for the Frontend\n * @returns the search result companies\n */\nexport async function getCompanyDataForFrameworkDataSearchPage(\n  searchString: string,\n  onlyCompanyNames: boolean,\n  frameworkFilter: Set<DataTypeEnum>,\n  countryCodeFilter: Set<string>,\n  sectorFilter: Set<string>,\n  keycloakPromise: Promise<Keycloak>,\n): Promise<Array<DataSearchStoredCompany>> {\n  let mappedResponse: Array<DataSearchStoredCompany> = [];\n\n  try {\n    const companyDataControllerApi = await new ApiClientProvider(keycloakPromise).getCompanyDataControllerApi();\n    if (frameworkFilter.size === 0) {\n      frameworkFilter = new Set(ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE);\n    }\n\n    const response = await companyDataControllerApi.getCompanies(\n      searchString,\n      frameworkFilter,\n      countryCodeFilter,\n      sectorFilter,\n      onlyCompanyNames,\n    );\n    const responseData: Array<StoredCompany> = response.data;\n    mappedResponse = mapStoredCompanyToFrameworkDataSearchPage(filterCompaniesForAcceptedDataset(responseData));\n  } catch (error) {\n    console.error(error);\n  }\n  return mappedResponse;\n}\n\n/**\n * Filters an array of companies for companies which have at least one data set which may be displayed\n * I.e. a dataset that has quality status \"Accepted\"\n * @param companies the companies to filter\n * @returns the filtered companies\n */\nfunction filterCompaniesForAcceptedDataset(companies: StoredCompany[]): StoredCompany[] {\n  return companies.filter((company) =>\n    company.dataRegisteredByDataland.some((dataMetaInfo) => dataMetaInfo.qaStatus == QaStatus.Accepted),\n  );\n}\n\n/**\n * Generates a router link for the view button on the framework search page, or if an autocomplete suggestion is selected.\n * If no filter is set, or if the number of framework-filters equals the number of all viewable frameworks,\n * it links to the first framework that is included in the data in the company object.\n * Otherwise, it links to the first framework that is included in the currently stored framework filters.\n * @param companyData the company to generate a link for\n * @param selectedFiltersForFrameworks applied framework filters\n * @returns a vue router link to the view page for a specific framework\n */\nexport function getRouterLinkTargetFramework(\n  companyData: DataSearchStoredCompany,\n  selectedFiltersForFrameworks: DataTypeEnum[] = useFrameworkFiltersStore().selectedFiltersForFrameworks,\n): string {\n  const activeDataRegisteredByDataland = companyData.dataRegisteredByDataland.filter(\n    (dataMetaInfo: DataMetaInformation) => dataMetaInfo.currentlyActive,\n  );\n  const actuallySelectedFiltersForFrameworks =\n    selectedFiltersForFrameworks.length == 0 ? ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE : selectedFiltersForFrameworks;\n  const frameworkToRouteTo = activeDataRegisteredByDataland.find((dataMetaInfo) =>\n    actuallySelectedFiltersForFrameworks.includes(dataMetaInfo.dataType),\n  )?.dataType;\n  if (frameworkToRouteTo) {\n    return `/companies/${companyData.companyId}/frameworks/${frameworkToRouteTo}`;\n  } else {\n    throw new Error(\n      \"No data meta info for the frameworks set in the filters could be found in the data of the server response.\",\n    );\n  }\n}\n","<template>\n  <div class=\"grid\">\n    <div class=\"col-8 text-left\">\n      <span class=\"p-fluid\">\n        <span class=\"p-input-icon-left p-input-icon-right\">\n          <i\n            class=\"pi pi-search d-framework-searchbar-input-icon\"\n            aria-hidden=\"true\"\n            style=\"z-index: 20; color: #958d7c\"\n          />\n          <AutoComplete\n            :inputId=\"searchBarId\"\n            ref=\"autocomplete\"\n            v-model=\"searchBarInput\"\n            :suggestions=\"autocompleteArrayDisplayed\"\n            optionLabel=\"companyName\"\n            :autoOptionFocus=\"false\"\n            placeholder=\"Search company by name or PermID\"\n            inputClass=\"h-3rem d-framework-searchbar-input\"\n            panelClass=\"d-framework-searchbar-panel\"\n            style=\"z-index: 10\"\n            @complete=\"searchCompanyName\"\n            @keydown=\"noteThatAKeyWasPressed\"\n            @keydown.down=\"getCurrentFocusedOptionIndex\"\n            @keydown.up=\"getCurrentFocusedOptionIndex\"\n            @item-select=\"handleItemSelect\"\n            @keyup.enter=\"executeSearchIfNoItemFocused\"\n            @focus=\"setCurrentFocusedOptionIndexToDefault\"\n          >\n            <template #option=\"slotProps\">\n              <i class=\"pi pi-search pl-3 pr-3\" aria-hidden=\"true\" />\n              <SearchResultHighlighter :text=\"slotProps.option.companyName\" :searchString=\"latestValidSearchString\" />\n            </template>\n\n            <template #footer>\n              <ul\n                class=\"p-autocomplete-items pt-0\"\n                v-if=\"autocompleteArray && autocompleteArray.length >= maxNumOfDisplayedAutocompleteEntries\"\n              >\n                <li class=\"p-autocomplete-item\" @click=\"executeSearchIfNoItemFocused\">\n                  <span class=\"text-primary font-medium underline pl-3\"> View all results </span>\n                </li>\n              </ul>\n            </template>\n          </AutoComplete>\n        </span>\n      </span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport AutoComplete from \"primevue/autocomplete\";\nimport SearchResultHighlighter from \"@/components/resources/frameworkDataSearch/SearchResultHighlighter.vue\";\nimport {\n  type DataSearchStoredCompany,\n  getCompanyDataForFrameworkDataSearchPage,\n  getRouterLinkTargetFramework,\n  type FrameworkDataSearchFilterInterface,\n} from \"@/utils/SearchCompaniesForFrameworkDataPageDataRequester\";\nimport { defineComponent, inject, ref } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { useRoute } from \"vue-router\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE } from \"@/utils/Constants\";\n\nexport default defineComponent({\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n      autocomplete: ref<HTMLFormElement>(),\n    };\n  },\n  name: \"FrameworkDataSearchBar\",\n  components: { AutoComplete, SearchResultHighlighter },\n\n  emits: [\"companies-received\", \"search-confirmed\"],\n\n  props: {\n    companyIdIfOnViewPage: {\n      type: String,\n    },\n    searchBarId: {\n      type: String,\n      default: \"framework_data_search_bar_standard\",\n    },\n    filter: {\n      type: Object as () => FrameworkDataSearchFilterInterface,\n      default(): FrameworkDataSearchFilterInterface {\n        return {\n          companyNameFilter: \"\",\n          frameworkFilter: ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE,\n          sectorFilter: [],\n          countryCodeFilter: [],\n        };\n      },\n    },\n    maxNumOfDisplayedAutocompleteEntries: {\n      type: Number,\n      default: 3,\n    },\n    emitSearchResultsArray: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    this.searchBarInput = this.filter?.companyNameFilter ?? \"\";\n    void this.queryCompany();\n    if (!this.route.query.input) {\n      this.focusOnSearchBar();\n    }\n  },\n\n  watch: {\n    searchBarId() {\n      this.focusOnSearchBar();\n    },\n    searchBarInput(newValue: string) {\n      this.saveCurrentSearchStringIfValid(newValue);\n    },\n    filter: {\n      handler() {\n        this.searchBarInput = this.filter?.companyNameFilter ?? \"\";\n        void this.queryCompany();\n      },\n      deep: true,\n    },\n  },\n\n  data: function () {\n    return {\n      wereKeysPressed: false,\n      currentFocusedOptionIndex: -1,\n      searchBarInput: \"\",\n      latestValidSearchString: \"\",\n      autocompleteArray: [] as Array<object>,\n      autocompleteArrayDisplayed: [] as Array<object>,\n      route: useRoute(),\n    };\n  },\n  methods: {\n    /**\n     * Sets the wereKeysPressed variable to true\n     */\n    noteThatAKeyWasPressed() {\n      this.wereKeysPressed = true;\n    },\n\n    /**\n     * Updates the local search string if the new search string is well-defined\n     * @param currentSearchString the potentially new search string\n     */\n    saveCurrentSearchStringIfValid(currentSearchString: string | object) {\n      if (currentSearchString && typeof currentSearchString === \"string\") {\n        this.latestValidSearchString = currentSearchString;\n      }\n    },\n\n    /**\n     * Called on button presses of the up/down keys and updates the index of the currently selected element.\n     */\n    getCurrentFocusedOptionIndex() {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      this.currentFocusedOptionIndex = this.autocomplete.focusedOptionIndex as number;\n    },\n\n    /**\n     * Resets the currently selected index variable\n     */\n    setCurrentFocusedOptionIndexToDefault() {\n      this.currentFocusedOptionIndex = -1;\n    },\n\n    /**\n     * Focuses the search bar\n     */\n    focusOnSearchBar() {\n      const autocompleteRefsObject = this.autocomplete?.$refs as Record<string, unknown>;\n      const inputOfAutocompleteComponent = autocompleteRefsObject.focusInput as HTMLInputElement;\n      inputOfAutocompleteComponent.focus();\n    },\n\n    /**\n     * Called when an item is selected from the dropdown. Navigates to the view framework page for the selected company\n     * @param event the click event\n     * @param event.value the company that was clicked on\n     */\n    handleItemSelect(event: { value: DataSearchStoredCompany }) {\n      if (this.companyIdIfOnViewPage != event.value.companyId) {\n        void this.$router.push(getRouterLinkTargetFramework(event.value));\n      } else {\n        this.searchBarInput = event.value.companyName;\n      }\n    },\n\n    /**\n     * Called when enter is pressed in the search bar. Performs a company search with the new search bar text\n     * if no specific company is highlighted\n     */\n    executeSearchIfNoItemFocused() {\n      if (this.currentFocusedOptionIndex === -1 && this.wereKeysPressed) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        this.autocomplete.hide();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        this.autocomplete.$refs.focusInput.blur();\n        this.$emit(\"search-confirmed\", this.searchBarInput);\n        void this.queryCompany();\n      }\n    },\n    /**\n     * Performs the company search if the parent component indicated it wants to receive the complete search results\n     */\n    async queryCompany() {\n      if (this.emitSearchResultsArray) {\n        const resultsArray = await getCompanyDataForFrameworkDataSearchPage(\n          this.searchBarInput,\n          false,\n          new Set(this.filter?.frameworkFilter),\n          new Set(this.filter?.countryCodeFilter),\n          new Set(this.filter?.sectorFilter),\n          assertDefined(this.getKeycloakPromise)(),\n        );\n        this.$emit(\"companies-received\", resultsArray);\n      }\n    },\n    /**\n     * This function is called to obtain search suggestions for the dropdown. Uses the Dataland API to search\n     * companies by the current search bar input (and selected filters).\n     * @param companyName the autocomplete suggestion event\n     * @param companyName.query the query text entered into the search bar\n     */\n    async searchCompanyName(companyName: { query: string }) {\n      this.autocompleteArray = await getCompanyDataForFrameworkDataSearchPage(\n        companyName.query,\n        true,\n        new Set(this.filter?.frameworkFilter),\n        new Set(this.filter?.countryCodeFilter),\n        new Set(this.filter?.sectorFilter),\n        assertDefined(this.getKeycloakPromise)(),\n      );\n      this.autocompleteArrayDisplayed = this.autocompleteArray.slice(0, this.maxNumOfDisplayedAutocompleteEntries);\n    },\n  },\n});\n</script>\n"],"names":["retrievePermIdFromStoredCompany","storedCompany","permIdIdentifier","IdentifierType","mapStoredCompanyToFrameworkDataSearchPage","responseData","company","getCompanyDataForFrameworkDataSearchPage","searchString","onlyCompanyNames","frameworkFilter","countryCodeFilter","sectorFilter","keycloakPromise","mappedResponse","companyDataControllerApi","ApiClientProvider","ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE","filterCompaniesForAcceptedDataset","error","companies","dataMetaInfo","QaStatus","getRouterLinkTargetFramework","companyData","selectedFiltersForFrameworks","useFrameworkFiltersStore","activeDataRegisteredByDataland","actuallySelectedFiltersForFrameworks","frameworkToRouteTo","_a","_sfc_main","defineComponent","inject","ref","AutoComplete","SearchResultHighlighter","newValue","useRoute","currentSearchString","event","resultsArray","_b","_c","assertDefined","companyName","_hoisted_3","_hoisted_4","_hoisted_5","_createElementVNode","_hoisted_6","_hoisted_7","_hoisted_8","_resolveComponent","_openBlock","_createElementBlock","_hoisted_1","_hoisted_2","_component_AutoComplete","_ctx","_cache","$event","_withKeys","_withCtx","slotProps","_component_SearchResultHighlighter"],"mappings":"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"}