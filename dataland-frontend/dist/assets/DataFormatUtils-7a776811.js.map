{"version":3,"file":"DataFormatUtils-7a776811.js","sources":["../../src/utils/DataFormatUtils.ts"],"sourcesContent":["import { MS_PER_DAY } from \"@/utils/Constants\";\n\nexport const dateFormatOptions = {\n  weekday: \"short\",\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n} as Intl.DateTimeFormatOptions;\n\n/**\n * Given a unix time in milliseconds calculates how many days the timestamp is in the future (rounding up)\n * @param endDateInMilliseconds the unix time in milliseconds to\n * @returns the number of days until endDateInMilliseconds (rounding up)\n */\nexport function calculateDaysFromNow(endDateInMilliseconds: number): number {\n  const currentUtcDateInMilliseconds = new Date().getTime();\n  const daysFromNow = (endDateInMilliseconds - currentUtcDateInMilliseconds) / MS_PER_DAY;\n  return Math.ceil(daysFromNow);\n}\n\n/**\n * Transforms the given unix time in milliseconds to a date string\n * @param unixTimeInMs the unix time in milliseconds\n * @returns a date string representing the given unix time\n */\nexport function convertUnixTimeInMsToDateString(unixTimeInMs: number): string {\n  return new Date(unixTimeInMs).toLocaleDateString(\"en-gb\", dateFormatOptions);\n}\n\n/**\n * Calculates an expiry date in the future based on the number of valid days from now\n * @param expiryTimeDays the time in days to move into the future\n * @returns the resulting expiry date in the future in the format of \"Wed, 25 Jan 2023, 10:38\"\n */\nexport function calculateExpiryDateAsDateString(expiryTimeDays: number): string {\n  const currentUtcDateInMilliseconds = new Date().getTime();\n  const expiryUtcDateInMilliseconds = currentUtcDateInMilliseconds + expiryTimeDays * MS_PER_DAY;\n  return convertUnixTimeInMsToDateString(expiryUtcDateInMilliseconds);\n}\n\n/**\n * Computes a hyphenated string (yyyy-MM-dd) of a date.\n * Since the toISOString()-method takes the UTC-timeoffset of the user into account, that offset needs to be substracted\n * in the step before. This makes sure that the resulting Date object has the time 00:00 on the picked day again.\n * @param date the date to hyphenate\n * @returns the hyphenated date string\n */\nexport function getHyphenatedDate(date: Date): string {\n  const timeZoneOffsetBetweenLocalAndUtcInMs = date.getTimezoneOffset() * 60 * 1000;\n  const dateInEpochMsMinusTimezoneOffset = date.getTime() - timeZoneOffsetBetweenLocalAndUtcInMs;\n  return new Date(dateInEpochMsMinusTimezoneOffset).toISOString().substring(0, 10);\n}\n"],"names":["dateFormatOptions","calculateDaysFromNow","endDateInMilliseconds","currentUtcDateInMilliseconds","daysFromNow","MS_PER_DAY","convertUnixTimeInMsToDateString","unixTimeInMs","calculateExpiryDateAsDateString","expiryTimeDays","expiryUtcDateInMilliseconds","getHyphenatedDate","date","timeZoneOffsetBetweenLocalAndUtcInMs","dateInEpochMsMinusTimezoneOffset"],"mappings":"wCAEO,MAAMA,EAAoB,CAC/B,QAAS,QACT,KAAM,UACN,MAAO,QACP,IAAK,UACL,KAAM,UACN,OAAQ,SACV,EAOO,SAASC,EAAqBC,EAAuC,CAC1E,MAAMC,EAA+B,IAAI,KAAK,EAAE,QAAQ,EAClDC,GAAeF,EAAwBC,GAAgCE,EACtE,OAAA,KAAK,KAAKD,CAAW,CAC9B,CAOO,SAASE,EAAgCC,EAA8B,CAC5E,OAAO,IAAI,KAAKA,CAAY,EAAE,mBAAmB,QAASP,CAAiB,CAC7E,CAOO,SAASQ,EAAgCC,EAAgC,CAExE,MAAAC,EAD+B,IAAI,KAAK,EAAE,QAAQ,EACWD,EAAiBJ,EACpF,OAAOC,EAAgCI,CAA2B,CACpE,CASO,SAASC,EAAkBC,EAAoB,CACpD,MAAMC,EAAuCD,EAAK,kBAAkB,EAAI,GAAK,IACvEE,EAAmCF,EAAK,QAAA,EAAYC,EACnD,OAAA,IAAI,KAAKC,CAAgC,EAAE,YAAc,EAAA,UAAU,EAAG,EAAE,CACjF"}