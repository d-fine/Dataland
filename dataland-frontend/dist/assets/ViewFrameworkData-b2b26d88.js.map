{"version":3,"file":"ViewFrameworkData-b2b26d88.js","sources":["../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/model/fiscal-year-deviation.ts","../../build/clients/backend/org/dataland/datalandfrontend/openApiClient/backend/model/yes-no.ts","../../src/utils/DataTableDisplay.ts","../../src/components/general/SelectReportingPeriodDialog.vue","../../src/components/generics/ViewFrameworkBase.vue","../../src/utils/CurrencyConverter.ts","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxoCard.vue","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxoInfoCard.vue","../../src/components/resources/frameworkDataSearch/DocumentLink.vue","../../src/components/resources/frameworkDataSearch/ShowReportsBanner.vue","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyPanelFinancials.vue","../../src/components/resources/frameworkDataSearch/DatasetDisplayStatusIndicator.vue","../../src/components/generics/ViewSingleDatasetDisplayBase.vue","../../src/components/resources/frameworkDataSearch/PanelComponentOptions.ts","../../src/components/general/DetailsCompanyDataTable.vue","../../node_modules/primevue/columngroup/columngroup.esm.js","../../node_modules/primevue/row/row.esm.js","../../src/components/resources/frameworkDataSearch/euTaxonomy/ActivityName.ts","../../src/utils/Formatter.ts","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsModalColumnHeaders.ts","../../src/components/general/AlignedActivitiesDataTable.vue","../../src/components/general/NonAlignedActivitiesDataTable.vue","../../src/components/resources/frameworkDataSearch/TwoLayerDataTable.vue","../../src/components/resources/frameworkDataSearch/lksg/LksgModalColumnHeaders.ts","../../src/components/resources/frameworkDataSearch/lksg/LksgPanel.vue","../../src/components/general/SfdrDataTable.vue","../../src/components/resources/frameworkDataSearch/sfdr/DataModelsTranslations.ts","../../src/components/resources/frameworkDataSearch/sfdr/SfdrPanel.vue","../../src/components/resources/frameworkDataSearch/ThreeLayerDataTable.vue","../../src/components/resources/ViewModel.ts","../../src/components/resources/frameworkDataSearch/p2p/P2pFormatValueForDisplay.ts","../../src/components/resources/frameworkDataSearch/p2p/P2pPanel.vue","../../src/components/resources/frameworkDataSearch/sme/SmeDataModel.ts","../../src/components/resources/frameworkDataSearch/sme/SmeModalColumnHeaders.ts","../../src/components/resources/frameworkDataSearch/sme/SmePanel.vue","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsDisplayDataModel.ts","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsViewModel.ts","../../src/components/resources/frameworkDataSearch/PreviousReportsModal.vue","../../src/components/resources/frameworkDataSearch/ShowMultipleReportsBanner.vue","../../src/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsPanel.vue","../../src/components/generics/ViewMultipleDatasetsDisplayBase.vue","../../src/components/pages/ViewFrameworkData.vue"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const FiscalYearDeviation = {\n    Deviation: 'Deviation',\n    NoDeviation: 'NoDeviation'\n} as const;\n\nexport type FiscalYearDeviation = typeof FiscalYearDeviation[keyof typeof FiscalYearDeviation];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Dataland Backend API documentation\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const YesNo = {\n    Yes: 'Yes',\n    No: 'No'\n} as const;\n\nexport type YesNo = typeof YesNo[keyof typeof YesNo];\n\n\n\n","/**\n * Sorts dates to ensure that Sfdr and LkSG datasets are displayed chronologically in the table in terms of reporting\n * periods (strings starting with numbers should at least be listed before those that do not)\n * @param  listOfDataDateToDisplayAsColumns list of objects to sort\n * Shortens the test-function and avoids code duplications.\n * @returns list of sorted objects\n */\nexport function sortReportingPeriodsToDisplayAsColumns(\n  listOfDataDateToDisplayAsColumns: ReportingPeriodOfDataSetWithId[],\n): ReportingPeriodOfDataSetWithId[] {\n  return listOfDataDateToDisplayAsColumns.sort((dataSetA, dataSetB) =>\n    compareReportingPeriods(dataSetA.reportingPeriod, dataSetB.reportingPeriod),\n  );\n}\n\n/**\n * Compares two reporting periods for sorting\n * @param firstReportingPeriod the first reporting period to compare\n * @param secondReportingPeriod the reporting period to compare with\n * @returns 1 if the first reporting period should be sorted after to the second one else -1\n */\nexport function compareReportingPeriods(firstReportingPeriod: string, secondReportingPeriod: string): number {\n  if (!isNaN(Number(firstReportingPeriod)) && !isNaN(Number(secondReportingPeriod))) {\n    if (Number(firstReportingPeriod) < Number(secondReportingPeriod)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else if (!isNaN(Number(firstReportingPeriod))) {\n    return -1;\n  } else if (!isNaN(Number(secondReportingPeriod))) {\n    return 1;\n  } else if (firstReportingPeriod > secondReportingPeriod) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\nexport type ReportingPeriodOfDataSetWithId = {\n  dataId: string;\n  reportingPeriod: string;\n};\n\nconst buttonRowHeaderId = \"row-header-id\";\n\n/**\n * Adds click event listeners on DataTable row headers to expand and collapse row\n * @param dataTableIdentifier id of parent DataTable element from where we are mounting\n * @param expandedRowsOnClick function passes the latest list of expanded row id's\n * @param newExpandedRowsCallback function that returns the updated (after click) list of expanded row id's\n * @returns the map of rows and their click handlers needed for unmounting\n */\nexport function mountRowHeaderClickEventListeners(\n  dataTableIdentifier: string,\n  expandedRowsOnClick: () => string[],\n  newExpandedRowsCallback: (newExpandedRows: string[]) => void,\n): Map<Element, EventListener> {\n  const handlerMap: Map<Element, EventListener> = new Map();\n  let expandedRowGroups: string[] = [];\n  const rowHeaders = Array.from(\n    document.querySelectorAll(`[data-table-id=\"${dataTableIdentifier}\"][data-row-header-click]`),\n  );\n  const rowButtons = rowHeaders\n    .map((rowHeader: Element) => {\n      const button = rowHeader.parentNode?.querySelector('button[data-pc-section=\"rowgrouptoggler\"]');\n      if (button) {\n        button.setAttribute(buttonRowHeaderId, rowHeader.id);\n        return button;\n      }\n      return void 0;\n    })\n    .filter((button): button is HTMLButtonElement => !!button);\n\n  [...rowHeaders, ...rowButtons].forEach((el: Element) => {\n    const clickHandler: EventListener | null = (evt): void => {\n      if (el.getAttribute(buttonRowHeaderId)) {\n        evt.stopImmediatePropagation();\n        return;\n      }\n      expandedRowGroups = expandedRowsOnClick();\n      if (!expandedRowGroups.includes(el.id)) {\n        expandedRowGroups.push(el.id);\n      } else {\n        expandedRowGroups = expandedRowGroups.filter((id: string) => id !== el.id);\n      }\n      newExpandedRowsCallback(expandedRowGroups);\n    };\n\n    let target;\n    if (el.getAttribute(buttonRowHeaderId)) {\n      target = el;\n    } else {\n      target = el.parentNode;\n    }\n    if (target) {\n      handlerMap.set(target as Element, clickHandler);\n      target.addEventListener(\"click\", clickHandler);\n    }\n  });\n  return handlerMap;\n}\n\n/**\n *\n * @param handlerMap the map of rows and their click handlers that need to be looped and have their event listeners removed\n */\nexport function unmountRowHeaderClickEventListeners(handlerMap: Map<Element, EventListener>): void {\n  const buttonAttributeName = \"data-parent-id\";\n  handlerMap.forEach((clickHandler: EventListener | null, el: Element) => {\n    if (el?.getAttribute(buttonAttributeName)) {\n      el.removeEventListener(\"click\", clickHandler as EventListener);\n    } else {\n      el.parentNode?.removeEventListener(\"click\", clickHandler);\n    }\n    handlerMap.delete(el);\n  });\n}\n","<template>\n  <div data-test=\"select-reporting-period-dialog\">\n    <h4 class=\"title\">SELECT YEAR</h4>\n    <div class=\"three-in-row\" data-test=\"reporting-periods\">\n      <router-link v-for=\"(el, index) in dataTableContents\" :key=\"index\" class=\"link\" :to=\"el.editUrl\">{{\n        el.reportingPeriod\n      }}</router-link>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport { type DataMetaInformation } from \"@clients/backend\";\nimport { compareReportingPeriods } from \"@/utils/DataTableDisplay\";\n\ninterface ReportingPeriodTableEntry {\n  reportingPeriod: string;\n  editUrl: string;\n}\n\nexport default defineComponent({\n  name: \"SelectReportingPeriodDialog\",\n  data() {\n    return {\n      dataTableContents: [] as ReportingPeriodTableEntry[],\n    };\n  },\n  props: {\n    mapOfReportingPeriodToActiveDataset: {\n      type: Map,\n    },\n  },\n  mounted() {\n    this.setReportingPeriodDataTableContents();\n  },\n  methods: {\n    /**\n     * It extracts data from Dataset and builds a link to edit the report on its basis\n     *\n     */\n    setReportingPeriodDataTableContents(): void {\n      if (this.mapOfReportingPeriodToActiveDataset) {\n        const sortedReportingPeriodMetaInfoPairs = Array.from(\n          (this.mapOfReportingPeriodToActiveDataset as Map<string, DataMetaInformation>).entries(),\n        ).sort((firstEl, secondEl) => compareReportingPeriods(firstEl[0], secondEl[0]));\n        for (const [key, value] of sortedReportingPeriodMetaInfoPairs) {\n          this.dataTableContents.push({\n            reportingPeriod: key,\n            editUrl: `/companies/${value.companyId}/frameworks/${value.dataType}/upload?templateDataId=${value.dataId}`,\n          });\n        }\n      }\n    },\n  },\n});\n</script>\n","<template>\n  <TheHeader :showUserProfileDropdown=\"!viewInPreviewMode\" />\n  <TheContent class=\"paper-section min-h-screen\">\n    <MarginWrapper class=\"text-left surface-0\" style=\"margin-right: 0\">\n      <BackButton />\n      <FrameworkDataSearchBar\n        v-if=\"!viewInPreviewMode\"\n        :companyIdIfOnViewPage=\"companyID\"\n        class=\"mt-2\"\n        ref=\"frameworkDataSearchBar\"\n        @search-confirmed=\"handleSearchConfirm\"\n      />\n    </MarginWrapper>\n    <MarginWrapper class=\"surface-0\" style=\"margin-right: 0\">\n      <div class=\"grid align-items-end\">\n        <div class=\"col-9\">\n          <CompanyInformation :companyID=\"companyID\" />\n        </div>\n      </div>\n    </MarginWrapper>\n    <div v-if=\"isDataProcessedSuccesfully\">\n      <MarginWrapper class=\"text-left surface-0\" style=\"margin-right: 0\">\n        <div class=\"flex justify-content-between align-items-center d-search-filters-panel\">\n          <div class=\"flex\">\n            <Dropdown\n              id=\"chooseFrameworkDropdown\"\n              v-model=\"chosenDataTypeInDropdown\"\n              :options=\"dataTypesInDropdown\"\n              optionLabel=\"label\"\n              optionValue=\"value\"\n              :placeholder=\"humanizeString(dataType)\"\n              aria-label=\"Choose framework\"\n              class=\"fill-dropdown always-fill\"\n              dropdownIcon=\"pi pi-angle-down\"\n              @change=\"handleChangeFrameworkEvent\"\n            />\n            <slot name=\"reportingPeriodDropdown\"></slot>\n          </div>\n          <div v-if=\"hasUserUploaderRights\" class=\"flex align-content-end align-items-center\">\n            <PrimeButton\n              v-if=\"canEdit\"\n              class=\"uppercase p-button-outlined p-button p-button-sm d-letters mr-3\"\n              aria-label=\"EDIT DATA\"\n              @click=\"editDataset\"\n              data-test=\"editDatasetButton\"\n            >\n              <span class=\"px-2\">EDIT DATA</span>\n              <span\n                v-if=\"mapOfReportingPeriodToActiveDataset.size > 1 && !singleDataMetaInfoToDisplay\"\n                class=\"material-icons-outlined\"\n                >arrow_drop_down</span\n              >\n            </PrimeButton>\n            <router-link :to=\"addNewDatasetLinkTarget\" class=\"no-underline\" data-test=\"gotoNewDatasetButton\">\n              <PrimeButton class=\"uppercase p-button-sm d-letters\" aria-label=\"New Dataset\">\n                <span class=\"material-icons-outlined px-2\">queue</span>\n                <span class=\"px-2\">NEW DATASET</span>\n              </PrimeButton>\n            </router-link>\n          </div>\n          <OverlayPanel ref=\"reportingPeriodsOverlayPanel\">\n            <SelectReportingPeriodDialog :mapOfReportingPeriodToActiveDataset=\"mapOfReportingPeriodToActiveDataset\" />\n          </OverlayPanel>\n        </div>\n      </MarginWrapper>\n      <MarginWrapper style=\"margin-right: 0\">\n        <slot name=\"content\"></slot>\n      </MarginWrapper>\n    </div>\n    <h1 v-else data-test=\"noDataCouldBeLoadedErrorIndicator\">No data could be loaded.</h1>\n  </TheContent>\n  <TheFooter />\n</template>\n\n<script lang=\"ts\">\nimport BackButton from \"@/components/general/BackButton.vue\";\nimport TheContent from \"@/components/generics/TheContent.vue\";\nimport TheHeader from \"@/components/generics/TheHeader.vue\";\nimport CompanyInformation from \"@/components/pages/CompanyInformation.vue\";\nimport FrameworkDataSearchBar from \"@/components/resources/frameworkDataSearch/FrameworkDataSearchBar.vue\";\nimport MarginWrapper from \"@/components/wrapper/MarginWrapper.vue\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport type Keycloak from \"keycloak-js\";\nimport PrimeButton from \"primevue/button\";\nimport Dropdown, { type DropdownChangeEvent } from \"primevue/dropdown\";\nimport { defineComponent, inject, ref } from \"vue\";\n\nimport TheFooter from \"@/components/general/TheFooter.vue\";\nimport { ARRAY_OF_FRAMEWORKS_WITH_UPLOAD_FORM, ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE } from \"@/utils/Constants\";\nimport { KEYCLOAK_ROLE_UPLOADER, checkIfUserHasRole } from \"@/utils/KeycloakUtils\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport { type DataMetaInformation, type DataTypeEnum } from \"@clients/backend\";\n\nimport SelectReportingPeriodDialog from \"@/components/general/SelectReportingPeriodDialog.vue\";\nimport OverlayPanel from \"primevue/overlaypanel\";\n\nexport default defineComponent({\n  name: \"ViewFrameworkBase\",\n  components: {\n    TheContent,\n    TheHeader,\n    BackButton,\n    MarginWrapper,\n    FrameworkDataSearchBar,\n    Dropdown,\n    CompanyInformation,\n    TheFooter,\n    PrimeButton,\n    OverlayPanel,\n    SelectReportingPeriodDialog,\n  },\n  emits: [\"updateActiveDataMetaInfoForChosenFramework\"],\n  props: {\n    companyID: {\n      type: String,\n    },\n    dataType: {\n      type: String,\n    },\n    singleDataMetaInfoToDisplay: {\n      type: Object as () => DataMetaInformation,\n      required: false,\n    },\n    viewInPreviewMode: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n      frameworkDataSearchBar: ref<typeof FrameworkDataSearchBar>(),\n    };\n  },\n  data() {\n    return {\n      chosenDataTypeInDropdown: \"\",\n      dataTypesInDropdown: [] as { label: string; value: string }[],\n      humanizeString: humanizeStringOrNumber,\n      windowScrollHandler: (): void => {\n        this.handleScroll();\n      },\n      mapOfReportingPeriodToActiveDataset: new Map<string, DataMetaInformation>(),\n      isDataProcessedSuccesfully: true,\n      hasUserUploaderRights: undefined,\n    };\n  },\n  computed: {\n    canEdit() {\n      return (\n        ARRAY_OF_FRAMEWORKS_WITH_UPLOAD_FORM.includes(this.dataType as DataTypeEnum) &&\n        (!this.singleDataMetaInfoToDisplay ||\n          this.singleDataMetaInfoToDisplay.currentlyActive ||\n          this.singleDataMetaInfoToDisplay.qaStatus === \"Rejected\")\n      );\n    },\n    addNewDatasetLinkTarget() {\n      return `/companies/${this.companyID ?? \"\"}/frameworks/upload`;\n    },\n  },\n  created() {\n    this.chosenDataTypeInDropdown = this.dataType ?? \"\";\n    void this.getFrameworkDropdownOptionsAndActiveDataMetaInfoForEmit();\n    checkIfUserHasRole(KEYCLOAK_ROLE_UPLOADER, this.getKeycloakPromise)\n      .then((hasUserUploaderRights) => {\n        this.hasUserUploaderRights = hasUserUploaderRights;\n      })\n      .catch((error) => console.log(error));\n    window.addEventListener(\"scroll\", this.windowScrollHandler);\n  },\n  methods: {\n    /**\n     * Opens Overlay Panel for selecting a reporting period to edit data for\n     * @param event event\n     */\n    editDataset(event: Event) {\n      if (this.singleDataMetaInfoToDisplay) {\n        this.gotoUpdateForm(\n          this.singleDataMetaInfoToDisplay.companyId,\n          this.singleDataMetaInfoToDisplay.dataType,\n          this.singleDataMetaInfoToDisplay.dataId,\n        );\n      } else if (this.mapOfReportingPeriodToActiveDataset.size > 1 && !this.singleDataMetaInfoToDisplay) {\n        const panel = this.$refs.reportingPeriodsOverlayPanel as OverlayPanel;\n        if (panel) {\n          panel.toggle(event);\n        }\n      } else if (this.mapOfReportingPeriodToActiveDataset.size == 1 && !this.singleDataMetaInfoToDisplay) {\n        this.gotoUpdateForm(\n          assertDefined(this.companyID),\n          this.dataType as DataTypeEnum,\n          Array.from(this.mapOfReportingPeriodToActiveDataset.values())[0].dataId,\n        );\n      }\n    },\n    /**\n     * Navigates to the data update form\n     * @param companyID company ID\n     * @param dataType data type\n     * @param dataId data Id\n     */\n    gotoUpdateForm(companyID: string, dataType: DataTypeEnum, dataId: string) {\n      void this.$router.push(\n        `/companies/${assertDefined(companyID)}/frameworks/${assertDefined(dataType)}/upload?templateDataId=${dataId}`,\n      );\n    },\n    /**\n     * Hides the dropdown of the Autocomplete-component\n     */\n    handleScroll() {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      this.frameworkDataSearchBar?.$refs.autocomplete.hide();\n    },\n    /**\n     * Visits the framework view page for the framework which was chosen in the dropdown\n     * @param dropDownChangeEvent the change event emitted by the dropdown component\n     */\n    handleChangeFrameworkEvent(dropDownChangeEvent: DropdownChangeEvent) {\n      if (this.dataType != dropDownChangeEvent.value) {\n        void this.$router.push(`/companies/${this.companyID as string}/frameworks/${this.chosenDataTypeInDropdown}`);\n      }\n    },\n    /**\n     * Handles the \"search-confirmed\" event of the search bar by visiting the search page with the query param set to\n     * the search term provided by the event.\n     * @param searchTerm The search term provided by the \"search-confirmed\" event of the search bar\n     */\n    async handleSearchConfirm(searchTerm: string) {\n      await this.$router.push({\n        name: \"Search Companies for Framework Data\",\n        query: { input: searchTerm },\n      });\n    },\n\n    /**\n     * Uses a list of data meta info to derive all distinct frameworks that occur in that list. Only if those distinct\n     * frameworks are also included in the frontend constant which contains all frameworks that have view-pages\n     * implemented, the distinct frameworks are set as options for the framework-dropdown element.\n     * @param listOfDataMetaInfo a list of data meta info\n     */\n    getDistinctAvailableFrameworksAndPutThemSortedIntoDropdown(listOfDataMetaInfo: DataMetaInformation[]) {\n      this.dataTypesInDropdown = [];\n      const setOfAvailableFrameworksForCompany = [\n        ...new Set(listOfDataMetaInfo.map((dataMetaInfo) => dataMetaInfo.dataType)),\n      ];\n      const listOfDistinctAvailableAndViewableFrameworksForCompany: string[] = [];\n      setOfAvailableFrameworksForCompany.forEach((dataType) => {\n        if (ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE.includes(dataType)) {\n          listOfDistinctAvailableAndViewableFrameworksForCompany.push(dataType);\n        }\n      });\n      listOfDistinctAvailableAndViewableFrameworksForCompany.sort((a, b) => a.localeCompare(b));\n      listOfDistinctAvailableAndViewableFrameworksForCompany.forEach((dataType) => {\n        this.dataTypesInDropdown.push({ label: humanizeStringOrNumber(dataType), value: dataType });\n      });\n    },\n\n    /**\n     * Uses a list of data meta info to set a map which has the distinct repoting periods as keys, and the respective\n     * active data meta info as value.\n     * It only takes into account data meta info whose dataType equals the current dataType prop value.\n     * @param listOfActiveDataMetaInfo The list to be used as input for the map.\n     */\n    setMapOfReportingPeriodToActiveDatasetFromListOfActiveMetaDataInfo(\n      listOfActiveDataMetaInfo: DataMetaInformation[],\n    ) {\n      this.mapOfReportingPeriodToActiveDataset = new Map<string, DataMetaInformation>();\n      listOfActiveDataMetaInfo.forEach((dataMetaInfo: DataMetaInformation) => {\n        if (dataMetaInfo.dataType === this.dataType) {\n          if (dataMetaInfo.currentlyActive) {\n            this.mapOfReportingPeriodToActiveDataset.set(dataMetaInfo.reportingPeriod, dataMetaInfo);\n          } else {\n            throw TypeError(\"Received inactive dataset meta info from Dataland Backend\");\n          }\n        }\n      });\n    },\n\n    /**\n     * Goes through all data meta info for the currently viewed company and does two things.\n     * First it sets the distinct frameworks as options in the framework-dropdown.\n     * Then it builds a map which - for the currently chosen framework - maps all reporting periods to the data meta\n     * info of the currently active dataset.\n     */\n    async getFrameworkDropdownOptionsAndActiveDataMetaInfoForEmit() {\n      try {\n        const metaDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getMetaDataControllerApi();\n        const apiResponse = await metaDataControllerApi.getListOfDataMetaInfo(this.companyID);\n        const listOfActiveDataMetaInfoPerFrameworkAndReportingPeriod = apiResponse.data;\n        this.getDistinctAvailableFrameworksAndPutThemSortedIntoDropdown(\n          listOfActiveDataMetaInfoPerFrameworkAndReportingPeriod,\n        );\n        this.setMapOfReportingPeriodToActiveDatasetFromListOfActiveMetaDataInfo(\n          listOfActiveDataMetaInfoPerFrameworkAndReportingPeriod,\n        );\n        this.$emit(\"updateActiveDataMetaInfoForChosenFramework\", this.mapOfReportingPeriodToActiveDataset);\n        this.isDataProcessedSuccesfully = true;\n      } catch (error) {\n        this.isDataProcessedSuccesfully = false;\n        console.error(error);\n      }\n    },\n  },\n  watch: {\n    companyID() {\n      void this.getFrameworkDropdownOptionsAndActiveDataMetaInfoForEmit();\n    },\n    dataType(newDataType: string) {\n      this.chosenDataTypeInDropdown = newDataType;\n      void this.getFrameworkDropdownOptionsAndActiveDataMetaInfoForEmit();\n    },\n  },\n});\n</script>\n","/**\n * Format a number using the symbol and the value as break points.\n * adopted from https://stackoverflow.com/questions/9461621/format-a-number-as-2-5k-if-a-thousand-or-more-otherwise-900\n * @param  {number} numberToConvert      is the number to be converted such as an amount\n * @param  {number} maxNumberOfDigitsAfterDecimalPoint      maximum number of digits to appear after the decimal point\n * @returns the formatted number\n */\nexport function convertCurrencyNumbersToNotationWithLetters(\n  numberToConvert: number | undefined,\n  maxNumberOfDigitsAfterDecimalPoint?: number,\n): string {\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"K\" },\n    { value: 1e6, symbol: \"M\" },\n    { value: 1e9, symbol: \"B\" },\n    { value: 1e12, symbol: \"T\" },\n    { value: 1e15, symbol: \"QA\" },\n    { value: 1e18, symbol: \"QI\" },\n  ];\n  if (numberToConvert !== undefined) {\n    const regex = /\\.0+$|(\\.d*[1-9])0+$/;\n    const item = lookup\n      .slice()\n      .reverse()\n      .find((part): boolean => numberToConvert >= part.value);\n    return item\n      ? (numberToConvert / item.value).toFixed(maxNumberOfDigitsAfterDecimalPoint).replace(regex, \"$1\") +\n          \" \" +\n          item.symbol\n      : \"0\";\n  } else {\n    return \"\";\n  }\n}\n","<template>\n  <Card class=\"bg-white d-card mr-2\" data-test=\"taxocard\">\n    <template #title></template>\n    <template #content>\n      <div class=\"grid\">\n        <div class=\"col-6 text-left\">\n          <strong>{{ title }}</strong>\n        </div>\n        <div v-if=\"percent !== undefined && percent !== null\" class=\"col-6 text-right text-primary\">\n          <span class=\"font-medium text-3xl\" data-test=\"value\">{{ percentCalculation }}</span>\n          <span>%</span>\n        </div>\n        <div v-else-if=\"total == undefined && amount == undefined\" class=\"col-6 grid align-items-center text-right\">\n          <span class=\"pl-4 font-semibold\">No data has been reported </span>\n        </div>\n      </div>\n      <PrimeProgressBar\n        :value=\"percentCalculation\"\n        :showValue=\"false\"\n        class=\"bg-black-alpha-20 d-progressbar\"\n        v-if=\"percentCalculation !== undefined\"\n      />\n      <div class=\"grid mt-4\">\n        <div class=\"col-12 text-left p-0 pl-2\">\n          <template v-if=\"amount !== undefined && amount !== null\">\n            <span class=\"font-medium text-3xl\">€ </span>\n            <span class=\"font-bold text-4xl\">{{ valueWithOrderOfMagnitudeSuffix(amount) }}</span>\n          </template>\n          <p class=\"left-align\" v-if=\"total !== undefined && total !== null\">\n            <strong>With a total of € {{ valueWithOrderOfMagnitudeSuffix(total) }}</strong>\n          </p>\n        </div>\n      </div>\n    </template>\n  </Card>\n</template>\n\n<script lang=\"ts\">\nimport Card from \"primevue/card\";\nimport PrimeProgressBar from \"primevue/progressbar\";\nimport { convertCurrencyNumbersToNotationWithLetters } from \"@/utils/CurrencyConverter\";\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  name: \"TaxoCard\",\n  components: { Card, PrimeProgressBar },\n  props: {\n    title: {\n      type: String,\n    },\n    total: {\n      type: Number,\n    },\n    percent: {\n      type: Number,\n    },\n    amount: {\n      type: Number,\n    },\n  },\n  computed: {\n    percentCalculation() {\n      if (typeof this.percent === \"number\") {\n        return Math.round(this.percent * 100 * 100) / 100;\n      } else if (typeof this.amount === \"number\" && typeof this.total === \"number\" && this.total > 0) {\n        return Math.round((this.amount / this.total) * 100 * 100) / 100;\n      } else {\n        return undefined;\n      }\n    },\n  },\n  methods: {\n    /**\n     * Transforms a number into a more readable format using abbreviations, e.g. 200132.12 -> 200.13 K\n     * @param value the number to be transformed\n     * @returns the string representation using abbreviations of the input value\n     */\n    valueWithOrderOfMagnitudeSuffix(value: number | undefined) {\n      return convertCurrencyNumbersToNotationWithLetters(value, 2);\n    },\n  },\n});\n</script>\n\n<style>\n.d-progressbar {\n  height: 0.25rem;\n  border-radius: 0.25rem;\n}\n\n.d-card {\n  border-radius: 0.5rem;\n  box-shadow: 0 0 32px 8px rgba(30, 30, 31, 0.08);\n}\n</style>\n","<template>\n  <Card class=\"bg-white d-infocard d-card mr-2\">\n    <template #title></template>\n    <template #content>\n      <div class=\"grid\">\n        <div class=\"col-6 text-left\">\n          <strong>{{ title }}</strong>\n        </div>\n        <div class=\"col-2 col-offset-4 text-right\">\n          <i\n            :title=\"title\"\n            class=\"material-icons\"\n            aria-hidden=\"true\"\n            v-tooltip.top=\"\n              tooltipText\n                ? {\n                    value: tooltipText,\n                    class: 'd-tooltip-mw25',\n                  }\n                : ''\n            \"\n            >info\n          </i>\n        </div>\n        <div class=\"col-12 text-left\">\n          <span>{{ humanizedValue }}</span>\n        </div>\n      </div>\n    </template>\n  </Card>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport { getComponentOptionsForDatalandInfoCard } from \"@/components/PredefinedComponentOptionsGetter\";\n\nexport default defineComponent(getComponentOptionsForDatalandInfoCard(\"TaxoInfoCard\"));\n</script>\n","<template>\n  <span\n    @click=\"downloadDocument()\"\n    class=\"text-primary cursor-pointer\"\n    :class=\"fontStyle\"\n    :data-test=\"'Report-Download-' + downloadName\"\n  >\n    <span class=\"underline\">\n      {{ label ?? downloadName }}\n    </span>\n    <i\n      v-if=\"showIcon\"\n      class=\"pi pi-download pl-1\"\n      data-test=\"download-icon\"\n      aria-hidden=\"true\"\n      style=\"font-size: 12px\"\n    />\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { type AxiosRequestConfig } from \"axios\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\n\nexport default defineComponent({\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  name: \"DocumentLink\",\n  props: {\n    label: String,\n    downloadName: { type: String, required: true },\n    reference: { type: String, required: true },\n    showIcon: Boolean,\n    fontStyle: String,\n  },\n  methods: {\n    /**\n     * Method to download available reports\n     */\n    async downloadDocument() {\n      const reference: string = this.reference;\n      try {\n        const docUrl = document.createElement(\"a\");\n        const documentControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getDocumentControllerApi();\n        await documentControllerApi\n          .getDocument(reference, {\n            headers: { accept: \"application/pdf\" },\n            responseType: \"arraybuffer\",\n          } as AxiosRequestConfig)\n          .then((getDocumentsFromStorageResponse) => {\n            const newBlob = new Blob([getDocumentsFromStorageResponse.data], { type: \"application/pdf\" });\n            docUrl.href = URL.createObjectURL(newBlob);\n            docUrl.setAttribute(\"download\", `${this.downloadName}.pdf`);\n            document.body.appendChild(docUrl);\n            docUrl.click();\n          });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n});\n</script>\n","<template>\n  <div style=\"display: flex\">\n    <div class=\"text-left bg-white mb-4 mr-2 p-3 all-sides-blue-border\" data-test=\"reportsBanner\">\n      <span class=\"font-bold text-gray-800 mt-0 mb-0 mp-0 ml-0 mr-1\" style=\"font-size: 11pt\">\n        Data extracted from the company report. Company reports:\n      </span>\n      <span id=\"reportList\">\n        <span v-for=\"(report, name, index) in reports\" :key=\"index\">\n          <DocumentLink :download-name=\"name\" :reference=\"report.reference\" font-style=\"font-semibold\" />\n          <span v-if=\"index < numberOfReports - 1\"> | </span>\n        </span>\n      </span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport DocumentLink from \"@/components/resources/frameworkDataSearch/DocumentLink.vue\";\n\nexport default defineComponent({\n  name: \"ShowReportsBanner\",\n  components: { DocumentLink },\n  props: {\n    reports: { type: Object, required: true },\n  },\n  computed: {\n    numberOfReports(): number {\n      return Object.keys(this.reports).length;\n    },\n  },\n});\n</script>\n\n<style scoped>\na:link {\n  color: var(--yellow-700);\n}\n</style>\n","<template>\n  <div v-if=\"waitingForData\" class=\"d-center-div text-center px-7 py-4\">\n    <p class=\"font-medium text-xl\">Loading Eu Taxonomy Data..</p>\n    <i class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n  </div>\n  <div v-if=\"dataSet && !waitingForData\">\n    <ShowReportsBanner\n      v-if=\"dataSet?.referencedReports && Object.keys(dataSet.referencedReports).length > 0 && !viewInPreviewMode\"\n      :reports=\"dataSet.referencedReports\"\n    />\n    <div v-else class=\"pb-3\"></div>\n    <div class=\"grid\">\n      <div class=\"col-6\">\n        <TaxoInfoCard\n          title=\"NFRD required\"\n          :value=\"dataSet.nfrdMandatory\"\n          tooltipText=\"The NFRD (Non financial disclosure directive) applies to companies with more than 500 employees with a > €20M balance or > €40M net turnover.\"\n        />\n      </div>\n      <div class=\"col-6\">\n        <TaxoInfoCard\n          title=\"Level of Assurance\"\n          :value=\"dataSet.assurance?.assurance\"\n          tooltipText=\"The Level of Assurance specifies the confidence level of the data reported.\n                  Reasonable assurance:  relatively high degree of comfort that the subject matter is not materially misstated.\n                  Limited assurance: moderate level of comfort that the subject matter is not materially misstated.\n                  None: low level of comfort that the subject matter is not materially misstated.\"\n        />\n      </div>\n      <template v-for=\"fsType in dataSet.financialServicesTypes\" :key=\"fsType\">\n        <div class=\"card-section-title\">\n          <span class=\"font-medium text-xl font-semibold\">Exposures for {{ getSectionHeading(fsType) }}</span>\n          <span class=\"pl-2 font-italic\">In percentage of the total assets</span>\n        </div>\n        <div class=\"col-6\">\n          <TaxoCard\n            :name=\"`taxonomyEligibleActivity${fsType}`\"\n            title=\"Taxonomy-eligible economic activity\"\n            :percent=\"dataSet.eligibilityKpis[fsType].taxonomyEligibleActivity?.value\"\n          />\n        </div>\n        <div class=\"col-6\">\n          <TaxoCard\n            :name=\"`derivatives${fsType}`\"\n            title=\"Derivatives\"\n            taxonomy-kind=\"\"\n            :percent=\"dataSet.eligibilityKpis[fsType].derivatives?.value\"\n          />\n        </div>\n        <div class=\"col-6\">\n          <TaxoCard\n            :name=\"`banksAndIssuers${fsType}`\"\n            title=\"Banks and issuers\"\n            :percent=\"dataSet.eligibilityKpis[fsType].banksAndIssuers?.value\"\n          />\n        </div>\n        <div class=\"col-6\">\n          <TaxoCard\n            :name=\"`investmentNonNfrd${fsType}`\"\n            title=\"Non-NFRD\"\n            :percent=\"dataSet.eligibilityKpis[fsType].investmentNonNfrd?.value\"\n          />\n        </div>\n        <div class=\"col-6\">\n          <TaxoCard\n            :name=\"`taxonomyNonEligibleActivity${fsType}`\"\n            title=\"Taxonomy-non-eligible economic activity\"\n            :percent=\"dataSet.eligibilityKpis[fsType].taxonomyNonEligibleActivity?.value\"\n          />\n        </div>\n        <template v-if=\"fsType === 'CreditInstitution'\">\n          <div class=\"card-section-title\">\n            <span class=\"font-medium text-xl font-semibold\">Credit Institution KPIs</span>\n            <span class=\"pl-2 font-italic\">In percentage of the total assets</span>\n          </div>\n          <div\n            class=\"col-6\"\n            v-if=\"\n              dataSet.creditInstitutionKpis.tradingPortfolioAndInterbankLoans ||\n              (!dataSet.creditInstitutionKpis.tradingPortfolio && !dataSet.creditInstitutionKpis.interbankLoans)\n            \"\n          >\n            <TaxoCard\n              title=\"Trading portfolio & on demand interbank loans\"\n              name=\"tradingPortfolioAndOnDemandInterbankLoans\"\n              taxonomy-kind=\"\"\n              :percent=\"dataSet.creditInstitutionKpis.tradingPortfolioAndInterbankLoans?.value\"\n            />\n          </div>\n          <div\n            class=\"col-6\"\n            v-if=\"\n              dataSet.creditInstitutionKpis.tradingPortfolio ||\n              !dataSet.creditInstitutionKpis.tradingPortfolioAndInterbankLoans\n            \"\n          >\n            <TaxoCard\n              name=\"tradingPortfolio\"\n              title=\"Trading portfolio\"\n              :percent=\"dataSet.creditInstitutionKpis.tradingPortfolio?.value\"\n            />\n          </div>\n          <div\n            class=\"col-6\"\n            v-if=\"\n              dataSet.creditInstitutionKpis.interbankLoans ||\n              !dataSet.creditInstitutionKpis.tradingPortfolioAndInterbankLoans\n            \"\n          >\n            <TaxoCard\n              name=\"onDemandInterbankLoans\"\n              title=\"On demand interbank loans\"\n              :percent=\"dataSet.creditInstitutionKpis.interbankLoans?.value\"\n            />\n          </div>\n          <div class=\"col-6\">\n            <TaxoCard\n              name=\"greenAssetRatioCreditInstitution\"\n              title=\"Green asset ratio\"\n              :percent=\"dataSet.creditInstitutionKpis.greenAssetRatio?.value\"\n            />\n          </div>\n        </template>\n        <template v-if=\"fsType === 'InsuranceOrReinsurance'\">\n          <div class=\"card-section-title\">\n            <span class=\"font-medium text-xl font-semibold\">Insurance and Reinsurance KPIs</span>\n            <span class=\"pl-2 font-italic\">In percentage of the total assets</span>\n          </div>\n          <div class=\"col-6\">\n            <TaxoCard\n              name=\"taxonomyEligibleNonLifeInsuranceActivities\"\n              title=\"Taxonomy-eligible non-life insurance economic activities\"\n              :percent=\"dataSet.insuranceKpis.taxonomyEligibleNonLifeInsuranceActivities?.value\"\n            />\n          </div>\n        </template>\n        <template v-if=\"fsType === 'InvestmentFirm'\">\n          <div class=\"card-section-title\">\n            <span class=\"font-medium text-xl font-semibold\">Investment Firm KPIs</span>\n            <span class=\"pl-2 font-italic\">In percentage of the total assets</span>\n          </div>\n          <div class=\"col-6\">\n            <TaxoCard\n              name=\"greenAssetRatioInvestmentFirm\"\n              title=\"Green asset ratio\"\n              :percent=\"dataSet.investmentFirmKpis.greenAssetRatio?.value\"\n            />\n          </div>\n        </template>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { type EuTaxonomyDataForFinancials } from \"@clients/backend\";\nimport TaxoCard from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxoCard.vue\";\nimport TaxoInfoCard from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxoInfoCard.vue\";\nimport ShowReportsBanner from \"@/components/resources/frameworkDataSearch/ShowReportsBanner.vue\";\nimport { defineComponent, inject } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\n\nexport default defineComponent({\n  name: \"EuTaxonomyPanelFinancials\",\n  components: { TaxoCard, TaxoInfoCard, ShowReportsBanner },\n  data() {\n    return {\n      dataSet: null as EuTaxonomyDataForFinancials | null | undefined,\n    };\n  },\n  props: {\n    dataID: {\n      type: String,\n      default: \"loading\",\n    },\n    viewInPreviewMode: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    void this.getCompanyEuDataset();\n  },\n  watch: {\n    dataID() {\n      void this.getCompanyEuDataset();\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n      waitingForData: true,\n    };\n  },\n  methods: {\n    /**\n     * Uses the Dataland API to retrieve the eutaxonomy-financials dataset identified by this components\n     * dataID and stores it in this components dataSet attribute\n     */\n    async getCompanyEuDataset() {\n      try {\n        this.waitingForData = true;\n        if (this.dataID != \"loading\") {\n          const euTaxonomyDataForFinancialsControllerApi = await new ApiClientProvider(\n            assertDefined(this.getKeycloakPromise)(),\n          ).getEuTaxonomyDataForFinancialsControllerApi();\n          const companyAssociatedData =\n            await euTaxonomyDataForFinancialsControllerApi.getCompanyAssociatedEuTaxonomyDataForFinancials(\n              assertDefined(this.dataID),\n            );\n          this.dataSet = companyAssociatedData.data.data;\n          this.waitingForData = false;\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * Converts the type of financial company to the section heading\n     * @param type the type of financial company to convert\n     * @returns the section heading of the specified fs type\n     */\n    getSectionHeading(type: string): string {\n      const mapping: { [key: string]: string } = {\n        CreditInstitution: \"Credit Institution\",\n        AssetManagement: \"Asset Management\",\n        InsuranceOrReinsurance: \"Insurance and Reinsurance\",\n        InvestmentFirm: \"Investment Firm\",\n      };\n      return mapping[type];\n    },\n  },\n});\n</script>\n","<template>\n  <div\n    v-if=\"displayWarning\"\n    data-test=\"datasetDisplayStatusContainer\"\n    class=\"flex w-full info-bar\"\n    style=\"min-height: 2rem\"\n  >\n    <span class=\"flex-1\">{{ warningMessage }}</span>\n    <router-link v-if=\"existsAcceptedVersion\" :to=\"link\" class=\"no-underline\" data-test=\"datasetDisplayStatusLink\">\n      <PrimeButton :label=\"buttonLabel\" icon=\"pi pi-stopwatch\" />\n    </router-link>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, type PropType } from \"vue\";\nimport { type DataMetaInformation, QaStatus } from \"@clients/backend\";\nimport PrimeButton from \"primevue/button\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nexport default defineComponent({\n  name: \"DatasetDisplayStatusIndicator\",\n  components: { PrimeButton },\n  props: {\n    displayedDataset: {\n      type: Object as PropType<DataMetaInformation | null>,\n    },\n    receivedMapOfReportingPeriodsToActiveDataMetaInfo: {\n      type: Object,\n      required: true,\n    },\n    isMultiview: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    displayWarning(): boolean {\n      return (\n        this.displayedDataset?.currentlyActive === false ||\n        (this.displayedDataset?.qaStatus && this.displayedDataset.qaStatus !== QaStatus.Accepted) ||\n        this.areMoreDatasetsViewableSimultaneously\n      );\n    },\n    warningMessage(): string {\n      if (this.displayedDataset?.qaStatus === QaStatus.Pending) return \"This dataset is currently pending review\";\n      else if (this.displayedDataset?.qaStatus === QaStatus.Rejected) return \"This dataset has been rejected\";\n      else if (this.displayedDataset?.currentlyActive === false) return \"This dataset is superseded\";\n      else if (this.areMoreDatasetsViewableSimultaneously) return \"You are only viewing a single available dataset\";\n      else return \"ERROR\";\n    },\n    buttonLabel(): string {\n      if (this.displayedDataset?.qaStatus === QaStatus.Pending || this.displayedDataset?.currentlyActive === false) {\n        return \"View Active\";\n      } else if (this.areMoreDatasetsViewableSimultaneously) {\n        return \"View All\";\n      } else {\n        return \"ERROR\";\n      }\n    },\n    link(): string | undefined {\n      if (\n        (this.displayedDataset?.qaStatus && this.displayedDataset.qaStatus !== QaStatus.Accepted) ||\n        this.displayedDataset?.currentlyActive === false\n      ) {\n        return (\n          `/companies/${this.displayedDataset.companyId}` +\n          `/frameworks/${this.displayedDataset.dataType}/reportingPeriods/${this.displayedDataset.reportingPeriod}`\n        );\n      } else if (this.areMoreDatasetsViewableSimultaneously) {\n        return (\n          `/companies/${assertDefined(this.displayedDataset?.companyId)}/` +\n          `frameworks/${assertDefined(this.displayedDataset?.dataType)}`\n        );\n      } else {\n        return undefined;\n      }\n    },\n    existsAcceptedVersion(): boolean {\n      return (this.receivedMapOfReportingPeriodsToActiveDataMetaInfo as Map<string, DataMetaInformation>).has(\n        this.displayedDataset?.reportingPeriod ?? \"\",\n      );\n    },\n    areMoreDatasetsViewableSimultaneously(): boolean {\n      return (\n        this.isMultiview &&\n        this.displayedDataset != null &&\n        (this.receivedMapOfReportingPeriodsToActiveDataMetaInfo as Map<string, DataMetaInformation>).size > 1\n      );\n    },\n  },\n});\n</script>\n","<template>\n  <ViewFrameworkBase\n    :companyID=\"companyId\"\n    :dataType=\"dataType\"\n    :single-data-meta-info-to-display=\"dataMetaInfoForDisplay\"\n    @updateActiveDataMetaInfoForChosenFramework=\"handleUpdateActiveDataMetaInfo\"\n    :viewInPreviewMode=\"viewInPreviewMode\"\n  >\n    <template v-slot:reportingPeriodDropdown>\n      <Dropdown\n        id=\"chooseReportingPeriodDropdown\"\n        v-model=\"chosenReportingPeriodInDropdown\"\n        :options=\"reportingPeriodsInDropdown\"\n        :placeholder=\"dataMetaInfoForDisplay?.reportingPeriod || 'Select...'\"\n        aria-label=\"Choose reporting period\"\n        :class=\"[dataMetaInfoForDisplay ? ['always-fill'] : '']\"\n        class=\"fill-dropdown ml-4\"\n        dropdownIcon=\"pi pi-angle-down\"\n        @change=\"handleChangeReportingPeriodEvent\"\n      />\n    </template>\n\n    <template v-slot:content>\n      <div v-if=\"isDataIdToDisplayFound\">\n        <DatasetDisplayStatusIndicator\n          :displayed-dataset=\"dataMetaInfoForDisplay\"\n          :received-map-of-reporting-periods-to-active-data-meta-info=\"\n            receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo\n          \"\n        />\n        <div class=\"grid\">\n          <div class=\"col-12 text-left\">\n            <h2 class=\"mb-0\" data-test=\"frameworkDataTableTitle\">{{ humanizedDataDescription }}</h2>\n          </div>\n        </div>\n        <div class=\"grid\">\n          <div class=\"col-7\">\n            <EuTaxonomyPanelFinancials\n              v-if=\"dataType === DataTypeEnum.EutaxonomyFinancials\"\n              :dataID=\"dataIdForPanelWithValidType\"\n              :viewInPreviewMode=\"viewInPreviewMode\"\n            />\n          </div>\n        </div>\n      </div>\n      <div v-if=\"isWaitingForDataIdToDisplay\" class=\"col-12 text-left\" data-test=\"checkingIfAvailableIndicator\">\n        <h2>Checking if {{ humanizedDataDescription }} data available...</h2>\n      </div>\n      <div\n        v-if=\"!dataMetaInfoForDisplay && !isWaitingForDataIdToDisplay\"\n        data-test=\"noDataForThisFrameworkPresentErrorIndicator\"\n      >\n        <h2>No {{ humanizedDataDescription }} data present for this company.</h2>\n      </div>\n      <div v-if=\"isDataIdInUrlInvalid\" data-test=\"noDataForThisDataIdPresentErrorIndicator\">\n        <h2>\n          No {{ humanizedDataDescription }} data could be found for the data ID passed in the URL for this company and\n          framework.\n        </h2>\n      </div>\n      <div v-if=\"isReportingPeriodInUrlInvalid\" data-test=\"noDataForThisReportingPeriodPresentErrorIndicator\">\n        <h2>\n          No {{ humanizedDataDescription }} data could be found for the reporting period passed in the URL for this\n          company.\n        </h2>\n      </div>\n    </template>\n  </ViewFrameworkBase>\n</template>\n\n<script lang=\"ts\">\nimport ViewFrameworkBase from \"@/components/generics/ViewFrameworkBase.vue\";\nimport { type DataMetaInformation, DataTypeEnum } from \"@clients/backend\";\nimport { defineComponent, inject } from \"vue\";\nimport Dropdown, { type DropdownChangeEvent } from \"primevue/dropdown\";\nimport type Keycloak from \"keycloak-js\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { type AxiosError } from \"axios\";\nimport EuTaxonomyPanelFinancials from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyPanelFinancials.vue\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport DatasetDisplayStatusIndicator from \"@/components/resources/frameworkDataSearch/DatasetDisplayStatusIndicator.vue\";\n\nexport default defineComponent({\n  name: \"ViewSingleDatasetDisplayBase\",\n  components: {\n    DatasetDisplayStatusIndicator,\n    ViewFrameworkBase,\n    Dropdown,\n    EuTaxonomyPanelFinancials,\n  },\n  props: {\n    companyId: {\n      type: String,\n    },\n    dataId: {\n      type: String,\n    },\n    reportingPeriod: {\n      type: String,\n    },\n    dataType: {\n      type: String,\n    },\n    viewInPreviewMode: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      isWaitingForDataIdToDisplay: true,\n      receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo: {} as Map<string, DataMetaInformation>,\n      reportingPeriodsInDropdown: [] as Array<string>,\n      chosenReportingPeriodInDropdown: \"\",\n      dataMetaInfoForDisplay: null as DataMetaInformation | null,\n      isDataIdInUrlInvalid: false,\n      isReportingPeriodInUrlInvalid: false,\n      isDataIdToDisplayFound: false,\n      DataTypeEnum,\n    };\n  },\n\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  watch: {\n    dataId(newDataId: string) {\n      if (newDataId) {\n        void this.getMetaDataForDataId(newDataId);\n      }\n    },\n    reportingPeriod(newReportingPeriod: string) {\n      this.switchToActiveDatasetForNewlyChosenReportingPeriod(newReportingPeriod);\n    },\n  },\n\n  computed: {\n    humanizedDataDescription() {\n      return humanizeStringOrNumber(this.dataType);\n    },\n\n    dataIdForPanelWithValidType() {\n      if (this.dataMetaInfoForDisplay?.dataType === this.dataType) {\n        return this.dataMetaInfoForDisplay?.dataId;\n      } else return \"loading\";\n    },\n  },\n  methods: {\n    /**\n     * Method to prepare the display of given data meta information\n     * @param dataMetaInfoForDisplay The data meta information object to be displayed\n     */\n    processDataMetaInfoForDisplay(dataMetaInfoForDisplay: DataMetaInformation) {\n      this.chosenReportingPeriodInDropdown = dataMetaInfoForDisplay.reportingPeriod;\n      this.isDataIdToDisplayFound = true;\n      this.dataMetaInfoForDisplay = dataMetaInfoForDisplay;\n    },\n\n    /**\n     * Handles the change event of the reporting period dropdown to make the page display the active data set for the\n     * newly selected reporting period.\n     * @param dropDownChangeEvent The object which is passed by the change event of the reporting period dropdown\n     */\n    handleChangeReportingPeriodEvent(dropDownChangeEvent: DropdownChangeEvent) {\n      this.routerPushToReportingPeriod(String(dropDownChangeEvent.value));\n    },\n\n    /**\n     * Switch to the active data set of a new reporting period, including adapting the corresponding route\n     * @param newReportingPeriod The desired new reporting period\n     */\n    switchToActiveDatasetForNewlyChosenReportingPeriod(newReportingPeriod: string) {\n      this.isReportingPeriodInUrlInvalid = false;\n      this.isDataIdInUrlInvalid = false;\n      const dataMetaInfoForNewlyChosenReportingPeriod =\n        this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo.get(newReportingPeriod);\n      if (dataMetaInfoForNewlyChosenReportingPeriod) {\n        this.processDataMetaInfoForDisplay(dataMetaInfoForNewlyChosenReportingPeriod);\n        this.routerPushToReportingPeriod(dataMetaInfoForNewlyChosenReportingPeriod.reportingPeriod);\n      } else if (newReportingPeriod) {\n        this.handleInvalidReportingPeriodPassedInUrl();\n      }\n    },\n\n    /**\n     * Method to set route to a specific reporting period\n     * @param reportingPeriod Specific reporting period the route should end with\n     */\n    routerPushToReportingPeriod(reportingPeriod: string) {\n      if (this.companyId != null && this.dataType != null) {\n        this.$router\n          .push(`/companies/${this.companyId}/frameworks/${this.dataType}/reportingPeriods/${reportingPeriod}`)\n          .catch((err) =>\n            console.log(\"Setting route for reporting period \" + reportingPeriod + \" failed with error \" + String(err)),\n          );\n      }\n    },\n\n    /**\n     * Gets the keys from a map and returns them in an alphabeticall sorted array\n     * @param inputMap The map that should be used for this operation\n     * @returns an array containing the keys of the map alphabetically sorted\n     */\n    getKeysFromMapAndReturnAsAlphabeticallySortedArray(inputMap: Map<string, object>): Array<string> {\n      return Array.from(inputMap.keys()).sort((reportingPeriodA, reportingPeriodB) => {\n        if (reportingPeriodA > reportingPeriodB) return -1;\n        else return 0;\n      });\n    },\n\n    /**\n     * Method to handle the update of the currently active data meta information for the chosen framework\n     * @param receivedMapOfReportingPeriodsToActiveDataMetaInfo 1-to-1 map between reporting periods and corresponding\n     * active data meta information objects\n     */\n    handleUpdateActiveDataMetaInfo(\n      receivedMapOfReportingPeriodsToActiveDataMetaInfo: Map<string, DataMetaInformation>,\n    ) {\n      this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo =\n        receivedMapOfReportingPeriodsToActiveDataMetaInfo;\n      this.reportingPeriodsInDropdown = this.getKeysFromMapAndReturnAsAlphabeticallySortedArray(\n        receivedMapOfReportingPeriodsToActiveDataMetaInfo,\n      );\n      this.chooseDataMetaInfoForDisplayedDataset().catch((err) =>\n        console.log(\"Retrieving data meta info failed with error \" + String(err)),\n      );\n      this.isWaitingForDataIdToDisplay = false;\n    },\n\n    /**\n     *  This controller-method decides how the displayed dataset should be chosen.\n     *  It does so by checking the path-params in the URL, which are handled as props in this vue component.\n     *  Case A: Just a data ID is found in the URL, therefore this specific dataset should be displayed.\n     *  Case B: No data ID is found in the URL, but a reporting period. Therefore the active dataset for this reporting\n     *  period should be displayed.\n     *  Case C: No data ID or reporting period is found in the URL. A default function should now decide, which dataset\n     *  will be displayed.\n     */\n    async chooseDataMetaInfoForDisplayedDataset() {\n      if (this.dataId) {\n        await this.getMetaDataForDataId(this.dataId);\n      } else if (!this.dataId && this.reportingPeriod) {\n        this.switchToActiveDatasetForNewlyChosenReportingPeriod(this.reportingPeriod);\n      } else {\n        this.switchToDefaultDatasetToDisplay();\n      }\n    },\n\n    /**\n     * Method to retrieve meta data for a specific data ID and prepare displaying them\n     * @param dataId The desired data ID for which the meta data are wanted\n     */\n    async getMetaDataForDataId(dataId: string) {\n      try {\n        const metaDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getMetaDataControllerApi();\n        const apiResponse = await metaDataControllerApi.getDataMetaInfo(dataId);\n        const dataMetaInfoForDataSetWithDataIdFromUrl = apiResponse.data;\n        if (\n          dataMetaInfoForDataSetWithDataIdFromUrl.companyId != this.companyId ||\n          dataMetaInfoForDataSetWithDataIdFromUrl.dataType != this.dataType\n        ) {\n          this.handleInvalidDataIdPassedInUrl();\n        } else {\n          this.processDataMetaInfoForDisplay(dataMetaInfoForDataSetWithDataIdFromUrl);\n        }\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status == 404) {\n          this.handleInvalidDataIdPassedInUrl();\n        }\n      }\n    },\n\n    /**\n     * Called when the dataId in the url is found to be invalid (i.e. belongs to a different company or does not exist)\n     */\n    handleInvalidDataIdPassedInUrl() {\n      this.dataMetaInfoForDisplay = null;\n      this.chosenReportingPeriodInDropdown = \"\";\n      this.isDataIdToDisplayFound = false;\n      this.isDataIdInUrlInvalid = true;\n    },\n\n    /**\n     * Called when the reporting period in the url does not belong to a designated dataset\n     */\n    handleInvalidReportingPeriodPassedInUrl() {\n      this.dataMetaInfoForDisplay = null;\n      this.chosenReportingPeriodInDropdown = \"\";\n      this.isDataIdToDisplayFound = false;\n      this.isReportingPeriodInUrlInvalid = true;\n    },\n\n    /**\n     * Method to switch to default data set to display, including replacing the route by the one corresponding to the\n     * latest chosen reporting period in dropdown\n     */\n    switchToDefaultDatasetToDisplay() {\n      const latestDataMetaInformation = this.getActiveDataMetaInfoFromLatestReportingPeriodIfParsableAsNumber();\n      if (latestDataMetaInformation && this.companyId && this.dataType) {\n        this.$router\n          .replace(\n            `/companies/${this.companyId}/frameworks/${this.dataType}/reportingPeriods/${latestDataMetaInformation.reportingPeriod}`,\n          )\n          .catch((err) => console.log(\"Replacing route failed with error \" + String(err)));\n      }\n    },\n\n    /**\n     * Method to retrieve the active data meta information for the latest reporting period\n     * @returns the active data meta information from the latest reporting period\n     */\n    getActiveDataMetaInfoFromLatestReportingPeriodIfParsableAsNumber(): DataMetaInformation {\n      const [firstActiveDataMetaInfo] = this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo.values();\n      const listOfNumbersInReportingPeriods: number[] = [];\n      this.reportingPeriodsInDropdown.forEach((reportingPeriodAsString) => {\n        const parsedReportingPeriod = parseInt(reportingPeriodAsString);\n        if (!Number.isNaN(parsedReportingPeriod)) {\n          listOfNumbersInReportingPeriods.push(parsedReportingPeriod);\n        }\n      });\n      if (listOfNumbersInReportingPeriods.length > 0) {\n        const latestReportingPeriod = listOfNumbersInReportingPeriods.reduce((a, b) => Math.max(a, b)).toString();\n        const activeDataMetaInfoForLatestReportingPeriod =\n          this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo.get(latestReportingPeriod);\n        if (activeDataMetaInfoForLatestReportingPeriod) {\n          return activeDataMetaInfoForLatestReportingPeriod;\n        } else {\n          return firstActiveDataMetaInfo;\n        }\n      } else return firstActiveDataMetaInfo;\n    },\n  },\n});\n</script>\n","import { type DataMetaInformation } from \"@clients/backend\";\n\nexport const PanelProps = {\n  companyId: {\n    type: String,\n  },\n  singleDataMetaInfoToDisplay: {\n    type: Object as () => DataMetaInformation,\n  },\n};\n","<template>\n  <DataTable :value=\"listOfRowContents\">\n    <Column\n      v-for=\"keyOfColumn of keysOfValuesForColumnDisplay\"\n      :field=\"keyOfColumn\"\n      :key=\"keyOfColumn\"\n      :header=\"\n        columnHeaders![kpiKeyOfTable] ? columnHeaders![kpiKeyOfTable][keyOfColumn] : humanizeString(kpiKeyOfTable)\n      \"\n      headerStyle=\"width: 15vw;\"\n    >\n      <template #body=\"{ data }\">\n        <template v-if=\"data[keyOfColumn]\">\n          <ul v-if=\"Array.isArray(data[keyOfColumn])\">\n            <li :key=\"el\" v-for=\"el in data[keyOfColumn]\">{{ el }}</li>\n          </ul>\n          <div v-else-if=\"typeof data[keyOfColumn] === 'object'\">\n            <p :key=\"key\" v-for=\"[key, value] in Object.entries(data[keyOfColumn])\" style=\"margin: 0; padding: 0\">\n              {{ value }}\n            </p>\n          </div>\n          <span v-else>{{ humanizeStringIfNecessary(keyOfColumn, data[keyOfColumn]) }}</span>\n        </template>\n      </template>\n    </Column>\n  </DataTable>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport DataTable from \"primevue/datatable\";\nimport Column from \"primevue/column\";\nimport { type DynamicDialogInstance } from \"primevue/dynamicdialogoptions\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\n\nexport default defineComponent({\n  inject: [\"dialogRef\"],\n  name: \"DetailsCompanyDataTable\",\n  components: { DataTable, Column },\n  data() {\n    return {\n      listOfRowContents: [] as Array<object | string>,\n      kpiKeyOfTable: \"\" as string,\n      keysOfValuesForColumnDisplay: [] as string[],\n      keysWithValuesToBeHumanized: [\"isInHouseProductionOrIsContractProcessing\", \"sectors\"] as string[],\n      humanizeString: humanizeStringOrNumber,\n      columnHeaders: {},\n    };\n  },\n  mounted() {\n    const dialogRefToDisplay = this.dialogRef as DynamicDialogInstance;\n    const dialogRefData = dialogRefToDisplay.data as {\n      listOfRowContents: Array<object | string>;\n      kpiKeyOfTable: string;\n      columnHeaders: object;\n    };\n    this.kpiKeyOfTable = dialogRefData.kpiKeyOfTable;\n    this.columnHeaders = dialogRefData.columnHeaders;\n    if (typeof dialogRefData.listOfRowContents[0] === \"string\") {\n      this.keysOfValuesForColumnDisplay.push(this.kpiKeyOfTable);\n      this.listOfRowContents = dialogRefData.listOfRowContents.map((o) => ({ [this.kpiKeyOfTable]: o }));\n    } else {\n      this.listOfRowContents = dialogRefData.listOfRowContents;\n      this.generateColsNames();\n    }\n  },\n  methods: {\n    /**\n     * Gets the keys from a production site type to define the columns that the displayed table in this vue component\n     * should have.\n     */\n    generateColsNames(): void {\n      const presentKeys = this.listOfRowContents.reduce(function (keyList: string[], rowContent) {\n        for (const key of Object.keys(rowContent)) {\n          if (keyList.indexOf(key) === -1) keyList.push(key);\n        }\n        return keyList;\n      }, []);\n      for (const key of presentKeys) {\n        this.keysOfValuesForColumnDisplay.push(key);\n      }\n    },\n    /**\n     * Humanizes a string if the corresponding key is listed as to be humanized\n     * @param key decides if the value is to be humanized\n     * @param value string to be possibly humanized\n     * @returns a humanized input of the value parameter if the k\n     */\n    humanizeStringIfNecessary(key: string, value: string): string {\n      if (this.keysWithValuesToBeHumanized.includes(key)) {\n        return humanizeStringOrNumber(value);\n      }\n      return value;\n    },\n  },\n});\n</script>\n","import BaseComponent from 'primevue/basecomponent';\n\nvar script$1 = {\n  name: 'BaseColumnGroup',\n  \"extends\": BaseComponent,\n  props: {\n    type: {\n      type: String,\n      \"default\": null\n    }\n  },\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'ColumnGroup',\n  \"extends\": script$1,\n  render: function render() {\n    return null;\n  }\n};\n\nexport { script as default };\n","import BaseComponent from 'primevue/basecomponent';\n\nvar script = {\n  name: 'Row',\n  \"extends\": BaseComponent,\n  render: function render() {\n    return null;\n  }\n};\n\nexport { script as default };\n","import { assertDefined } from \"@/utils/TypeScriptUtils\";\n\n/**\n * @param target the camel case string we want to format\n * @returns a human readable version\n */\nexport function activityApiNameToHumanizedName(target: string): string {\n  return assertDefined(Object.entries(ActivityName).find(([key]) => key == target))[1];\n}\n\n/**\n * An enum that holds the EU taxonomy activities with their names as values\n */\nenum ActivityName {\n  Afforestation = \"Afforestation\",\n  RehabilitationAndRestorationOfForestsIncludingReforestationAndNaturalForestRegenerationAfterAnExtremeEvent = \"Rehabilitation and restoration of forests, including reforestation and natural forest regeneration after an extreme event\",\n  ForestManagement = \"Forest management\",\n  ConservationForestry = \"Conservation forestry\",\n  RestorationOfWetlands = \"Restoration of wetlands\",\n  ManufactureOfRenewableEnergyTechnologies = \"Manufacture of renewable energy technologies\",\n  ManufactureOfEquipmentForTheProductionAndUseOfHydrogen = \"Manufacture of equipment for the production and use of hydrogen\",\n  ManufactureOfLowCarbonTechnologiesForTransport = \"Manufacture of low carbon technologies for transport\",\n  ManufactureOfBatteries = \"Manufacture of batteries\",\n  ManufactureOfEnergyEfficiencyEquipmentForBuildings = \"Manufacture of energy efficiency equipment for buildings\",\n  ManufactureOfOtherLowCarbonTechnologies = \"Manufacture of other low carbon technologies\",\n  ManufactureOfCement = \"Manufacture of cement\",\n  ManufactureOfAluminium = \"Manufacture of aluminium\",\n  ManufactureOfIronAndSteel = \"Manufacture of iron and steel\",\n  ManufactureOfHydrogen = \"Manufacture of hydrogen\",\n  ManufactureOfCarbonBlack = \"Manufacture of carbon black\",\n  ManufactureOfSodaAsh = \"Manufacture of soda ash\",\n  ManufactureOfChlorine = \"Manufacture of chlorine\",\n  ManufactureOfOrganicBasicChemicals = \"Manufacture of organic basic chemicals\",\n  ManufactureOfAnhydrousAmmonia = \"Manufacture of anhydrous ammonia\",\n  ManufactureOfNitricAcid = \"Manufacture of nitric acid\",\n  ManufactureOfPlasticsInPrimaryForm = \"Manufacture of plastics in primary form\",\n  ElectricityGenerationUsingSolarPhotovoltaicTechnology = \"Electricity generation using solar photovoltaic technology\",\n  ElectricityGenerationUsingConcentratedSolarPowerCspTechnology = \"Electricity generation using concentrated solar power (CSP) technology\",\n  ElectricityGenerationFromWindPower = \"Electricity generation from wind power\",\n  ElectricityGenerationFromOceanEnergyTechnologies = \"Electricity generation from ocean energy technologies\",\n  ElectricityGenerationFromHydropower = \"Electricity generation from hydropower\",\n  ElectricityGenerationFromGeothermalEnergy = \"Electricity generation from geothermal energy\",\n  ElectricityGenerationFromRenewableNonFossilGaseousAndLiquidFuels = \"Electricity generation from renewable non-fossil gaseous and liquid fuels\",\n  ElectricityGenerationFromBioenergy = \"Electricity generation from bioenergy\",\n  TransmissionAndDistributionOfElectricity = \"Transmission and distribution of electricity\",\n  StorageOfElectricity = \"Storage of electricity\",\n  StorageOfThermalEnergy = \"Storage of thermal energy\",\n  StorageOfHydrogen = \"Storage of hydrogen\",\n  ManufactureOfBiogasAndBiofuelsForUseInTransportAndOfBioliquids = \"Manufacture of biogas and biofuels for use in transport and of bioliquids\",\n  TransmissionAndDistributionNetworksForRenewableAndLowCarbonGases = \"Transmission and distribution networks for renewable and low-carbon gases\",\n  DistrictHeatingCoolingDistribution = \"District heating/cooling distribution\",\n  InstallationAndOperationOfElectricHeatPumps = \"Installation and operation of electric heat pumps\",\n  CogenerationOfHeatCoolAndPowerFromSolarEnergy = \"Cogeneration of heat/cool and power from solar energy\",\n  CogenerationOfHeatCoolAndPowerFromGeothermalEnergy = \"Cogeneration of heat/cool and power from geothermal energy\",\n  CogenerationOfHeatCoolAndPowerFromRenewableNonFossilGaseousAndLiquidFuels = \"Cogeneration of heat/cool and power from renewable non-fossil gaseous and liquid fuels\",\n  CogenerationOfHeatCoolAndPowerFromBioenergy = \"Cogeneration of heat/cool and power from bioenergy\",\n  ProductionOfHeatCoolFromSolarThermalHeating = \"Production of heat/cool from solar thermal heating\",\n  ProductionOfHeatCoolFromGeothermalEnergy = \"Production of heat/cool from geothermal energy\",\n  ProductionOfHeatCoolFromRenewableNonFossilGaseousAndLiquidFuels = \"Production of heat/cool from renewable non-fossil gaseous and liquid fuels\",\n  ProductionOfHeatCoolFromBioenergy = \"Production of heat/cool from bioenergy\",\n  ProductionOfHeatCoolUsingWasteHeat = \"Production of heat/cool using waste heat\",\n  PreCommercialStagesOfAdvancedTechnologiesToProduceEnergyFromNuclearProcessesWithMinimalWasteFromTheFuelCycle = \"Pre-commercial stages of advanced technologies to produce energy from nuclear processes with minimal waste from the fuel cycle\",\n  ConstructionAndSafeOperationOfNewNuclearPowerPlantsForTheGenerationOfElectricityAndOrHeatIncludingForHydrogenProductionUsingBestAvailableTechnologies = \"Construction and safe operation of new nuclear power plants, for the generation of electricity and/or heat, including for hydrogen production, using best-available technologies\",\n  ElectricityGenerationFromNuclearEnergyInExistingInstallations = \"Electricity generation from nuclear energy in existing installations\",\n  ElectricityGenerationFromFossilGaseousFuels = \"Electricity generation from fossil gaseous fuels\",\n  HighEfficiencyCoGenerationOfHeatCoolAndPowerFromFossilGaseousFuels = \"High-efficiency co-generation of heat/cool and power from fossil gaseous fuels\",\n  ProductionOfHeatCoolFromFossilGaseousFuelsInAnEfficientDistrictHeatingAndCoolingSystem = \"Production of heat/cool from fossil gaseous fuels in an efficient district heating and cooling system\",\n  ConstructionExtensionAndOperationOfWaterCollectionTreatmentAndSupplySystems = \"Construction, extension and operation of water collection, treatment and supply systems\",\n  RenewalOfWaterCollectionTreatmentAndSupplySystems = \"Renewal of water collection, treatment and supply systems\",\n  ConstructionExtensionAndOperationOfWasteWaterCollectionAndTreatment = \"Construction, extension and operation of waste water collection and treatment\",\n  RenewalOfWasteWaterCollectionAndTreatment = \"Renewal of waste water collection and treatment\",\n  CollectionAndTransportOfNonHazardousWasteInSourceSegregatedFractions = \"Collection and transport of non-hazardous waste in source segregated fractions\",\n  AnaerobicDigestionOfSewageSludge = \"Anaerobic digestion of sewage sludge\",\n  AnaerobicDigestionOfBioWaste = \"Anaerobic digestion of bio-waste\",\n  CompostingOfBioWaste = \"Composting of bio-waste\",\n  MaterialRecoveryFromNonHazardousWaste = \"Material recovery from non-hazardous waste\",\n  LandfillGasCaptureAndUtilisation = \"Landfill gas capture and utilisation\",\n  TransportOfCo2 = \"Transport of CO2\",\n  UndergroundPermanentGeologicalStorageOfCo2 = \"Underground permanent geological storage of CO2\",\n  PassengerInterurbanRailTransport = \"Passenger interurban rail transport\",\n  FreightRailTransport = \"Freight rail transport\",\n  UrbanAndSuburbanTransportRoadPassengerTransport = \"Urban and suburban transport, road passenger transport\",\n  OperationOfPersonalMobilityDevicesCycleLogistics = \"Operation of personal mobility devices, cycle logistics\",\n  TransportByMotorbikesPassengerCarsAndLightCommercialVehicles = \"Transport by motorbikes, passenger cars and light commercial vehicles\",\n  FreightTransportServicesByRoad = \"Freight transport services by road\",\n  InlandPassengerWaterTransport = \"Inland passenger water transport\",\n  InlandFreightWaterTransport = \"Inland freight water transport\",\n  RetrofittingOfInlandWaterPassengerAndFreightTransport = \"Retrofitting of inland water passenger and freight transport\",\n  SeaAndCoastalFreightWaterTransportVesselsForPortOperationsAndAuxiliaryActivities = \"Sea and coastal freight water transport, vessels for port operations and auxiliary activities\",\n  SeaAndCoastalPassengerWaterTransport = \"Sea and coastal passenger water transport\",\n  RetrofittingOfSeaAndCoastalFreightAndPassengerWaterTransport = \"Retrofitting of sea and coastal freight and passenger water transport\",\n  InfrastructureForPersonalMobilityCycleLogistics = \"Infrastructure for personal mobility, cycle logistics\",\n  InfrastructureForRailTransport = \"Infrastructure for rail transport\",\n  InfrastructureEnablingLowCarbonRoadTransportAndPublicTransport = \"Infrastructure enabling low-carbon road transport and public transport\",\n  InfrastructureEnablingLowCarbonWaterTransport = \"Infrastructure enabling low carbon water transport\",\n  LowCarbonAirportInfrastructure = \"Low carbon airport infrastructure\",\n  ConstructionOfNewBuildings = \"Construction of new buildings\",\n  RenovationOfExistingBuildings = \"Renovation of existing buildings\",\n  InstallationMaintenanceAndRepairOfEnergyEfficiencyEquipment = \"Installation, maintenance and repair of energy efficiency equipment\",\n  InstallationMaintenanceAndRepairOfChargingStationsForElectricVehiclesInBuildingsAndParkingSpacesAttachedToBuildings = \"Installation, maintenance and repair of charging stations for electric vehicles in buildings (and parking spaces attached to buildings)\",\n  InstallationMaintenanceAndRepairOfInstrumentsAndDevicesForMeasuringRegulationAndControllingEnergyPerformanceOfBuildings = \"Installation, maintenance and repair of instruments and devices for measuring, regulation and controlling energy performance of buildings\",\n  InstallationMaintenanceAndRepairOfRenewableEnergyTechnologies = \"Installation, maintenance and repair of renewable energy technologies\",\n  AcquisitionAndOwnershipOfBuildings = \"Acquisition and ownership of buildings\",\n  DataProcessingHostingAndRelatedActivities = \"Data processing, hosting and related activities\",\n  DataDrivenSolutionsForGhgEmissionsReductions = \"Data-driven solutions for GHG emissions reductions\",\n  CloseToMarketResearchDevelopmentAndInnovation = \"Close to market research, development and innovation\",\n  ResearchDevelopmentAndInnovationForDirectAirCaptureOfCo2 = \"Research, development and innovation for direct air capture of CO2\",\n  ProfessionalServicesRelatedToEnergyPerformanceOfBuildings = \"Professional services related to energy performance of buildings\",\n  InfrastructureEnablingRoadTransportAndPublicTransport = \"Infrastructure enabling road transport and public transport\",\n  InfrastructureForWaterTransport = \"Infrastructure for water transport\",\n  AirportInfrastructure = \"Airport infrastructure\",\n  ComputerProgrammingConsultancyAndRelatedActivities = \"Computer programming, consultancy and related activities\",\n  ProgrammingAndBroadcastingActivities = \"Programming and broadcasting activities\",\n  EngineeringActivitiesAndRelatedTechnicalConsultancyDedicatedToAdaptationToClimateChange = \"Engineering activities and related technical consultancy dedicated to adaptation to climate change\",\n  NonLifeInsuranceUnderwritingOfClimateRelatedPerils = \"Non-life insurance: underwriting of climate-related perils\",\n  Reinsurance = \"Reinsurance\",\n  Education = \"Education\",\n  ResidentialCareActivities = \"Residential care activities\",\n  CreativeArtsAndEntertainmentActivities = \"Creative, arts and entertainment activities\",\n  LibrariesArchivesMuseumsAndCulturalActivities = \"Libraries, archives, museums and cultural activities\",\n  MotionPictureVideoAndTelevisionProgrammeProductionSoundRecordingAndMusicPublishingActivities = \"Motion picture, video and television programme production, sound recording and music publishing activities\",\n}\n","import { type AmountWithCurrency } from \"@clients/backend\";\nimport { roundNumber } from \"@/utils/NumberConversionUtils\";\n\n/**\n * Formats a percentage number by multiplying it with 100, rounding it and afterward making it a string with a\n * percent symbol at the end.\n * @param percentageNumber is the percentage number to format\n * @param precision is the precision for the rounding of the percentage number\n * @returns the resulting string\n */\nexport function formatPercentageNumberAsString(percentageNumber?: number, precision = 2): string {\n  if (percentageNumber == undefined) {\n    return \"\";\n  }\n  return `${roundNumber(percentageNumber * 100, precision)} %`;\n}\n\n/**\n * Formats an AmountWithCurrency object by concatenating the amount and the currency.\n * @param amountWithCurrency the object that holds the amount and currency\n * @returns the resulting string from the concatenation\n */\nexport function formatAmountWithCurrency(amountWithCurrency: AmountWithCurrency): string {\n  if (amountWithCurrency?.amount == undefined) {\n    return \"\";\n  }\n  return `${amountWithCurrency.amount.toLocaleString(\"en-GB\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })}${amountWithCurrency.currency ? \" \" + amountWithCurrency.currency : \"\"}`;\n}\n\n/**\n * Formats number to be more readable.\n * @param value number to format\n * @returns formatted number (e.g. 1500600.0123 --> 1,500,600.01)\n */\nexport function formatNumberToReadableFormat(value: number | undefined): string {\n  if (value == undefined) {\n    return \"\";\n  }\n  if (value == 0) {\n    return \"0\";\n  }\n  return value.toLocaleString(\"en-GB\", {\n    maximumFractionDigits: 2,\n  });\n}\n","export const euTaxonomyForNonFinancialsModalColumnHeaders = {\n  alignedActivities: {\n    activityName: \"Activity\",\n    naceCodes: \"NACE Code(s)\",\n    share: \"Share\",\n    revenue: \"Revenue\",\n    revenuePercent: \"Revenue (%)\",\n    substantialContributionToClimateChangeMitigationInPercent: \"Climate Change Mitigation\",\n    substantialContributionToClimateChangeAdaptionInPercent: \"Climate Change Adaptation\",\n    substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:\n      \"Water and Marine Resources\",\n    substantialContributionToTransitionToACircularEconomyInPercent: \"Circular Economy\",\n    substantialContributionToPollutionPreventionAndControlInPercent: \"Pollution Prevention\",\n    substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:\n      \"Biodiversity and Ecosystems\",\n    dnshToClimateChangeMitigation: \"Climate Change Mitigation\",\n    dnshToClimateChangeAdaption: \"Climate Change Adaptation\",\n    dnshToSustainableUseAndProtectionOfWaterAndMarineResources: \"Water and Marine Resources\",\n    dnshToTransitionToACircularEconomy: \"Circular Economy\",\n    dnshToPollutionPreventionAndControl: \"Pollution Prevention\",\n    dnshToProtectionAndRestorationOfBiodiversityAndEcosystems: \"Biodiversity and Ecosystems\",\n    minimumSafeguards: \"Minimum safeguards\",\n    substantialContributionCriteria: \"Substantial Contribution Criteria\",\n    dnshCriteria: \"DNSH Criteria\",\n  },\n  nonAlignedActivities: {\n    activityName: \"Activity\",\n    naceCodes: \"NACE Code(s)\",\n    share: \"Share\",\n    revenue: \"Revenue\",\n    revenuePercent: \"Revenue (%)\",\n  },\n};\n\nexport const euTaxonomyObjectives = [\n  \"ClimateChangeMitigation\",\n  \"ClimateChangeAdaption\",\n  \"SustainableUseAndProtectionOfWaterAndMarineResources\",\n  \"TransitionToACircularEconomy\",\n  \"PollutionPreventionAndControl\",\n  \"ProtectionAndRestorationOfBiodiversityAndEcosystems\",\n];\n","<template>\n  <DataTable data-test=\"dataTableTest\" scrollable :value=\"frozenColumnData\" class=\"activities-data-table\">\n    <ColumnGroup data-test=\"columnGroupTest\" type=\"header\">\n      <Row>\n        <Column\n          header=\"\"\n          :frozen=\"true\"\n          alignFrozen=\"left\"\n          :colspan=\"2\"\n          class=\"frozen-row-header border-right\"\n          style=\"background-color: #fff\"\n        />\n        <Column\n          data-test=\"mainColumnTest\"\n          v-for=\"group of mainColumnGroups\"\n          :key=\"group.key\"\n          :header=\"group.label\"\n          :colspan=\"group.colspan\"\n          class=\"group-row-header\"\n        />\n      </Row>\n      <Row>\n        <Column\n          data-test=\"headerActivity\"\n          header=\"Activity\"\n          :frozen=\"true\"\n          alignFrozen=\"left\"\n          class=\"frozen-row-header\"\n        />\n        <Column header=\"NACE Code(s)\" :frozen=\"true\" alignFrozen=\"left\" class=\"frozen-row-header border-right\" />\n        <Column\n          v-for=\"col of mainColumnDefinitions\"\n          :key=\"col.field\"\n          :header=\"col.header\"\n          :field=\"col.field\"\n          :class=\"groupColumnCssClasses(col, 'non-frozen-header')\"\n        />\n      </Row>\n    </ColumnGroup>\n    <Column\n      v-for=\"col of frozenColumnDefinitions\"\n      :field=\"col.field\"\n      :key=\"col.field\"\n      :header=\"col.header\"\n      :frozen=\"col.frozen\"\n      :class=\"columnCss(col.field)\"\n      bodyClass=\"headers-bg\"\n      headerClass=\"horizontal-headers-size\"\n    >\n      <template #body=\"{ data }\">\n        <template v-if=\"col.field === 'activity'\">{{ activityApiNameToHumanizedName(data.activity) }}</template>\n        <template v-else>\n          <ul class=\"unstyled-ul-list grid4\">\n            <li v-for=\"code of data.naceCodes\" :key=\"code\">{{ code }}</li>\n          </ul>\n        </template>\n      </template>\n    </Column>\n    <Column\n      v-for=\"col of mainColumnDefinitions\"\n      :field=\"col.field\"\n      :key=\"col.field\"\n      :header=\"col.header\"\n      bodyClass=\"col-value\"\n      headerClass=\"horizontal-headers-size\"\n      :class=\"groupColumnCssClasses(col)\"\n    >\n      <template #body=\"{ data }\">\n        {{ findContentFromActivityGroupAndField(data.activity, col.group, col.field) }}\n      </template>\n    </Column>\n  </DataTable>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport DataTable from \"primevue/datatable\";\nimport Column from \"primevue/column\";\nimport ColumnGroup from \"primevue/columngroup\";\nimport Row from \"primevue/row\";\nimport { type DynamicDialogInstance } from \"primevue/dynamicdialogoptions\";\nimport {\n  type YesNo,\n  type Activity,\n  type EuTaxonomyAlignedActivity,\n} from \"@clients/backend/org/dataland/datalandfrontend/openApiClient/backend/model\";\nimport { activityApiNameToHumanizedName } from \"@/components/resources/frameworkDataSearch/euTaxonomy/ActivityName\";\nimport { formatAmountWithCurrency, formatPercentageNumberAsString } from \"@/utils/Formatter\";\nimport { euTaxonomyObjectives } from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsModalColumnHeaders\";\n\ntype ActivityFieldValueObject = {\n  activity: string;\n  group: string;\n  field: string;\n  content: string;\n};\n\ntype MainColumnDefinition = {\n  field: string;\n  header: string;\n  frozen?: boolean;\n  group: string;\n  groupIndex: number;\n};\n\nexport default defineComponent({\n  inject: [\"dialogRef\"],\n  name: \"AlignedActivitiesDataTable\",\n  components: { DataTable, Column, ColumnGroup, Row },\n  data() {\n    return {\n      listOfRowContents: [] as Array<EuTaxonomyAlignedActivity>,\n      kpiKeyOfTable: \"\" as string,\n      columnHeaders: {} as { [kpiKeyOfTable: string]: { [columnName: string]: string } },\n      frozenColumnDefinitions: [] as Array<{ field: string; header: string; frozen?: boolean; group: string }>,\n      mainColumnGroups: [] as Array<{ key: string; label: string; colspan: number }>,\n      mainColumnDefinitions: [] as Array<MainColumnDefinition>,\n      frozenColumnData: [] as Array<{\n        activity: Activity | undefined;\n        naceCodes: string[] | undefined;\n      }>,\n      mainColumnData: [] as Array<ActivityFieldValueObject>,\n    };\n  },\n  mounted() {\n    const dialogRefToDisplay = this.dialogRef as DynamicDialogInstance;\n    const dialogRefData = dialogRefToDisplay.data as {\n      listOfRowContents: Array<object | string>;\n      kpiKeyOfTable: string;\n      columnHeaders: { [kpiKeyOfTable: string]: { [columnName: string]: string } };\n    };\n    this.kpiKeyOfTable = dialogRefData.kpiKeyOfTable;\n    this.columnHeaders = dialogRefData.columnHeaders;\n\n    if (typeof dialogRefData.listOfRowContents[0] === \"string\") {\n      this.listOfRowContents = dialogRefData.listOfRowContents.map((o) => ({ [this.kpiKeyOfTable]: o }));\n    } else {\n      this.listOfRowContents = dialogRefData.listOfRowContents as Array<EuTaxonomyAlignedActivity>;\n    }\n\n    this.frozenColumnDefinitions = [\n      { field: \"activity\", header: this.humanizeHeaderName(\"activity\"), frozen: true, group: \"_frozen\" },\n      { field: \"naceCodes\", header: this.humanizeHeaderName(\"naceCodes\"), frozen: true, group: \"_frozen\" },\n    ];\n\n    this.mainColumnDefinitions = [\n      { field: \"revenue\", header: this.humanizeHeaderName(\"revenue\"), group: \"_revenue\", groupIndex: 0 },\n      { field: \"revenuePercent\", header: this.humanizeHeaderName(\"revenuePercent\"), group: \"_revenue\", groupIndex: 1 },\n\n      ...this.makeGroupColumns(\"substantialContributionCriteria\", \"substantialContribution\"),\n      ...this.makeGroupColumns(\"dnshCriteria\", \"dnsh\"),\n\n      {\n        field: \"minimumSafeguards\",\n        header: this.humanizeHeaderName(\"minimumSafeguards\"),\n        group: \"_minimumSafeguards\",\n        groupIndex: 0,\n      },\n    ];\n\n    this.frozenColumnData = this.listOfRowContents.map((activity) => ({\n      activity: activity.activityName,\n      naceCodes: activity.naceCodes,\n    }));\n\n    this.mainColumnData = this.listOfRowContents\n      .map((col) => [\n        ...createRevenueGroupData(col),\n        ...createActivityGroupData<number>(\n          col.activityName as string,\n          \"substantialContributionCriteria\",\n          {\n            substantialContributionToClimateChangeMitigationInPercent:\n              col.substantialContributionToClimateChangeMitigationInPercent,\n            substantialContributionToClimateChangeAdaptionInPercent:\n              col.substantialContributionToClimateChangeAdaptionInPercent,\n            substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:\n              col.substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent,\n            substantialContributionToTransitionToACircularEconomyInPercent:\n              col.substantialContributionToTransitionToACircularEconomyInPercent,\n            substantialContributionToPollutionPreventionAndControlInPercent:\n              col.substantialContributionToPollutionPreventionAndControlInPercent,\n            substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:\n              col.substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent,\n          },\n          formatPercentageNumberAsString,\n        ),\n        ...createActivityGroupData<YesNo>(\n          col.activityName as string,\n          \"dnshCriteria\",\n          {\n            dnshToClimateChangeMitigation: col.dnshToClimateChangeMitigation,\n            dnshToClimateChangeAdaption: col.dnshToClimateChangeAdaption,\n            dnshToSustainableUseAndProtectionOfWaterAndMarineResources:\n              col.dnshToSustainableUseAndProtectionOfWaterAndMarineResources,\n            dnshToTransitionToACircularEconomy: col.dnshToTransitionToACircularEconomy,\n            dnshToPollutionPreventionAndControl: col.dnshToPollutionPreventionAndControl,\n            dnshToProtectionAndRestorationOfBiodiversityAndEcosystems:\n              col.dnshToProtectionAndRestorationOfBiodiversityAndEcosystems,\n          },\n          (value: YesNo) => (value ? `${value}` : \"\"),\n        ),\n        ...createMinimumSafeguardsGroupData(col),\n      ])\n      .flat();\n\n    this.mainColumnGroups = [\n      { key: \"_revenue\", label: \"\", colspan: this.findMaxColspanForGroup(\"_revenue\") },\n      {\n        key: \"substantialContributionCriteria\",\n        label: this.humanizeHeaderName(\"substantialContributionCriteria\"),\n        colspan: this.findMaxColspanForGroup(\"substantialContributionCriteria\"),\n      },\n      {\n        key: \"dnshCriteria\",\n        label: this.humanizeHeaderName(\"dnshCriteria\"),\n        colspan: this.findMaxColspanForGroup(\"dnshCriteria\"),\n      },\n      { key: \"_minimumSafeguards\", label: \"\", colspan: this.findMaxColspanForGroup(\"_minimumSafeguards\") },\n    ];\n  },\n  methods: {\n    activityApiNameToHumanizedName,\n    /**\n     * @param groupName name of the group to count number of fields\n     * @returns the maximum value of fields per activity and group\n     */\n    findMaxColspanForGroup(groupName: string): number {\n      const environmentalObjectivesLength = euTaxonomyObjectives.length;\n      const colspans: { [groupName: string]: number } = {\n        _revenue: 2,\n        substantialContributionCriteria: environmentalObjectivesLength,\n        dnshCriteria: environmentalObjectivesLength,\n        _minimumSafeguards: 1,\n      };\n      return colspans[groupName];\n    },\n    /**\n     * Search mainColumnData for specific item and return it's value\n     * @param activityName name of the targeted activity\n     * @param groupName name of the targeted group\n     * @param fieldName name of the targeted field\n     * @returns string value from main data\n     */\n    findContentFromActivityGroupAndField(activityName: string, groupName: string, fieldName: string) {\n      const value = this.mainColumnData.find(\n        (item) => item.activity === activityName && item.group === groupName && item.field === fieldName,\n      );\n      return value ? value.content : \"\";\n    },\n\n    /**\n     * @param groupName the name of the group to which columns will be assigned\n     * @param prefix prefix\n     * @returns column definitions for group\n     */\n    makeGroupColumns(groupName: string, prefix: string) {\n      const environmentalObjectiveKeys = euTaxonomyObjectives.map((suffix) => {\n        const extendedKey = `${prefix}To${suffix}`;\n        if (prefix === \"dnsh\") {\n          return extendedKey;\n        } else {\n          return `${extendedKey}InPercent`;\n        }\n      });\n      return environmentalObjectiveKeys.map((environmentalObjectiveKey: string, index: number) => ({\n        field: environmentalObjectiveKey,\n        header: this.humanizeHeaderName(environmentalObjectiveKey),\n        group: groupName,\n        groupIndex: index,\n      }));\n    },\n\n    /**\n     * @param key Define the column's CSS class\n     * @returns CSS class name\n     */\n    columnCss(key: string): string {\n      switch (key) {\n        case \"activity\":\n          return \"col-activity\";\n        case \"naceCodes\":\n          return \"col-nace-codes\";\n        default:\n          return \"\";\n      }\n    },\n    /**\n     * @param columnDefinition column definition we check against\n     * @param additionalClasses (optional) any additional classes to be added\n     * @returns classes for specific columns\n     */\n    groupColumnCssClasses(columnDefinition: MainColumnDefinition, additionalClasses = \"\"): string {\n      if (columnDefinition.groupIndex === 0) return `first-group-column ${additionalClasses}`;\n      return additionalClasses;\n    },\n    /**\n     * @param key the item to lookup\n     * @returns the display version of the column header\n     */\n    humanizeHeaderName(key: string) {\n      return this.columnHeaders[this.kpiKeyOfTable][key];\n    },\n  },\n});\n\n/**\n * @param activity targeted activity object\n * @returns list of revenue data items\n */\nfunction createRevenueGroupData(activity: EuTaxonomyAlignedActivity): ActivityFieldValueObject[] {\n  return [\n    {\n      activity: activity.activityName as Activity,\n      group: \"_revenue\",\n      field: \"revenue\",\n      content: formatAmountWithCurrency(activity.share?.absoluteShare),\n    },\n    {\n      activity: activity.activityName as Activity,\n      group: \"_revenue\",\n      field: \"revenuePercent\",\n      content: formatPercentageNumberAsString(activity.share?.relativeShareInPercent),\n    },\n  ];\n}\n\n/**\n * @param activityName name of the activity\n * @param groupName the name of the group to which the fields will be assigned to\n * @param fields collection of fields and their values\n * @param valueFormatter function which formats the final look of the value\n * @returns grouped list of data items\n */\nfunction createActivityGroupData<T>(\n  activityName: string,\n  groupName: string,\n  fields: { [key: string]: T } | undefined,\n  valueFormatter: (value: T) => string,\n): ActivityFieldValueObject[] {\n  const fieldsEntries = Object.entries(fields ?? {});\n  return fieldsEntries\n    .filter(([, value]) => value != null)\n    .map(([field, value]) => {\n      return {\n        activity: activityName,\n        group: groupName,\n        field,\n        content: valueFormatter(value) ?? \"\",\n      };\n    });\n}\n\n/**\n * @param activity targeted activity object\n * @returns list of minimum safeguards data items\n */\nfunction createMinimumSafeguardsGroupData(activity: EuTaxonomyAlignedActivity): ActivityFieldValueObject[] {\n  return [\n    {\n      activity: activity.activityName as string,\n      group: \"_minimumSafeguards\",\n      field: \"minimumSafeguards\",\n      content: activity.minimumSafeguards ?? \"\",\n    },\n  ];\n}\n</script>\n","<template>\n  <DataTable data-test=\"dataTableTest\" :value=\"mainColumnData\" class=\"activities-data-table\">\n    <Column\n      v-for=\"col of mainColumnDefinitions\"\n      :field=\"col.field\"\n      :key=\"col.field\"\n      :header=\"col.header\"\n      :headerClass=\"cellClass(col)\"\n      :bodyClass=\"cellClass(col)\"\n    >\n      <template #body=\"{ data }\">\n        <template v-if=\"col.field === 'activity'\">{{ activityApiNameToHumanizedName(data.activity) }}</template>\n        <template v-else-if=\"col.field === 'naceCodes'\">\n          <ul class=\"unstyled-ul-list\">\n            <li v-for=\"code of data.naceCodes\" :key=\"code\">{{ code }}</li>\n          </ul>\n        </template>\n        <template v-else>\n          {{ data[col.field] }}\n        </template>\n      </template>\n    </Column>\n  </DataTable>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport DataTable from \"primevue/datatable\";\nimport Column from \"primevue/column\";\nimport { type DynamicDialogInstance } from \"primevue/dynamicdialogoptions\";\nimport { activityApiNameToHumanizedName } from \"@/components/resources/frameworkDataSearch/euTaxonomy/ActivityName\";\nimport { type EuTaxonomyAlignedActivity } from \"@clients/backend/org/dataland/datalandfrontend/openApiClient/backend/model\";\nimport { formatAmountWithCurrency, formatPercentageNumberAsString } from \"@/utils/Formatter\";\n\ntype NonAlignedActivityFieldValueObject = {\n  activity: string;\n  naceCodes: string[];\n  revenue: string;\n  revenuePercent: string;\n};\n\ntype MainColumnDefinition = {\n  field: string;\n  header: string;\n};\n\nexport default defineComponent({\n  inject: [\"dialogRef\"],\n  name: \"NonAlignedActivitiesDataTable\",\n  components: { DataTable, Column },\n  data() {\n    return {\n      listOfRowContents: [] as Array<EuTaxonomyAlignedActivity>,\n      kpiKeyOfTable: \"\" as string,\n      columnHeaders: {} as { [kpiKeyOfTable: string]: { [columnName: string]: string } },\n      mainColumnDefinitions: [] as Array<MainColumnDefinition>,\n      mainColumnData: [] as Array<NonAlignedActivityFieldValueObject>,\n    };\n  },\n  mounted() {\n    const dialogRefToDisplay = this.dialogRef as DynamicDialogInstance;\n    const dialogRefData = dialogRefToDisplay.data as {\n      listOfRowContents: Array<object | string>;\n      kpiKeyOfTable: string;\n      columnHeaders: { [kpiKeyOfTable: string]: { [columnName: string]: string } };\n    };\n    this.kpiKeyOfTable = dialogRefData.kpiKeyOfTable;\n    this.columnHeaders = dialogRefData.columnHeaders;\n\n    if (typeof dialogRefData.listOfRowContents[0] === \"string\") {\n      this.listOfRowContents = dialogRefData.listOfRowContents.map((o) => ({ [this.kpiKeyOfTable]: o }));\n    } else {\n      this.listOfRowContents = dialogRefData.listOfRowContents as Array<EuTaxonomyAlignedActivity>;\n    }\n\n    this.mainColumnDefinitions = [\n      { field: \"activity\", header: this.humanizeHeaderName(\"activityName\") },\n      { field: \"naceCodes\", header: this.humanizeHeaderName(\"naceCodes\") },\n      { field: \"revenue\", header: this.humanizeHeaderName(\"revenue\") },\n      { field: \"revenuePercent\", header: this.humanizeHeaderName(\"revenuePercent\") },\n    ];\n\n    this.mainColumnData = this.listOfRowContents.map((activity) => ({\n      activity: activity.activityName as string,\n      naceCodes: activity.naceCodes as string[],\n      revenue: formatAmountWithCurrency(activity.share?.absoluteShare),\n      revenuePercent: formatPercentageNumberAsString(activity.share?.relativeShareInPercent),\n    }));\n  },\n  methods: {\n    activityApiNameToHumanizedName,\n    /**\n     * @param key the item to lookup\n     * @returns the display version of the column header\n     */\n    humanizeHeaderName(key: string) {\n      return this.columnHeaders[this.kpiKeyOfTable][key];\n    },\n    /**\n     *\n     * @param col definition of column\n     * @returns class names determined by column\n     */\n    cellClass(col: MainColumnDefinition): string {\n      if (col.field === \"activity\") {\n        return \"col-activity headers-bg border-bottom\";\n      } else if (col.field === \"naceCodes\") {\n        return \"col-nace-codes headers-bg border-bottom\";\n      }\n      return \"horizontal-headers-size border-bottom\";\n    },\n  },\n});\n</script>\n","<template>\n  <div class=\"card\">\n    <DataTable\n      :value=\"arrayOfKpiDataObjects\"\n      rowGroupMode=\"subheader\"\n      groupRowsBy=\"subcategoryKey\"\n      dataKey=\"subcategoryKey\"\n      :sortField=\"sortBySubcategoryKey ? 'subcategoryKey' : undefined\"\n      :sortOrder=\"sortBySubcategoryKey ? 1 : undefined\"\n      sortMode=\"single\"\n      :expandableRowGroups=\"true\"\n      :headerInputStyle=\"headerInputStyle\"\n      v-model:expandedRowGroups=\"expandedRowGroups\"\n    >\n      <Column\n        bodyClass=\"headers-bg\"\n        headerClass=\"horizontal-headers-size\"\n        :headerStyle=\"headerInputStyle\"\n        field=\"kpiKey\"\n        header=\"KPIs\"\n      >\n        <template #body=\"slotProps\">\n          <span class=\"table-left-label\" :data-test=\"slotProps.data.kpiKey\">{{ slotProps.data.kpiLabel }}</span>\n          <em\n            v-if=\"slotProps.data.kpiDescription\"\n            class=\"material-icons info-icon\"\n            aria-hidden=\"true\"\n            :title=\"slotProps.data.kpiLabel ? slotProps.data.kpiLabel : ''\"\n            v-tooltip.top=\"{\n              value: slotProps.data.kpiDescription ? slotProps.data.kpiDescription : '',\n            }\"\n            >info</em\n          >\n        </template>\n      </Column>\n      <Column\n        v-for=\"reportingPeriodWithDataId of listOfReportingPeriodsWithDataId\"\n        headerClass=\"horizontal-headers-size\"\n        :headerStyle=\"headerInputStyle\"\n        :field=\"reportingPeriodWithDataId.dataId\"\n        :header=\"reportingPeriodWithDataId.reportingPeriod\"\n        :key=\"reportingPeriodWithDataId.dataId\"\n      >\n        <template #body=\"slotProps\">\n          <template\n            v-if=\"\n              slotProps.data.content[reportingPeriodWithDataId.dataId] !== undefined &&\n              slotProps.data.content[reportingPeriodWithDataId.dataId] !== null\n            \"\n          >\n            <span\n              :data-test=\"`${reportingPeriodWithDataId.reportingPeriod}_${slotProps.data.categoryKey}_${slotProps.data.kpiKey}`\"\n            >\n              <template v-if=\"Array.isArray(slotProps.data.content[reportingPeriodWithDataId.dataId])\">\n                <a\n                  v-if=\"\n                    slotProps.data.content[reportingPeriodWithDataId.dataId].length > 1 ||\n                    slotProps.data.content[reportingPeriodWithDataId.dataId].some((el) => typeof el === 'object')\n                  \"\n                  @click=\"\n                    openModalAndDisplayValuesInSubTable(\n                      slotProps.data.content[reportingPeriodWithDataId.dataId],\n                      slotProps.data.kpiLabel,\n                      slotProps.data.kpiKey,\n                      slotProps.data.kpiFormFieldComponent,\n                    )\n                  \"\n                  class=\"link\"\n                  >Show \"{{ slotProps.data.kpiLabel }}\"\n                  <em class=\"material-icons\" aria-hidden=\"true\" title=\"\"> dataset </em>\n                </a>\n\n                <span v-else> {{ slotProps.data.content[reportingPeriodWithDataId.dataId][0] }} </span>\n              </template>\n              <span\n                v-else-if=\"\n                  slotProps.data.kpiFormFieldComponent === 'PercentageFormField' &&\n                  slotProps.data.content[reportingPeriodWithDataId.dataId] !== ''\n                \"\n              >\n                {{ slotProps.data.content[reportingPeriodWithDataId.dataId] }}</span\n              >\n              <span\n                v-else-if=\"\n                  typeof slotProps.data.content[reportingPeriodWithDataId.dataId] === 'object' &&\n                  slotProps.data.content[reportingPeriodWithDataId.dataId]?.value !== undefined\n                \"\n              >\n                <span\n                  v-if=\"\n                    isYesNo(slotProps.data.content[reportingPeriodWithDataId.dataId].value) &&\n                    hasDocument(slotProps.data.content[reportingPeriodWithDataId.dataId])\n                  \"\n                >\n                  <DocumentLink\n                    :label=\"yesLabelMap.get(isCertificate(slotProps.data.kpiLabel))\"\n                    :download-name=\"slotProps.data.content[reportingPeriodWithDataId.dataId].dataSource.name\"\n                    :reference=\"slotProps.data.content[reportingPeriodWithDataId.dataId].dataSource.reference\"\n                    show-icon\n                  />\n                </span>\n                <span\n                  v-else-if=\"\n                    isYesNo(slotProps.data.content[reportingPeriodWithDataId.dataId].value) &&\n                    isCertificate(slotProps.data.kpiLabel)\n                  \"\n                >\n                  {{\n                    slotProps.data.content[reportingPeriodWithDataId.dataId].value === YesNo.Yes\n                      ? yesLabelMap.get(true)\n                      : noLabelMap.get(true)\n                  }}\n                </span>\n                <span v-else>{{ slotProps.data.content[reportingPeriodWithDataId.dataId].value }}</span>\n              </span>\n              <span v-else style=\"white-space: pre-wrap\">{{\n                slotProps.data.content[reportingPeriodWithDataId.dataId]\n              }}</span>\n            </span>\n          </template>\n        </template>\n      </Column>\n\n      <Column field=\"subcategoryKey\"></Column>\n      <template #groupheader=\"slotProps\">\n        <span\n          :data-test=\"slotProps.data.subcategoryKey\"\n          :data-table-id=\"dataTableIdentifier\"\n          :id=\"slotProps.data.subcategoryKey\"\n          data-row-header-click\n          style=\"cursor: pointer\"\n        >\n          {{ slotProps.data.subcategoryLabel ? slotProps.data.subcategoryLabel : slotProps.data.subcategoryKey }}\n        </span>\n      </template>\n    </DataTable>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport DocumentLink from \"@/components/resources/frameworkDataSearch/DocumentLink.vue\";\nimport { type KpiDataObject } from \"@/components/resources/frameworkDataSearch/KpiDataObject\";\nimport {\n  type ReportingPeriodOfDataSetWithId,\n  mountRowHeaderClickEventListeners,\n  unmountRowHeaderClickEventListeners,\n} from \"@/utils/DataTableDisplay\";\nimport { type BaseDataPointYesNo, YesNo } from \"@clients/backend\";\nimport Column from \"primevue/column\";\nimport DataTable from \"primevue/datatable\";\nimport Tooltip from \"primevue/tooltip\";\nimport { defineComponent, type PropType } from \"vue\";\nimport DetailsCompanyDataTable from \"@/components/general/DetailsCompanyDataTable.vue\";\nimport AlignedActivitiesDataTable from \"@/components/general/AlignedActivitiesDataTable.vue\";\nimport NonAlignedActivitiesDataTable from \"@/components/general/NonAlignedActivitiesDataTable.vue\";\n\nexport default defineComponent({\n  name: \"TwoLayerDataTable\",\n  components: { DataTable, Column, DocumentLink },\n  directives: {\n    tooltip: Tooltip,\n  },\n  data() {\n    return {\n      expandedRowGroups: [\"_masterData\", \"_general\", \"_basicInformation\"],\n      yesLabelMap: new Map<boolean, string>([\n        [true, \"Certified\"],\n        [false, \"Yes\"],\n      ]),\n      noLabelMap: new Map<boolean, string>([\n        [true, \"Uncertified\"],\n        [false, \"No\"],\n      ]),\n      YesNo,\n      rowClickHandlersMap: new Map() as Map<Element, EventListener>,\n      dataTableIdentifier: \"\" as string,\n    };\n  },\n  props: {\n    arrayOfKpiDataObjects: {\n      type: Array as PropType<Array<KpiDataObject>>,\n      default: () => [],\n    },\n    headerInputStyle: {\n      type: String,\n    },\n    listOfReportingPeriodsWithDataId: {\n      type: Array as PropType<Array<ReportingPeriodOfDataSetWithId>>,\n      default: () => [],\n    },\n    modalColumnHeaders: {\n      type: Object,\n      default: () => ({}),\n    },\n    sortBySubcategoryKey: {\n      type: Boolean,\n      default: true,\n    },\n    unfoldSubcategories: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  created() {\n    if (this.unfoldSubcategories) {\n      this.expandedRowGroups = this.arrayOfKpiDataObjects?.map((kpiDataObject) => kpiDataObject.subcategoryKey) ?? [];\n    }\n    this.dataTableIdentifier = (Math.random() + 1).toString(36).substring(2);\n    setTimeout(() => {\n      this.rowClickHandlersMap = mountRowHeaderClickEventListeners(\n        this.dataTableIdentifier,\n        () => this.expandedRowGroups,\n        (expandedRowGroups) => (this.expandedRowGroups = expandedRowGroups),\n      );\n    });\n  },\n  unmounted() {\n    unmountRowHeaderClickEventListeners(this.rowClickHandlersMap);\n    this.rowClickHandlersMap = new Map();\n  },\n  methods: {\n    /**\n     * Checks if the BaseDataPoint holds a document reference\n     * @param dataPoint the object to check for a reference\n     * @returns true if the data point contains a document reference and has the appropriate value\n     */\n    hasDocument(dataPoint: BaseDataPointYesNo): boolean {\n      return (\n        dataPoint?.value === YesNo.Yes &&\n        dataPoint?.dataSource?.reference != undefined &&\n        dataPoint.dataSource.reference.length > 0\n      );\n    },\n    /**\n     * Checks if a label belongs to a certificate\n     * @param label the label to check\n     * @returns true if the label belongs to a certificate\n     */\n    isCertificate(label: string): boolean {\n      const lowerCaseLabel = label.toLowerCase();\n      return lowerCaseLabel.includes(\"certificate\") || lowerCaseLabel.includes(\"certification\");\n    },\n    /**\n     * Checks if a string is 'Yes' or 'No'\n     * @param value the string to check\n     * @returns true if the string is 'Yes' or 'No'\n     */\n    isYesNo(value: string) {\n      return Object.values(YesNo).includes(value);\n    },\n    /**\n     * Opens a modal to display a table with the provided list of production sites\n     * @param listOfValues An array consisting of the data to display\n     * @param modalTitle The title for the modal, which is derived from the key of the KPI\n     * @param kpiKey the key of the KPI used to determine the type of Subtable that needs to be displayed\n     * @param kpiFormFieldComponent determine whether a specific component should be used to render data\n     */\n    openModalAndDisplayValuesInSubTable(\n      listOfValues: [],\n      modalTitle: string,\n      kpiKey: string,\n      kpiFormFieldComponent = \"DetailsCompanyDataTable\",\n    ) {\n      let kpiDataComponent:\n        | typeof DetailsCompanyDataTable\n        | typeof AlignedActivitiesDataTable\n        | typeof NonAlignedActivitiesDataTable;\n      if (kpiFormFieldComponent === \"AlignedActivitiesDataTable\") {\n        kpiDataComponent = AlignedActivitiesDataTable;\n      } else if (kpiFormFieldComponent === \"NonAlignedActivitiesDataTable\") {\n        kpiDataComponent = NonAlignedActivitiesDataTable;\n      } else {\n        kpiDataComponent = DetailsCompanyDataTable;\n      }\n\n      const dialogData = {\n        listOfRowContents: listOfValues,\n        kpiKeyOfTable: kpiKey,\n        columnHeaders: this.modalColumnHeaders,\n      };\n\n      this.$dialog.open(kpiDataComponent, {\n        props: {\n          header: modalTitle,\n          modal: true,\n          dismissableMask: true,\n        },\n        data: dialogData,\n      });\n    },\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.p-rowgroup-footer td {\n  font-weight: 500;\n}\n\n::v-deep(.p-rowgroup-header) {\n  span {\n    font-weight: 500;\n  }\n\n  .p-row-toggler {\n    vertical-align: middle;\n    margin-right: 0.25rem;\n    float: right;\n    cursor: pointer;\n  }\n}\n</style>\n","export const lksgModalColumnHeaders = {\n  listOfProductionSites: {\n    nameOfProductionSite: \"Name\",\n    addressOfProductionSite: \"Address\",\n    listOfGoodsOrServices: \"List of Goods or Services\",\n  },\n  mostImportantProducts: {\n    name: \"Product Name\",\n    productionSteps: \"Production Steps\",\n    relatedCorporateSupplyChain: \"Related Corporate Supply Chain\",\n  },\n  procurementCategories: {\n    procurementCategory: \"Procurement Category\",\n    definitionsOfProductTypeOrService: \"Definitions of Product Type or Service\",\n    suppliersAndCountries: \"Number of Direct Suppliers and Countries\",\n    percentageOfTotalProcurement: \"Order Volume\",\n  },\n  industry: {\n    industry: \"NACE Code\",\n  },\n  subcontractingCompaniesIndustries: {\n    subcontractingCompaniesIndustries: \"NACE Code\",\n  },\n  highRiskCountriesRawMaterialsLocation: {\n    highRiskCountriesRawMaterialsLocation: \"Countries\",\n  },\n  highRiskCountries: {\n    highRiskCountries: \"Countries\",\n  },\n  subcontractingCompaniesCountries: {\n    subcontractingCompaniesCountries: \"Countries\",\n  },\n};\n","<template>\n  <div v-if=\"waitingForData\" class=\"d-center-div text-center px-7 py-4\">\n    <p class=\"font-medium text-xl\">Loading LkSG Data...</p>\n    <em class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n  </div>\n  <div v-if=\"mapOfKpiKeysToDataObjects.size > 0 && !waitingForData\">\n    <TwoLayerDataTable\n      :arrayOfKpiDataObjects=\"Array.from(mapOfKpiKeysToDataObjects.values())\"\n      :list-of-reporting-periods-with-data-id=\"arrayOfReportingPeriodWithDataId\"\n      :modal-column-headers=\"lksgModalColumnHeaders\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { type KpiDataObject, type KpiValue } from \"@/components/resources/frameworkDataSearch/KpiDataObject\";\nimport { PanelProps } from \"@/components/resources/frameworkDataSearch/PanelComponentOptions\";\nimport TwoLayerDataTable from \"@/components/resources/frameworkDataSearch/TwoLayerDataTable.vue\";\nimport { lksgDataModel } from \"@/components/resources/frameworkDataSearch/lksg/LksgDataModel\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { type ReportingPeriodOfDataSetWithId, sortReportingPeriodsToDisplayAsColumns } from \"@/utils/DataTableDisplay\";\nimport { type Subcategory, type Field } from \"@/utils/GenericFrameworkTypes\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { type DataAndMetaInformationLksgData, type LksgData, type LksgProcurementCategory } from \"@clients/backend\";\nimport type Keycloak from \"keycloak-js\";\nimport { defineComponent, inject } from \"vue\";\nimport { type ProcurementCategoryType } from \"@/api-models/ProcurementCategoryType\";\nimport { getCountryNameFromCountryCode } from \"@/utils/CountryCodeConverter\";\nimport { type DropdownOption } from \"@/utils/PremadeDropdownDatasets\";\nimport { lksgModalColumnHeaders } from \"@/components/resources/frameworkDataSearch/lksg/LksgModalColumnHeaders\";\nimport { convertToMillions } from \"@/utils/NumberConversionUtils\";\nimport { convertNace } from \"@/utils/NaceCodeConverter\";\nimport { formatNumberToReadableFormat, formatPercentageNumberAsString } from \"@/utils/Formatter\";\n\nexport default defineComponent({\n  name: \"LksgPanel\",\n  components: { TwoLayerDataTable: TwoLayerDataTable },\n  data() {\n    return {\n      firstRender: true,\n      waitingForData: true,\n      lksgDataAndMetaInfo: [] as Array<DataAndMetaInformationLksgData>,\n      arrayOfReportingPeriodWithDataId: [] as Array<ReportingPeriodOfDataSetWithId>,\n      mapOfKpiKeysToDataObjects: new Map() as Map<string, KpiDataObject>,\n      lksgModalColumnHeaders,\n    };\n  },\n  props: PanelProps,\n  watch: {\n    companyId() {\n      this.arrayOfReportingPeriodWithDataId = [];\n      void this.fetchLksgData();\n    },\n    singleDataMetaInfoToDisplay() {\n      if (!this.firstRender) {\n        this.arrayOfReportingPeriodWithDataId = [];\n        void this.fetchLksgData();\n      }\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  created() {\n    void this.fetchLksgData();\n    this.firstRender = false;\n  },\n  methods: {\n    /**\n     * Fetches all accepted LkSG datasets for the current company and converts them to the required frontend format.\n     */\n    async fetchLksgData() {\n      try {\n        this.waitingForData = true;\n        const lksgDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getLksgDataControllerApi();\n        if (this.singleDataMetaInfoToDisplay) {\n          const singleLksgData = (\n            await lksgDataControllerApi.getCompanyAssociatedLksgData(this.singleDataMetaInfoToDisplay.dataId)\n          ).data.data;\n\n          this.lksgDataAndMetaInfo = [{ metaInfo: this.singleDataMetaInfoToDisplay, data: singleLksgData }];\n        } else {\n          this.lksgDataAndMetaInfo = (\n            await lksgDataControllerApi.getAllCompanyLksgData(assertDefined(this.companyId))\n          ).data;\n        }\n        this.convertLksgDataToFrontendFormat();\n        this.waitingForData = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    /**\n     * Creates kpi data objects to pass them to the data table.\n     * @param kpiKey The field name of a kpi\n     * @param kpiValue The corresponding value to the kpiKey\n     * @param subcategory The sub category to which the kpi belongs\n     * @param dataIdOfLksgDataset The value of the date kpi of an LkSG dataset\n     */\n    createKpiDataObjects(\n      kpiKey: string,\n      kpiValue: KpiValue,\n      subcategory: Subcategory,\n      dataIdOfLksgDataset: string,\n    ): void {\n      const kpiField = assertDefined(subcategory.fields.find((field) => field.name === kpiKey));\n\n      const kpiData = {\n        subcategoryKey: subcategory.name == \"masterData\" ? `_${subcategory.name}` : subcategory.name,\n        subcategoryLabel: subcategory.label ? subcategory.label : subcategory.name,\n        kpiKey: kpiKey,\n        kpiLabel: kpiField?.label ? kpiField.label : kpiKey,\n        kpiDescription: kpiField?.description ? kpiField.description : \"\",\n        kpiFormFieldComponent: kpiField?.component ?? \"\",\n        content: { [dataIdOfLksgDataset]: this.reformatValueForDisplay(kpiField, kpiValue ?? \"\") },\n      } as KpiDataObject;\n      if (this.mapOfKpiKeysToDataObjects.has(kpiKey)) {\n        Object.assign(kpiData.content, this.mapOfKpiKeysToDataObjects.get(kpiKey)?.content);\n      }\n      this.mapOfKpiKeysToDataObjects.set(kpiKey, kpiData);\n    },\n\n    /**\n     * Retrieves and converts the stored array of LkSG datasets in order to make it displayable in the frontend.\n     */\n    convertLksgDataToFrontendFormat(): void {\n      if (this.lksgDataAndMetaInfo.length) {\n        this.lksgDataAndMetaInfo.forEach((currentLksgDataset: DataAndMetaInformationLksgData) => {\n          const dataIdOfLksgDataset = currentLksgDataset.metaInfo?.dataId ?? \"\";\n          const reportingPeriodOfLksgDataset = currentLksgDataset.metaInfo?.reportingPeriod ?? \"\";\n          this.arrayOfReportingPeriodWithDataId.push({\n            dataId: dataIdOfLksgDataset,\n            reportingPeriod: reportingPeriodOfLksgDataset,\n          });\n          this.addKpisOfOneDatasetToTableModel(currentLksgDataset.data, dataIdOfLksgDataset);\n        });\n      }\n      this.arrayOfReportingPeriodWithDataId = sortReportingPeriodsToDisplayAsColumns(\n        this.arrayOfReportingPeriodWithDataId as ReportingPeriodOfDataSetWithId[],\n      );\n    },\n    /**\n     * Adds the kpis of an LkSG dataset to the model passed to the data table\n     * @param lksgData the LkSG dataset to iterate over\n     * @param dataId the datasets ID\n     */\n    addKpisOfOneDatasetToTableModel(lksgData: LksgData, dataId: string) {\n      for (const [categoryKey, categoryObject] of Object.entries(lksgData) as [string, object | null]) {\n        if (categoryObject == null) continue;\n        for (const [subCategoryKey, subCategoryObject] of Object.entries(categoryObject as object) as [\n          string,\n          object | null,\n        ][]) {\n          if (subCategoryObject == null) continue;\n          for (const [kpiKey, kpiValue] of Object.entries(subCategoryObject)) {\n            const subcategory = assertDefined(\n              lksgDataModel\n                .find((category) => category.name === categoryKey)\n                ?.subcategories.find((subCategory) => subCategory.name === subCategoryKey),\n            );\n            this.createKpiDataObjects(kpiKey, (kpiValue as KpiValue) ?? \"\", subcategory, dataId);\n          }\n        }\n      }\n    },\n\n    /**\n     * Converts a country code to a human readable value\n     * @param kpiValue the value that should be reformated corresponding to its field\n     * @returns the reformatted Country value ready for display\n     */\n    reformatCountriesValue(kpiValue: KpiValue) {\n      return Array.isArray(kpiValue)\n        ? kpiValue.map((countryCodeShort: string) => getCountryNameFromCountryCode(countryCodeShort))\n        : getCountryNameFromCountryCode(kpiValue as string) ?? (kpiValue as string);\n    },\n\n    /**\n     * Generates a list of readable strings (or just a single one) combining suppliers and their associated countries\n     * @param numberOfSuppliersPerCountryCode the map of number of suppliers and associated companies\n     * from which strings are written\n     * @returns the constructed collection of readable strings\n     */\n    generateReadableCombinationOfNumberOfSuppliersAndCountries(\n      numberOfSuppliersPerCountryCode?: Map<string, number | undefined | null>,\n    ) {\n      if (numberOfSuppliersPerCountryCode != undefined) {\n        const readableListOfSuppliersAndCountries = Array.from(numberOfSuppliersPerCountryCode.entries()).map(\n          ([countryCode, numberOfSuppliers]) => {\n            const countryName = this.reformatCountriesValue(countryCode) as string;\n            if (numberOfSuppliers != undefined) {\n              return String(numberOfSuppliers) + \" suppliers from \" + countryName;\n            } else {\n              return \"There are suppliers from \" + countryName;\n            }\n          },\n        );\n        if (readableListOfSuppliersAndCountries.length > 1) {\n          return readableListOfSuppliersAndCountries;\n        } else {\n          return readableListOfSuppliersAndCountries[0];\n        }\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Converts the map of ProcurementCategory and LksgProductCategory into an array for a proper handling of the\n     * DetailsCompanyDataTable in the LksgCompanyDataTable (modal showing information related to Procurement Categories)\n     * @param inputObject Map to convert to array\n     * @returns The constructed map\n     */\n    reformatProcurementCategoriesValue(inputObject: Map<ProcurementCategoryType, LksgProcurementCategory> | null) {\n      if (inputObject == null) return null;\n      const inputObjectEntries = Object.entries(inputObject) as [ProcurementCategoryType, LksgProcurementCategory][];\n      return inputObjectEntries.map((inputEntry: [ProcurementCategoryType, LksgProcurementCategory]) => {\n        const [procurementCategoryType, lksgProcurementCategory] = inputEntry;\n        const definitionsOfProductTypeOrService =\n          lksgProcurementCategory.procuredProductTypesAndServicesNaceCodes.length > 1\n            ? lksgProcurementCategory.procuredProductTypesAndServicesNaceCodes\n            : lksgProcurementCategory.procuredProductTypesAndServicesNaceCodes[0] ?? \"\";\n\n        return {\n          procurementCategory: procurementCategoryType,\n          procuredProductTypesAndServicesNaceCodes: convertNace(definitionsOfProductTypeOrService),\n          suppliersAndCountries: this.generateReadableCombinationOfNumberOfSuppliersAndCountries(\n            new Map(Object.entries(lksgProcurementCategory.numberOfSuppliersPerCountryCode ?? {})),\n          ),\n          percentageOfTotalProcurement:\n            lksgProcurementCategory.percentageOfTotalProcurement != null\n              ? formatPercentageNumberAsString(lksgProcurementCategory.percentageOfTotalProcurement)\n              : null,\n        };\n      });\n    },\n\n    /**\n     *\n     * @param kpiField the Field to which the value belongs\n     * @param kpiValue the value that should be reformated corresponding to its field\n     * @returns the reformatted value ready for display\n     */\n    reformatValueForDisplay(kpiField: Field, kpiValue: KpiValue): KpiValue {\n      if (kpiField.name === \"totalRevenue\" && typeof kpiValue === \"number\") {\n        kpiValue = convertToMillions(kpiValue);\n      }\n      if (kpiField.name === \"industry\" || kpiField.name === \"subcontractingCompaniesIndustries\") {\n        kpiValue = convertNace(kpiValue);\n      }\n      if (kpiField.name.includes(\"Countries\") && kpiField.component !== \"YesNoFormField\") {\n        kpiValue = this.reformatCountriesValue(kpiValue);\n      }\n      if (kpiField.component == \"PercentageFormField\") {\n        kpiValue = formatPercentageNumberAsString(kpiValue as number);\n      }\n      if (kpiField.name === \"productsServicesCategoriesPurchased\") {\n        kpiValue = this.reformatProcurementCategoriesValue(\n          kpiValue as Map<ProcurementCategoryType, LksgProcurementCategory> | null,\n        );\n      }\n      if (typeof kpiValue === \"number\" && kpiField.component != \"PercentageFormField\") {\n        kpiValue = formatNumberToReadableFormat(kpiValue);\n      }\n\n      let returnValue;\n\n      if (kpiField.options?.length) {\n        const filteredOption = kpiField.options.find((option: DropdownOption) => option.value === kpiValue);\n        if (filteredOption) returnValue = filteredOption.label;\n      }\n\n      return returnValue ?? kpiValue;\n    },\n  },\n});\n</script>\n","<template>\n  <div class=\"card\">\n    <DataTable\n      :value=\"kpiDataObjectsToDisplay\"\n      rowGroupMode=\"subheader\"\n      groupRowsBy=\"subAreaKey\"\n      dataKey=\"subAreaKey\"\n      sortField=\"subAreaKey\"\n      :sortOrder=\"1\"\n      sortMode=\"single\"\n      :expandableRowGroups=\"true\"\n      v-model:expandedRowGroups=\"expandedRowGroups\"\n    >\n      <Column bodyClass=\"headers-bg\" headerClass=\"horizontal-headers-size\" field=\"kpiKey\" header=\"KPIs\">\n        <template #body=\"slotProps\">\n          <span :data-test=\"slotProps.data.kpiKey\" class=\"table-left-label\">{{\n            kpiNameMappings[slotProps.data.kpiKey] ? kpiNameMappings[slotProps.data.kpiKey] : slotProps.data.kpiKey\n          }}</span>\n          <em\n            class=\"material-icons info-icon\"\n            aria-hidden=\"true\"\n            :title=\"kpiNameMappings[slotProps.data.kpiKey] ? kpiNameMappings[slotProps.data.kpiKey] : ''\"\n            v-tooltip.top=\"{\n              value: kpiInfoMappings[slotProps.data.kpiKey] ? kpiInfoMappings[slotProps.data.kpiKey] : '',\n            }\"\n            >info</em\n          >\n        </template>\n      </Column>\n      <Column\n        v-for=\"reportingPeriod of reportingPeriodsOfDataSets\"\n        headerClass=\"horizontal-headers-size\"\n        :field=\"reportingPeriod.dataId\"\n        :header=\"reportingPeriod.reportingPeriod\"\n        :key=\"reportingPeriod.dataId\"\n      >\n        <template #body=\"{ data }\">\n          <a\n            v-if=\"Array.isArray(data[reportingPeriod.dataId]) && data[reportingPeriod.dataId].length\"\n            @click=\"openModalAndDisplayValuesInSubTable(data[reportingPeriod.dataId], kpiNameMappings[data.kpiKey])\"\n            class=\"link\"\n            >Show \"{{ kpiNameMappings[data.kpiKey] }}\"\n            <em class=\"material-icons\" aria-hidden=\"true\" title=\"\"> dataset </em>\n          </a>\n          <template\n            v-else-if=\"typeof data[reportingPeriod.dataId] === 'object' && data[reportingPeriod.dataId] !== null\"\n          >\n            {{ data[reportingPeriod.dataId].value ?? \"\" }}\n          </template>\n\n          <span v-else>{{ Array.isArray(data[reportingPeriod.dataId]) ? \"\" : data[reportingPeriod.dataId] }}</span>\n        </template>\n      </Column>\n\n      <Column field=\"subAreaKey\" header=\"Impact Area\"></Column>\n      <template #groupheader=\"slotProps\">\n        <span :id=\"slotProps.data.subAreaKey\" :data-table-id=\"'sfdrDataTable'\" data-row-header-click>{{\n          subAreaNameMappings[slotProps.data.subAreaKey]\n            ? subAreaNameMappings[slotProps.data.subAreaKey]\n            : slotProps.data.subAreaKey\n        }}</span>\n      </template>\n    </DataTable>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, type PropType } from \"vue\";\nimport Tooltip from \"primevue/tooltip\";\nimport DataTable from \"primevue/datatable\";\nimport Column from \"primevue/column\";\nimport DetailsCompanyDataTable from \"@/components/general/DetailsCompanyDataTable.vue\";\nimport { lksgModalColumnHeaders } from \"@/components/resources/frameworkDataSearch/lksg/LksgModalColumnHeaders\";\nimport {\n  type ReportingPeriodOfDataSetWithId,\n  mountRowHeaderClickEventListeners,\n  unmountRowHeaderClickEventListeners,\n} from \"@/utils/DataTableDisplay\";\nimport { type SfdrKpiObject } from \"@/components/resources/frameworkDataSearch/sfdr/SfdrPanel.vue\";\n\nexport default defineComponent({\n  name: \"SfdrDataTable\",\n  components: { DataTable, Column },\n  directives: {\n    tooltip: Tooltip,\n  },\n  data() {\n    return {\n      kpiDataObjectsToDisplay: [] as SfdrKpiObject[],\n      expandedRowGroups: [\"_general\"],\n      listOfProductionSitesConvertedNames: lksgModalColumnHeaders.listOfProductionSites,\n      rowClickHandlersMap: new Map() as Map<Element, EventListener>,\n    };\n  },\n  props: {\n    kpiDataObjects: {\n      type: Array as PropType<Array<SfdrKpiObject>>,\n      default: () => [],\n      required: true,\n    },\n    reportingPeriodsOfDataSets: {\n      type: Array as PropType<Array<ReportingPeriodOfDataSetWithId>>,\n      default: () => [],\n    },\n    kpiNameMappings: {\n      type: Object,\n      default: () => ({}),\n    },\n    kpiInfoMappings: {\n      type: Object,\n      default: () => ({}),\n    },\n    subAreaNameMappings: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  created() {\n    setTimeout(() => {\n      this.rowClickHandlersMap = mountRowHeaderClickEventListeners(\n        \"sfdrDataTable\",\n        () => this.expandedRowGroups,\n        (expandedRowGroups) => (this.expandedRowGroups = expandedRowGroups),\n      );\n    });\n  },\n  unmounted() {\n    unmountRowHeaderClickEventListeners(this.rowClickHandlersMap);\n    this.rowClickHandlersMap = new Map();\n  },\n  mounted() {\n    this.kpiDataObjectsToDisplay = this.kpiDataObjects;\n  },\n  methods: {\n    /**\n     * Opens a modal to display a table with the provided list of production sites\n     * @param listOfProductionSites An array consisting of production sites\n     * @param modalTitle The title for the modal, which is derived from the key of the KPI\n     */\n    openModalAndDisplayValuesInSubTable(listOfProductionSites: [], modalTitle: string) {\n      this.$dialog.open(DetailsCompanyDataTable, {\n        props: {\n          header: modalTitle,\n          modal: true,\n          dismissableMask: true,\n        },\n        data: {\n          listOfRowContents: listOfProductionSites,\n          columnHeaders: this.listOfProductionSitesConvertedNames,\n        },\n      });\n    },\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.p-rowgroup-footer td {\n  font-weight: 500;\n}\n\n::v-deep(.p-rowgroup-header) {\n  span {\n    font-weight: 500;\n  }\n\n  .p-row-toggler {\n    vertical-align: middle;\n    margin-right: 0.25rem;\n    float: right;\n    cursor: pointer;\n  }\n}\n</style>\n","export const sfdrKpisNameMappings = {\n  dataDate: \"Data Date\",\n  fiscalYearDeviation: \"Fiscal Year Deviation\",\n  fiscalYearEnd: \"Fiscal Year End\",\n  referencedReports: \"Referenced Reports\",\n  annualReport: \"Annual Report\",\n  groupLevelAnnualReport: \"Group Level Annual Report\",\n  annualReportDate: \"Annual Report Date\",\n  annualReportCurrency: \"Annual Report Currency\",\n  sustainabilityReport: \"Sustainability Report\",\n  groupLevelSustainabilityReport: \"Group Level Sustainability Report\",\n  sustainabilityReportDate: \"Sustainability Report Date\",\n  sustainabilityReportCurrency: \"Sustainability Report Currency\",\n  integratedReport: \"Integrated Report\",\n  groupLevelIntegratedReport: \"Group Level Sustainability Report\",\n  integratedReportDate: \"Integrated Report Date\",\n  integratedReportCurrency: \"Integrated Report Currency\",\n  esefReport: \"ESEF Report\",\n  groupLevelEsefReport: \"Group Level ESEF Report\",\n  esefReportDate: \"ESEF Report Date\",\n  esefReportCurrency: \"ESEF Report Currency\",\n  scopeOfEntities: \"Scope Of Entities\",\n  isGroupLevel: \"Is Group Level\",\n  reportDate: \"Report Date\",\n  currency: \"Currency\",\n  reference: \"Reference\",\n  reportedCasesOfBriberyCorruption: \"Reported Cases Of Bribery Corruption\",\n  reportedConvictionsOfBriberyCorruption: \"Reported Convictions Of Bribery Corruption\",\n  reportedFinesOfBriberyCorruption: \"Reported Fines Of Bribery Corruption\",\n  primaryForestAndWoodedLandOfNativeSpeciesExposure: \"Primary Forest And Wooded Land Of Native Species Exposure\",\n  protectedAreasExposure: \"Protected Areas Exposure\",\n  rareOrEndangeredEcosystemsExposure: \"Rare Or Endangered Ecosystems Exposure\",\n  inorganicPollutants: \"Inorganic Pollutants\",\n  airPollutants: \"Air Pollutants\",\n  ozoneDepletionSubstances: \"Ozone Depletion Substances\",\n  carbonReductionInitiatives: \"Carbon Reduction Initiatives\",\n  highImpactClimateSectorEnergyConsumptionNaceA: \"High Impact Climate Sector Energy Consumption NACE A\",\n  highImpactClimateSectorEnergyConsumptionNaceB: \"High Impact Climate Sector Energy Consumption NACE B\",\n  highImpactClimateSectorEnergyConsumptionNaceC: \"High Impact Climate Sector Energy Consumption NACE C\",\n  highImpactClimateSectorEnergyConsumptionNaceD: \"High Impact Climate Sector Energy Consumption NACE D\",\n  highImpactClimateSectorEnergyConsumptionNaceE: \"High Impact Climate Sector Energy Consumption NACE E\",\n  highImpactClimateSectorEnergyConsumptionNaceF: \"High Impact Climate Sector Energy Consumption NACE F\",\n  highImpactClimateSectorEnergyConsumptionNaceG: \"High Impact Climate Sector Energy Consumption NACE G\",\n  highImpactClimateSectorEnergyConsumptionNaceH: \"High Impact Climate Sector Energy Consumption NACE H\",\n  highImpactClimateSectorEnergyConsumptionNaceL: \"High Impact Climate Sector Energy Consumption NACE L\",\n  nonRenewableEnergyConsumption: \"Non-Renewable Energy Consumption\",\n  nonRenewableEnergyConsumptionCoal: \"Non-Renewable Energy Consumption Coal\",\n  nonRenewableEnergyConsumptionCrudeOil: \"Non-Renewable Energy Consumption Crude Oil\",\n  nonRenewableEnergyConsumptionFossilFuels: \"Non-Renewable Energy Consumption Fossil Fuels\",\n  nonRenewableEnergyConsumptionLignite: \"Non-Renewable Energy Consumption Lignite\",\n  nonRenewableEnergyConsumptionNaturalGas: \"Non-Renewable Energy Consumption Natural Gas\",\n  nonRenewableEnergyConsumptionNuclearEnergy: \"Non-Renewable Energy Consumption Nuclear Energy\",\n  nonRenewableEnergyConsumptionOther: \"Non-Renewable Energy Consumption Other\",\n  nonRenewableEnergyProduction: \"Non-Renewable Energy Production\",\n  renewableEnergyConsumption: \"Renewable Energy Consumption\",\n  renewableEnergyProduction: \"Renewable Energy Production\",\n  totalHighImpactClimateSectorEnergyConsumption: \"Total High Impact Climate Sector Energy Consumption\",\n  enterpriseValue: \"Enterprise Value\",\n  fossilFuelSectorExposure: \"Fossil Fuel Sector Exposure\",\n  scope1: \"Scope 1\",\n  scope2: \"Scope 2\",\n  scope3: \"Scope 3\",\n  securitiesNotCertifiedAsGreen: \"Securities Not Certified As Green\",\n  humanRightsDueDiligence: \"Human Rights Due Diligence\",\n  humanRightsPolicy: \"Human Rights Policy\",\n  reportedChildLabourIncidents: \"Reported Child Labour Incidents\",\n  reportedForcedOrCompulsoryLabourIncidents: \"Reported Forced Or Compulsory Labour Incidents\",\n  reportedIncidentsOfHumanRights: \"Reported Incidents Of Human Rights\",\n  traffickingInHumanBeingsPolicy: \"Trafficking In Human Beings Policy\",\n  averageGrossHourlyEarningsFemaleEmployees: \"Average Gross Hourly Earnings Female Employees\",\n  averageGrossHourlyEarningsMaleEmployees: \"Average Gross Hourly Earnings Male Employees\",\n  briberyCorruptionPolicy: \"Bribery Corruption Policy\",\n  ceoToEmployeePayGap: \"CEO to Employee Pay Gap\",\n  childForcedDiscriminationPolicy: \"Child Forced Discrimination Policy\",\n  controversialWeaponsExposure: \"Controversial Weapons Exposure\",\n  corruptionLegalProceedings: \"Corruption Legal Proceedings\",\n  environmentalPolicy: \"Environmental Policy\",\n  fairBusinessMarketingAdvertisingPolicy: \"Fair Business Marketing Advertising Policy\",\n  fairCompetitionPolicy: \"Fair Competition Policy\",\n  femaleBoardMembers: \"Female Board Members\",\n  humanRightsDueDiligencePolicy: \"Human Rights Due Diligence Policy\",\n  humanRightsLegalProceedings: \"Human Rights Legal Proceedings\",\n  iloCoreLabourStandards: \"ILO Core Labour Standards\",\n  iso14001: \"ISO 14001 Certificate\",\n  maleBoardMembers: \"Male Board Members\",\n  oecdGuidelinesForMultinationalEnterprisesPolicy: \"OECD Guidelines For Multinational Enterprises Policy\",\n  rateOfAccidents: \"Rate Of Accidents\",\n  reportedIncidentsOfDiscrimination: \"Reported Incidents Of Discrimination\",\n  sanctionsIncidentsOfDiscrimination: \"Sanctions Incidents Of Discrimination\",\n  technologiesExpertiseTransferPolicy: \"Technologies Expertise Transfer Policy\",\n  transparencyDisclosurePolicy: \"Transparency Disclosure Policy\",\n  unGlobalCompactPrinciplesCompliancePolicy: \"UN Global Compact Principles Compliance Policy\",\n  violationOfTaxRulesAndRegulation: \"Violation Of Tax Rules And Regulation\",\n  whistleblowerProtectionPolicy: \"Whistleblower Protection Policy\",\n  workdaysLost: \"Workdays Lost\",\n  workplaceAccidentPreventionPolicy: \"Workplace Accident Prevention Policy\",\n  biodiversityProtectionPolicy: \"Biodiversity Protection Policy\",\n  deforestationPolicy: \"Deforestation Policy\",\n  hazardousWaste: \"Hazardous Waste\",\n  landDegradationDesertificationSoilSealingExposure: \"Land Degradation Desertification Soil Sealing Exposure\",\n  manufactureOfAgrochemicalPesticidesProducts: \"Manufacture Of Agrochemical Pesticides Products\",\n  sustainableAgriculturePolicy: \"Sustainable Agriculture Policy\",\n  sustainableOceansAndSeasPolicy: \"Sustainable Oceans And Seas Policy\",\n  threatenedSpeciesExposure: \"Threatened Species Exposure\",\n  wasteNonRecycled: \"Waste Non Recycled\",\n  emissionsToWater: \"Emissions To Water\",\n  waterConsumption: \"Water Consumption\",\n  waterManagementPolicy: \"Water Management Policy\",\n  waterReused: \"Water Reused\",\n  waterStressAreaExposure: \"Water Stress Area Exposure\",\n  dataSource: \"Data Source\",\n  quality: \"Quality\",\n  comment: \"Comment\",\n  tagName: \"Tag Name\",\n  page: \"Page\",\n  raport: \"Raport\",\n  supplierCodeOfConduct: \"Supplier Code Of Conduct\",\n  grievanceHandlingMechanism: \"Grievance Handling Mechanism\",\n  totalRevenue: \"Total Revenue\",\n};\n\nexport const sfdrKpisInfoMappings = {\n  dataDate: \"The date until when the information collected is valid\",\n  fiscalYearDeviation: \"Does the fiscal year deviate from the calender year?\",\n  fiscalYearEnd: \"The date the fiscal year ends\",\n  referencedReports:\n    \"Does your company have a current annual report, sustainability report, integrated report or ESEF report? If yes, please share the information with us.\",\n  annualReport: \"Link to Annual Report\",\n  groupLevelAnnualReport: \"Is Annual Report on a Group level\",\n  annualReportDate: \"The date for which the information presented in the report is valid through\",\n  annualReportCurrency: \"The 3-letter alpha code that represents the currency used in the report\",\n  sustainabilityReport: \"Link to Sustainability Report\",\n  groupLevelSustainabilityReport: \"Is Sustainability Report on a Group level\",\n  sustainabilityReportDate: \"The date for which the information presented in the report is valid through\",\n  sustainabilityReportCurrency: \"The 3-letter alpha code that represents the currency used in the report\",\n  integratedReport: \"Link to Integrated Report\",\n  groupLevelIntegratedReport: \"Is Sustainability Report on a Group level\",\n  integratedReportDate: \"The date for which the information presented in the report is valid through\",\n  integratedReportCurrency: \"The 3-letter alpha code that represents the currency used in the report\",\n  esefReport: \"Link to ESEF Report\",\n  groupLevelEsefReport: \"Is ESEF Report on a Group level\",\n  esefReportDate: \"The date for which the information presented in the report is valid through\",\n  esefReportCurrency: \"The 3-letter alpha code that represents the currency used in the report\",\n  scopeOfEntities:\n    \"Does a list of legal entities covered by Sust./Annual/Integrated/ESEF report match with a list of legal entities covered by Audited Consolidated Financial Statement \",\n  isGroupLevel: \"Is the report on a Group Level\",\n  reportDate: \"The date for which the information presented in the report is valid through\",\n  currency: \"The 3-letter alpha code that represents the currency used in the report\",\n  reference: \"The original report in PDF format\",\n  reportedCasesOfBriberyCorruption:\n    \"Number of cases with identified insufficiencies in actions taken to address breaches in procedures and standards of anti-corruption and anti-bribery\",\n  reportedConvictionsOfBriberyCorruption:\n    \"Numbers of convictions for violations of anti-corruption and anti-bribery laws\",\n  reportedFinesOfBriberyCorruption: \"Amount of fines for violations of anti-corruption and anti-bribery laws.\",\n  primaryForestAndWoodedLandOfNativeSpeciesExposure:\n    \"Does the company have sites/operations located in primary forest and other wooded land, that is forest and other wooded land of native species, where there is no clearly visible indication of human activity and the ecological processes are not significantly disturbed - where activities of the company negatively affect those areas?\",\n  protectedAreasExposure:\n    \"Does the company have sites/operations located in areas designated by law or by the relevant competent authority for nature protection purposes, unless evidence is provided that the production of that raw material did not interfere with those nature protection purposes - where activities of the company negatively affect those areas?\",\n  rareOrEndangeredEcosystemsExposure:\n    \"Does the company have sites/operations located in  areas designated for the protection of rare, threatened or endangered ecosystems or species recognised by international agreements or included in lists drawn up by intergovernmental organisations or the International Union for the Conservation of Nature, subject to their recognition by the Commission (Commission may also recognise areas for the protection of rare, threatened or endangered ecosystems or species recognised by international agreements or included in lists drawn up by intergovernmental organisations or the International Union for the Conservation of Nature), unless evidence is provided that the production of that raw material did not interfere with those nature protection purposes  - where activities of the company negatively affect those areas?\",\n  inorganicPollutants: \"Amount of emissions of Inorganic Pollutants\",\n  airPollutants: \"Amount of emissions of Air Pollutants\",\n  ozoneDepletionSubstances: \"Amount of emissions of Ozone Depletion Substances\",\n  carbonReductionInitiatives:\n    \"Has policies and procedures for a carbon emission reduction initiative aimed at aligning with the Paris Agreement. Has programs to reduce carbon emissions\",\n  highImpactClimateSectorEnergyConsumptionNaceA: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceB: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceC: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceD: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceE: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceF: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceG: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceH: \"Total energy consumption per high impact climate sector\",\n  highImpactClimateSectorEnergyConsumptionNaceL: \"Total energy consumption per high impact climate sector\",\n  nonRenewableEnergyConsumption: \"Value of energy consumed from non-renewable energy sources\",\n  nonRenewableEnergyConsumptionCoal: \"Energy consumption by non-renewable energy sources such as coal\",\n  nonRenewableEnergyConsumptionCrudeOil: \"Energy consumption by non-renewable energy sources such as crude oil\",\n  nonRenewableEnergyConsumptionFossilFuels: \"Total amount of non-renewable energy consumption\",\n  nonRenewableEnergyConsumptionLignite: \"Energy consumption by non-renewable energy sources such as lignite\",\n  nonRenewableEnergyConsumptionNaturalGas: \"Energy consumption by non-renewable energy sources such as natural gas\",\n  nonRenewableEnergyConsumptionNuclearEnergy:\n    \"Energy consumption by non-renewable energy sources such as nuclear energy (Uranium)\",\n  nonRenewableEnergyConsumptionOther:\n    \"Energy consumption by non-renewable energy sources from any other available (used) non-renewable source of energy\",\n  nonRenewableEnergyProduction: \"Value of energy produced from non-renewable energy sources\",\n  renewableEnergyConsumption: \"Value of energy consumed from renewable energy sources\",\n  renewableEnergyProduction: \"Value of energy produced from renewable energy sources\",\n  totalHighImpactClimateSectorEnergyConsumption: \"Total energy consumption per high impact climate sector\",\n  enterpriseValue:\n    \"Enterprise value calculated as the sum, at fiscal year-end, of the market capitalisation of ordinary shares, the market capitalisation of preferred shares, and the book value of total debt and non-controlling interests, without the deduction of cash or cash equivalents\",\n  fossilFuelSectorExposure: \"Does the company derive any revenues from fossil fuels?\",\n  scope1:\n    \"Scope 1 carbon emissions, namely emissions generated from sources that are controlled by the company that issues the underlying assets\",\n  scope2:\n    \"Scope 2 carbon emissions, namely emissions from the consumption of purchased electricity, steam, or other sources of energy generated upstream from the company that issues the underlying assets\",\n  scope3:\n    \"Scope 3 carbon emissions, namely all indirect emissions that are not covered by scope 1 and 2, that occur in the value chain of the reporting company, including both upstream and downstream emissions, in particular for sectors with a high impact on climate change and its mitigation\",\n  securitiesNotCertifiedAsGreen:\n    \"Does the company have investments not certified as green under a future EU legal act setting up an EU Green Bond Standard?\",\n  humanRightsDueDiligence:\n    \"Does the company have a due diligence process to identify, prevent, mitigate and address adverse human rights impacts?\",\n  humanRightsPolicy: \"Does the company have a human rights policy in place?\",\n  reportedChildLabourIncidents:\n    \"Does the company exposed to operations and suppliers at significant risk of incidents of child labour exposed to hazardous work, in terms of of geographic areas or type of operation?\",\n  reportedForcedOrCompulsoryLabourIncidents:\n    \"Does the company exposed to operations and suppliers at significant risk of incidents of forced or compulsory labour in terms in terms of geographic areas and/or the type of operation?\",\n  reportedIncidentsOfHumanRights:\n    \"Number of cases of severe human rights issues and incidents connected to the company.\",\n  traffickingInHumanBeingsPolicy:\n    \"Does the company have a policies and procedures against trafficking in human beings ?\",\n  averageGrossHourlyEarningsFemaleEmployees: \"Average gross hourly earnings of female employees\",\n  averageGrossHourlyEarningsMaleEmployees: \"Average gross hourly earnings of male employees\",\n  briberyCorruptionPolicy: \"Does the company have a policies and control systems in place to fight corruption ?\",\n  ceoToEmployeePayGap:\n    \"Ratio of the annual total compensation for the highest compensated individual to the median annual total compensation for all employees (excluding the highest-compensated individual)\",\n  childForcedDiscriminationPolicy:\n    \"Does the company have a policies and procedures to abolish all forms of child labour, forced labour and eliminate discrimination in the workplace?\",\n\n  controversialWeaponsExposure:\n    \"Is the company involved in the manufacture or selling of controversial weapons such as anti-personnel mines, cluster munitions, chemical weapons and biological weapons?\",\n  corruptionLegalProceedings: \"Has the company been involved in corruption related legal proceedings?\",\n\n  environmentalPolicy: \"Does the company have a statement of environmental policy?\",\n  fairBusinessMarketingAdvertisingPolicy:\n    \"Does the company have a policies and procedures in place to apply fair business, marketing and advertising practices and to guarantee the safety and quality of the goods and services ? \",\n  fairCompetitionPolicy:\n    \"Does the company have a policies and procedures in place related to fair competition and anti-competitive cartels?\",\n  femaleBoardMembers:\n    \"Number of females on the board. Board means the administrative, management or supervisory body of a company\",\n  humanRightsDueDiligencePolicy:\n    \"Does the company have a policies and procedures to support/respect human rights and carry out due diligence to ensure that the business activities do not have a negative human rights impact?\",\n  humanRightsLegalProceedings: \"Does the company have been involved in Human Rights related legal proceedings?\",\n  iloCoreLabourStandards: \"Does the company abide by ILO Core Labour Standards?\",\n  iso14001: \"Does the company have an ISO 14001 certificate?\",\n  maleBoardMembers:\n    \"Number of females on the board. Board means the administrative, management or supervisory body of a company\",\n  oecdGuidelinesForMultinationalEnterprisesPolicy:\n    \"Does the company have policies and procedures in place to monitor compliance with the UNGC principles or OECD Guidelines for Multinational Enterprises or grievance /complaints handling mechanisms to address violations of the UNGC principles or OECD Guidelines for Multinational Enterprises?\",\n  rateOfAccidents: \"What is the Rate Of Accidents in the company?\",\n  reportedIncidentsOfDiscrimination: \"Number of incidents of discrimination reported\",\n  sanctionsIncidentsOfDiscrimination:\n    \"Number of discrimination related incidents reported that lead to any kind of penalty and/or fine\",\n  technologiesExpertiseTransferPolicy:\n    \"Does the company have a policies and procedures in place to permit the transfer and rapid dissemination of technologies and expertise ?\",\n  transparencyDisclosurePolicy: \"Does the company have a discloses policies related to transparency?\",\n  unGlobalCompactPrinciplesCompliancePolicy:\n    \"Does the company have policies and procedures in place to monitor compliance with the UNGC principles or OECD Guidelines for Multinational Enterprises or grievance /complaints handling mechanisms to address violations of the UNGC principles or OECD Guidelines for Multinational Enterprises?\",\n  violationOfTaxRulesAndRegulation:\n    \"Does the company makes contribution to public finances within the framework of applicable law and regulations, in accordance with the tax rules and regulations of the host countries and co-operate with the tax authorities?\",\n  whistleblowerProtectionPolicy: \"Does the company have policies and procedures for the protection of whistleblowers?\",\n  workdaysLost: \"Number of workdays lost to injuries, accidents, fatalities or illness\",\n  workplaceAccidentPreventionPolicy: \"Does the company have a workplace accident prevention policy?\",\n  biodiversityProtectionPolicy:\n    \"Does the company have a biodiversity policy in place which covers operational sites owned, leased, managed in, or adjacent to, a protected area or an area of high biodiversity value outside protected areas?\",\n  deforestationPolicy:\n    \"Deforestation’ means the human-induced conversion of forested land to non-forested land, which can be permanent, when this change is definitive, or temporary when this change is part of a cycle that includes natural or assisted regeneration, according to the Intergovernmental Science-Policy Platform on Biodiversity and Ecosystem Services (IPBES) as referred to in paragraph 100 of Decision No 1386/2013/EU of the European Parliament and of the Council.\",\n  hazardousWaste:\n    \"Tonnes of hazardous waste generated, which are Explosives, Oxidizing substances, Highly flammable, Flammable, Harmful, Toxic, Carcinogenic, Corrosive, Infectious, Toxic for reproduction, Mutagenic, waste which releases toxic or very toxic gases in contact with water, air or an acid, Sensitizing, Ecotoxic, waste capable by any means after disposal of yielding substance  which possesses any of the characteristics listed above.\",\n  landDegradationDesertificationSoilSealingExposure:\n    \"Do the company's activities cause land degradation, desertification or soil sealing?\",\n  manufactureOfAgrochemicalPesticidesProducts:\n    \"Is the company involved in the manufacture of pesticides and other agrochemical products?\",\n  sustainableAgriculturePolicy: \"Does the company have sustainable land/agriculture practices or policies?\",\n  sustainableOceansAndSeasPolicy: \"Does the company have sustainable oceans/seas practices or policies?\",\n  threatenedSpeciesExposure: \"Does the company involved in operations that affect threatened species?\",\n  wasteNonRecycled: \"Tonnes of non-recycled waste generated by the company.\",\n  emissionsToWater: \"Tonnes of Emissions To Water generated by the company.\",\n  waterConsumption: \"Amount of water consumed by the company\",\n  waterManagementPolicy: \"Does the company have a policies and procedures for water management?\",\n  waterReused: \"Amount of water reused/reclaimed by the company\",\n  waterStressAreaExposure:\n    \"Does the company have sites located in areas of high water stress without a water management policy?\",\n  supplierCodeOfConduct:\n    \"Does the company have a Supplier Code Of Conduct (against unsafe working conditions, precarious work, child labour and forced labour)?\",\n  grievanceHandlingMechanism:\n    \"Does the company have a grievance/complaints handling mechanism related to employee matters?\",\n  totalRevenue:\n    \"Total Revenue for the financial year. I.e., Income arising in the course of an entity's ordinary activities., the amounts derived from the sale of products and the provision of services after deducting sales rebates and value added tax and other taxes directly linked to turnover. Overall turnover is equivalent to a firm's total revenues over some period of time\",\n};\n\nexport const sfdrSubAreasNameMappings = {\n  antiCorruptionAndAntiBribery: \"Anti-corruption and anti-bribery\",\n  biodiversity: \"Biodiversity\",\n  childLabour: \"Child labour\",\n  emissions: \"Emissions\",\n  energyPerformance: \"Energy performance\",\n  evidenceCertificatesAndAttestations: \"Evidence, certificates and attestations\",\n  forcedLabourSlaveryAndDebtBondage: \"Forced labour, slavery and debt bondage\",\n  freedomOfAssociation: \"Freedom of association\",\n  _general: \"General\",\n  greenhouseGasEmissions: \"Greenhouse gas emissions\",\n  greenSecurities: \"Green securities\",\n  grievanceMechanism: \"Grievance mechanism\",\n  humanRights: \"Human rights\",\n  osh: \"OSH\",\n  codeOfConduct: \"Code Of Conduct\",\n  riskManagement: \"Risk management\",\n  socialAndEmployeeMatters: \"Social and employee matters\",\n  water: \"Water\",\n  waste: \"Waste\",\n  environment: \"Environment\",\n};\n","<template>\n  <div v-if=\"waitingForData\" class=\"d-center-div text-center px-7 py-4\">\n    <p class=\"font-medium text-xl\">Loading SFDR Data...</p>\n    <em class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n  </div>\n  <div v-if=\"kpiDataObjects.length && !waitingForData\">\n    <SfdrDataTable\n      data-test=\"sfdrDataTable\"\n      :kpiDataObjects=\"kpiDataObjects\"\n      :reportingPeriodsOfDataSets=\"listOfColumnIdentifierObjects\"\n      :kpiNameMappings=\"sfdrKpisNameMappings\"\n      :kpiInfoMappings=\"sfdrKpisInfoMappings\"\n      :subAreaNameMappings=\"sfdrSubAreasNameMappings\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport {\n  type CompanyReport,\n  type DataAndMetaInformationSfdrData,\n  type SfdrData,\n  type SfdrEnvironmental,\n  type SfdrSocial,\n} from \"@clients/backend\";\nimport { defineComponent, inject } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { sortReportingPeriodsToDisplayAsColumns } from \"@/utils/DataTableDisplay\";\nimport SfdrDataTable from \"@/components/general/SfdrDataTable.vue\";\nimport {\n  sfdrKpisInfoMappings,\n  sfdrKpisNameMappings,\n  sfdrSubAreasNameMappings,\n} from \"@/components/resources/frameworkDataSearch/sfdr/DataModelsTranslations\";\nimport { PanelProps } from \"@/components/resources/frameworkDataSearch/PanelComponentOptions\";\n\nexport type SfdrKpiObject = { [index: string]: string | object; subAreaKey: string; kpiKey: string };\n\nexport default defineComponent({\n  name: \"SfdrPanel\",\n  components: { SfdrDataTable },\n  data() {\n    return {\n      firstRender: true,\n      waitingForData: true,\n      sfdrDataAndMetaInfo: [] as Array<DataAndMetaInformationSfdrData>,\n      listOfColumnIdentifierObjects: [] as Array<{ dataId: string; reportingPeriod: string }>,\n      kpiDataObjects: [] as SfdrKpiObject[],\n      sfdrKpisNameMappings,\n      sfdrKpisInfoMappings,\n      sfdrSubAreasNameMappings,\n    };\n  },\n  props: PanelProps,\n  watch: {\n    companyId() {\n      this.listOfColumnIdentifierObjects = [];\n      void this.fetchSfdrData();\n    },\n    singleDataMetaInfoToDisplay() {\n      if (!this.firstRender) {\n        this.listOfColumnIdentifierObjects = [];\n        void this.fetchSfdrData();\n      }\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  created() {\n    void this.fetchSfdrData();\n    this.firstRender = false;\n  },\n  methods: {\n    /**\n     * Fetches all accepted Sfdr datasets for the current company and converts them to the required frontend format.\n     */\n    async fetchSfdrData() {\n      try {\n        this.waitingForData = true;\n        const sfdrDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getSfdrDataControllerApi();\n\n        if (this.singleDataMetaInfoToDisplay) {\n          const singleSfdrData = (\n            await sfdrDataControllerApi.getCompanyAssociatedSfdrData(this.singleDataMetaInfoToDisplay.dataId)\n          ).data.data;\n          this.sfdrDataAndMetaInfo = [{ metaInfo: this.singleDataMetaInfoToDisplay, data: singleSfdrData }];\n        } else {\n          this.sfdrDataAndMetaInfo = (\n            await sfdrDataControllerApi.getAllCompanySfdrData(assertDefined(this.companyId))\n          ).data;\n        }\n        this.convertSfdrDataToFrontendFormat();\n        this.waitingForData = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    /**\n     * Creates kpi data objects to pass them to the data table.\n     * @param kpiKey The field name of a kpi\n     * @param kpiValue The corresponding value to the kpiKey\n     * @param subAreaKey The sub area to which the kpi belongs\n     * @param dataIdOfSfdrDataset The value of the data Id of an Sfdr dataset\n     */\n    createKpiDataObjects(\n      kpiKey: string,\n      kpiValue: object | string,\n      subAreaKey: string,\n      dataIdOfSfdrDataset: string,\n    ): void {\n      let indexOfExistingItem = -1;\n      const kpiDataObject: SfdrKpiObject = {\n        subAreaKey: subAreaKey == \"general\" ? `_${subAreaKey}` : subAreaKey,\n        kpiKey: kpiKey,\n        [dataIdOfSfdrDataset]: kpiValue,\n      };\n      indexOfExistingItem = this.kpiDataObjects.findIndex(\n        (singleKpiDataObject) => singleKpiDataObject.kpiKey === kpiKey,\n      );\n      if (indexOfExistingItem !== -1) {\n        Object.assign(this.kpiDataObjects[indexOfExistingItem], kpiDataObject);\n      } else {\n        this.kpiDataObjects.push(kpiDataObject);\n      }\n    },\n\n    /**\n     * @param oneSfdrDataset sfdr dataset with meta information\n     * @returns an object with data ID and reporting period\n     */\n    createColumnIdentifierObject(oneSfdrDataset: DataAndMetaInformationSfdrData) {\n      const dataIdOfSfdrDataset = oneSfdrDataset.metaInfo?.dataId ?? \"\";\n      const reportingPeriodOfSfdrDataset = oneSfdrDataset.metaInfo?.reportingPeriod ?? \"\";\n      return {\n        dataId: dataIdOfSfdrDataset,\n        reportingPeriod: reportingPeriodOfSfdrDataset,\n      };\n    },\n\n    /**\n     *\n     * @param sfdrData Data object from DataAndMetaInformationSfdrData\n     * @param columnIdentifierDataId key name of the SFDR dataset property\n     */\n    createKpiDataObjectsForSfdrDataProps(sfdrData: SfdrData, columnIdentifierDataId: string) {\n      const dataEntries = Object.entries(sfdrData).map((dataEntry) => {\n        if (dataEntry[1] == null) {\n          dataEntry[1] = \"\";\n        }\n        return dataEntry;\n      });\n      dataEntries.forEach((dataEntry: [string, SfdrSocial | SfdrEnvironmental | { [key: string]: CompanyReport }]) => {\n        const [sfdrDataPropName, sfdrDataPropValue] = dataEntry;\n        Object.entries(sfdrDataPropValue).forEach((propValue: [string, object | string]) => {\n          const [kpiKey, kpiValue] = propValue;\n          this.createKpiDataObjects(kpiKey, kpiValue, sfdrDataPropName, columnIdentifierDataId);\n        });\n      });\n    },\n\n    /**\n     * Retrieves and converts values from an array of SFDR datasets in order to make it displayable in the frontend.\n     *\n     */\n    convertSfdrDataToFrontendFormat() {\n      const mappedOfColumnIdentifierObjects = this.sfdrDataAndMetaInfo.map(\n        (oneSfdrDataset: DataAndMetaInformationSfdrData) => {\n          const columnIdentifier = this.createColumnIdentifierObject(oneSfdrDataset);\n          Object.values(oneSfdrDataset.data)\n            .filter((sfdrData: SfdrData) => sfdrData !== null)\n            .forEach((sfdrData: SfdrData) => {\n              this.createKpiDataObjectsForSfdrDataProps(sfdrData, columnIdentifier.dataId);\n            });\n          return columnIdentifier;\n        },\n      );\n      this.listOfColumnIdentifierObjects = sortReportingPeriodsToDisplayAsColumns(mappedOfColumnIdentifierObjects);\n    },\n  },\n});\n</script>\n","<template>\n  <div v-show=\"mapOfCategoryKeysToDataObjectArrays.size > 0\">\n    <DataTable tableClass=\"onlyHeaders\">\n      <Column\n        headerStyle=\"width: 30vw;\"\n        headerClass=\"horizontal-headers-size first-horizontal-headers-size\"\n        header=\"KPIs\"\n      />\n      <Column\n        v-for=\"reportingPeriodWithDataId of arrayOfReportingPeriodWithDataId\"\n        headerClass=\"horizontal-headers-size\"\n        headerStyle=\"width: 30vw;\"\n        :header=\"reportingPeriodWithDataId.reportingPeriod\"\n        :key=\"reportingPeriodWithDataId.dataId\"\n      />\n    </DataTable>\n    <div\n      v-for=\"(arrayOfKpiDataObjectsMapItem, index) in mapOfCategoryKeysToDataObjectArrays\"\n      :key=\"index\"\n      class=\"d-table-style\"\n    >\n      <div v-if=\"shouldCategoryBeRendered(arrayOfKpiDataObjectsMapItem[0])\">\n        <div>\n          <div class=\"pt-2 pl-2 pb-2 w-full d-cursor-pointer border-bottom-table p-2\" @click=\"toggleExpansion(index)\">\n            <span\n              :class=\"`p-badge badge-${colorOfCategory(arrayOfKpiDataObjectsMapItem[0])}`\"\n              :data-test=\"arrayOfKpiDataObjectsMapItem[0]\"\n              >{{ arrayOfKpiDataObjectsMapItem[0].toUpperCase() }}\n            </span>\n            <button class=\"pt-2 pr-3 d-cursor-pointer d-chevron-style\">\n              <span v-if=\"expandedGroup.has(index)\" class=\"pr-1 pi pi-chevron-down d-chevron-font\" />\n              <span v-else class=\"pr-1 pt-1 pi pi-chevron-right d-chevron-font\" />\n            </button>\n          </div>\n        </div>\n        <div v-show=\"expandedGroup.has(index)\">\n          <TwoLayerDataTable\n            data-test=\"TwoLayerTest\"\n            :arrayOfKpiDataObjects=\"arrayOfKpiDataObjectsMapItem[1]\"\n            :list-of-reporting-periods-with-data-id=\"arrayOfReportingPeriodWithDataId\"\n            headerInputStyle=\"display: none;\"\n            :modal-column-headers=\"modalColumnHeaders\"\n            :sort-by-subcategory-key=\"sortBySubcategoryKey\"\n            :unfold-subcategories=\"unfoldSubcategories\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { type KpiDataObject, type KpiValue } from \"@/components/resources/frameworkDataSearch/KpiDataObject\";\nimport TwoLayerDataTable from \"@/components/resources/frameworkDataSearch/TwoLayerDataTable.vue\";\nimport { type ReportingPeriodOfDataSetWithId, sortReportingPeriodsToDisplayAsColumns } from \"@/utils/DataTableDisplay\";\nimport { type Category, type Field, type Subcategory } from \"@/utils/GenericFrameworkTypes\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { defineComponent } from \"vue\";\nimport Column from \"primevue/column\";\nimport DataTable from \"primevue/datatable\";\nimport { type DataAndMetaInformationViewModel, type FrameworkViewModel } from \"@/components/resources/ViewModel\";\n\nexport default defineComponent({\n  name: \"ThreeLayerTable\",\n\n  components: { TwoLayerDataTable, DataTable, Column },\n  data() {\n    return {\n      expandedGroup: new Set([0]),\n      resultKpiData: null as KpiDataObject,\n      arrayOfReportingPeriodWithDataId: [] as Array<ReportingPeriodOfDataSetWithId>,\n      mapOfKpiKeysToDataObjects: new Map() as Map<string, KpiDataObject>,\n      mapOfCategoryKeysToDataObjectArrays: new Map() as Map<string, Array<KpiDataObject>>,\n      importantCategoryKeys: [\"general\"],\n      importantSubcategoryKeys: [\"general\", \"basicInformation\", \"masterData\"],\n    };\n  },\n  props: {\n    dataModel: {\n      type: Array as () => Array<Category>,\n      required: true,\n    },\n    dataAndMetaInfo: {\n      type: Array as () => Array<DataAndMetaInformationViewModel<FrameworkViewModel>>,\n      required: true,\n    },\n    formatValueForDisplay: {\n      type: Function as () => (field: Field, value: KpiValue) => KpiValue,\n      default: (field: Field, value: KpiValue): KpiValue => value,\n    },\n    modalColumnHeaders: {\n      type: Object,\n      default: () => ({}),\n    },\n    sortBySubcategoryKey: {\n      type: Boolean,\n      default: true,\n    },\n    unfoldSubcategories: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    this.triggerConversionOfDataForDisplay();\n  },\n  watch: {\n    dataAndMetaInfo() {\n      this.triggerConversionOfDataForDisplay();\n    },\n  },\n  emits: [\"dataConverted\"],\n  methods: {\n    /**\n     * Creates kpi data objects to pass them to the data table.\n     * @param kpiKey The field name of a kpi\n     * @param kpiValue The corresponding value to the kpiKey\n     * @param subcategory The sub category to which the kpi belongs\n     * @param category category to which the kpi belongs to\n     * @param dataId The value of the date kpi\n     */\n    createKpiDataObjects(\n      kpiKey: string,\n      kpiValue: KpiValue,\n      subcategory: Subcategory,\n      category: Category,\n      dataId: string,\n    ): void {\n      const kpiField = assertDefined(subcategory.fields.find((field) => field.name === kpiKey));\n      const kpiData: KpiDataObject = {\n        categoryKey: this.importantCategoryKeys.includes(category.name) ? `_${category.name}` : category.name,\n        categoryLabel: category.label ? category.label : category.name,\n        subcategoryKey: this.importantSubcategoryKeys.includes(subcategory.name)\n          ? `_${subcategory.name}`\n          : subcategory.name,\n        subcategoryLabel: subcategory.label ? subcategory.label : subcategory.name,\n        kpiKey: kpiKey,\n        kpiLabel: kpiField?.label ? kpiField.label : kpiKey,\n        kpiDescription: kpiField?.description ? kpiField.description : \"\",\n        kpiFormFieldComponent: kpiField?.component ?? \"\",\n        content: { [dataId]: this.formatValueForDisplay(kpiField, kpiValue) ?? \"\" },\n      };\n      const uniqueIdentiferOfKpi = `${kpiKey}+${subcategory.name}+${category.name}`;\n      if (this.mapOfKpiKeysToDataObjects.has(uniqueIdentiferOfKpi)) {\n        Object.assign(kpiData.content, this.mapOfKpiKeysToDataObjects.get(uniqueIdentiferOfKpi)?.content);\n      }\n      this.mapOfKpiKeysToDataObjects.set(uniqueIdentiferOfKpi, kpiData);\n      this.resultKpiData = kpiData;\n    },\n    /**\n     * Retrieves and converts the stored array of datasets in order to make it displayable in the frontend.\n     */\n    convertDataToFrontendFormat(): void {\n      this.arrayOfReportingPeriodWithDataId = [];\n      if (this.dataAndMetaInfo.length) {\n        this.dataAndMetaInfo.forEach((currentDataset) => {\n          const dataId = currentDataset.metaInfo?.dataId ?? \"\";\n          const reportingPeriod = currentDataset.metaInfo?.reportingPeriod ?? \"\";\n          this.arrayOfReportingPeriodWithDataId.push({\n            dataId: dataId,\n            reportingPeriod: reportingPeriod,\n          });\n          for (const [categoryKey, categoryObject] of Object.entries(currentDataset.data)) {\n            if (categoryKey == \"toApiModel\") continue; // ignore toApiModel() Function as it is not a KPI\n            if (categoryObject == null) continue;\n            const listOfDataObjects: Array<KpiDataObject> = [];\n            const frameworkCategoryData = assertDefined(\n              this.dataModel.find((category) => category.name === categoryKey),\n            );\n            this.iterateThroughSubcategories(\n              categoryObject as object,\n              categoryKey,\n              frameworkCategoryData,\n              dataId,\n              listOfDataObjects,\n              currentDataset.data,\n            );\n\n            this.mapOfCategoryKeysToDataObjectArrays.set(frameworkCategoryData.label, listOfDataObjects);\n          }\n        });\n      }\n      this.arrayOfReportingPeriodWithDataId = sortReportingPeriodsToDisplayAsColumns(\n        this.arrayOfReportingPeriodWithDataId as ReportingPeriodOfDataSetWithId[],\n      );\n      this.$emit(\"dataConverted\");\n    },\n    /**\n     * Iterates through all subcategories of a category\n     * @param categoryDataObject the data object of the framework's category\n     * @param categoryKey the key of the corresponding framework's category\n     * @param category  the category object of the framework's category\n     * @param dataId  the ID of the dataset\n     * @param listOfKpiDataObjects collector for the kpi data objects\n     * @param currentViewModelDataset dataset for which the show if conditions should be checked\n     */\n    iterateThroughSubcategories(\n      categoryDataObject: object,\n      categoryKey: string,\n      category: Category,\n      dataId: string,\n      listOfKpiDataObjects: Array<KpiDataObject>,\n      currentViewModelDataset: FrameworkViewModel,\n    ) {\n      for (const [subCategoryKey, subCategoryObject] of Object.entries(categoryDataObject)) {\n        if (subCategoryObject == null) continue;\n        this.iterateThroughSubcategoryKpis(\n          subCategoryObject as object,\n          categoryKey,\n          subCategoryKey,\n          category,\n          dataId,\n          listOfKpiDataObjects,\n          currentViewModelDataset,\n        );\n      }\n    },\n    /**\n     * Builds the result Kpi Data Object and adds it to the result list\n     * @param subCategoryDataObject the data object of the framework's subcategory\n     * @param categoryKey the key of the corresponding framework's category\n     * @param subCategoryKey the key of the corresponding framework's subcategory\n     * @param category the category object of the framework's category\n     * @param dataId the ID of the dataset\n     * @param listOfKpiDataObjects collector for the kpi data objects\n     * @param currentViewModelDataset dataset for which the show if conditions should be checked\n     */\n    iterateThroughSubcategoryKpis(\n      subCategoryDataObject: object,\n      categoryKey: string,\n      subCategoryKey: string,\n      category: Category,\n      dataId: string,\n      listOfKpiDataObjects: Array<KpiDataObject>,\n      currentViewModelDataset: FrameworkViewModel,\n    ) {\n      for (const [kpiKey, kpiValue] of Object.entries(subCategoryDataObject)) {\n        const subcategory = assertDefined(\n          category.subcategories.find((subCategory) => subCategory.name === subCategoryKey),\n        );\n        const field = assertDefined(subcategory.fields.find((field) => field.name == kpiKey));\n\n        if (field.showIf(currentViewModelDataset.toApiModel())) {\n          this.createKpiDataObjects(kpiKey, kpiValue as KpiValue, subcategory, category, dataId);\n          listOfKpiDataObjects.push(this.resultKpiData);\n        }\n      }\n    },\n    /**\n     * Checks whether a given category shall be displayed for at least one of the datasets to display\n     * @param categoryName The name of the category to check\n     * @returns true if category shall be displayed, else false\n     */\n    shouldCategoryBeRendered(categoryName: string): boolean {\n      const category = assertDefined(this.dataModel.find((category) => category.label === categoryName));\n      return this.dataAndMetaInfo.some((dataAndMetaInfo) => category.showIf(dataAndMetaInfo.data.toApiModel()));\n    },\n    /**\n     * Retrieves the color for a given category from Data Model\n     * @param categoryName The name of the category whose color is searched\n     * @returns color as string\n     */\n    colorOfCategory(categoryName: string): string {\n      return assertDefined(this.dataModel.find((category) => category.label === categoryName)).color;\n    },\n    /**\n     * Expands and collapses an item\n     * @param key element for which the check should be run\n     */\n    toggleExpansion(key: number) {\n      if (this.expandedGroup.has(key)) this.expandedGroup.delete(key);\n      else this.expandedGroup.add(key);\n    },\n\n    /**\n     * Checks if data to display is there. If yes, it starts converting it to the frondet format for display.\n     */\n    triggerConversionOfDataForDisplay() {\n      if (this.dataAndMetaInfo.length > 0) {\n        this.convertDataToFrontendFormat();\n      }\n    },\n  },\n});\n</script>\n<style scoped lang=\"scss\">\n.d-table-style {\n  font-size: 16px;\n  text-align: left;\n  background-color: #f6f5ef;\n}\n\n.d-chevron-style {\n  float: right;\n  border: none;\n  background-color: #f6f5ef;\n}\n\n.d-chevron-font {\n  color: #e67f3f;\n  font-size: 14px;\n}\n</style>\n","import { type DataMetaInformation } from \"@clients/backend\";\nimport { type FrameworkData } from \"@/utils/GenericFrameworkTypes\";\n\nexport interface DataAndMetaInformation<T> {\n  metaInfo: DataMetaInformation;\n  data: T;\n}\n\nexport type DataAndMetaInformationViewModel<T extends FrameworkViewModel> = DataAndMetaInformation<T>;\n\nexport interface FrameworkViewModel {\n  toApiModel(): FrameworkData;\n}\n\n/**\n * Create a data view model with identity toApiModel conversion\n * @param input the data meta information object to wrap.\n * @returns a DataAndMetaInformationViewModel with an identity toApiModel function.\n */\nexport function getViewModelWithIdentityApiModel<T extends FrameworkData>(\n  input: DataAndMetaInformation<T>,\n): DataAndMetaInformationViewModel<T & FrameworkViewModel> {\n  return {\n    metaInfo: input.metaInfo,\n    data: {\n      ...input.data,\n      toApiModel: () => input.data,\n    },\n  };\n}\n","import { type Field } from \"@/utils/GenericFrameworkTypes\";\nimport { type KpiValue } from \"@/components/resources/frameworkDataSearch/KpiDataObject\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport { formatNumberToReadableFormat, formatPercentageNumberAsString } from \"@/utils/Formatter\";\n\n/**\n * Formats KPI values for display\n * @param field the considered KPI field\n * @param value the value to be formatted\n * @returns the formatted value\n */\nexport function formatValueForDisplay(field: Field, value: KpiValue): KpiValue {\n  if (field.name == \"sector\") {\n    return (value as string[]).map((sector) => humanizeStringOrNumber(sector));\n  }\n  if (field.component == \"PercentageFormField\") {\n    return formatPercentageNumberAsString(value as number);\n  }\n  if (typeof value === \"number\") {\n    return formatNumberToReadableFormat(value);\n  }\n  return value;\n}\n","<template>\n  <div v-if=\"waitingForData\" class=\"d-center-div text-center px-7 py-4\">\n    <p class=\"font-medium text-xl\">Loading {{ humanizeString(DataTypeEnum.P2p) }} Data...</p>\n    <em class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n  </div>\n  <div v-show=\"!waitingForData\">\n    <ThreeLayerTable\n      :data-model=\"p2pDataModel\"\n      :data-and-meta-info=\"p2pDataAndMetaInfo.map((it) => getViewModelWithIdentityApiModel(it))\"\n      @data-converted=\"handleFinishedDataConversion\"\n      :format-value-for-display=\"formatValueForDisplay\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { PanelProps } from \"@/components/resources/frameworkDataSearch/PanelComponentOptions\";\nimport { p2pDataModel } from \"@/components/resources/frameworkDataSearch/p2p/P2pDataModel\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { type DataAndMetaInformationPathwaysToParisData, DataTypeEnum } from \"@clients/backend\";\nimport type Keycloak from \"keycloak-js\";\nimport { defineComponent, inject } from \"vue\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport ThreeLayerTable from \"@/components/resources/frameworkDataSearch/ThreeLayerDataTable.vue\";\nimport { getViewModelWithIdentityApiModel } from \"@/components/resources/ViewModel\";\nimport { formatValueForDisplay } from \"@/components/resources/frameworkDataSearch/p2p/P2pFormatValueForDisplay\";\n\nexport default defineComponent({\n  name: \"P2pPanel\",\n\n  components: { ThreeLayerTable },\n  data() {\n    return {\n      DataTypeEnum,\n      firstRender: true,\n      waitingForData: true,\n      p2pDataAndMetaInfo: [] as Array<DataAndMetaInformationPathwaysToParisData>,\n      p2pDataModel,\n    };\n  },\n  props: PanelProps,\n  watch: {\n    companyId() {\n      this.fetchP2pData().catch((error) => console.log(error));\n    },\n    singleDataMetaInfoToDisplay() {\n      if (!this.firstRender) {\n        this.fetchP2pData().catch((error) => console.log(error));\n      }\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  created() {\n    this.fetchP2pData().catch((error) => console.log(error));\n    this.firstRender = false;\n  },\n\n  methods: {\n    formatValueForDisplay,\n    getViewModelWithIdentityApiModel,\n    humanizeString: humanizeStringOrNumber,\n    /**\n     * Fetches all accepted P2P datasets for the current company and converts them to the required frontend format.\n     */\n    async fetchP2pData() {\n      try {\n        this.waitingForData = true;\n        const p2pDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getP2pDataControllerApi();\n        if (this.singleDataMetaInfoToDisplay) {\n          const singleP2pData = (\n            await p2pDataControllerApi.getCompanyAssociatedP2pData(this.singleDataMetaInfoToDisplay.dataId)\n          ).data.data;\n          this.p2pDataAndMetaInfo = [{ metaInfo: this.singleDataMetaInfoToDisplay, data: singleP2pData }];\n        } else {\n          this.p2pDataAndMetaInfo = (\n            await p2pDataControllerApi.getAllCompanyP2pData(assertDefined(this.companyId))\n          ).data;\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * Handles the ThreeLayerTableEvent of finishing the data conversion\n     */\n    handleFinishedDataConversion() {\n      this.waitingForData = false;\n    },\n  },\n});\n</script>\n","import { type SmeData } from \"@clients/backend\";\nimport { type Category } from \"@/utils/GenericFrameworkTypes\";\n\nexport const smeDataModel = [\n  {\n    name: \"general\",\n    label: \"General\",\n    color: \"orange\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"basicInformation\",\n        label: \"Basic Information\",\n        fields: [\n          {\n            name: \"sector\",\n            label: \"Sector\",\n            description:\n              \"Please select the industry sector in which your company was mainly active in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"NaceCodeFormField\",\n            evidenceDesired: false,\n            required: true,\n            showIf: (): boolean => true,\n            validation: \"required|length:1\",\n          },\n          {\n            name: \"addressOfHeadquarters\",\n            label: \"Address Of Headquarters\",\n            description: \"Please provide the full address of your company's headquarters in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"AddressFormField\",\n            evidenceDesired: false,\n            required: true,\n            showIf: (): boolean => true,\n            validation: \"required\",\n          },\n          {\n            name: \"numberOfEmployees\",\n            label: \"Number of Employees\",\n            description: \"Please provide the number of workforce employed by your company in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: true,\n            showIf: (): boolean => true,\n            validation: \"required\",\n          },\n          {\n            name: \"fiscalYearStart\",\n            label: \"Fiscal Year Start\",\n            description: \"Please provide the starting date of the company's fiscal year to which you refer.\",\n            unit: \"\",\n            component: \"DateFormField\",\n            evidenceDesired: false,\n            required: true,\n            showIf: (): boolean => true,\n            validation: \"required\",\n          },\n        ],\n      },\n      {\n        name: \"companyFinancials\",\n        label: \"Company Financials\",\n        fields: [\n          {\n            name: \"revenueInEur\",\n            label: \"Revenue in EUR\",\n            description: \"Please provide your company's revenue in the relevant year in Euro.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"operatingCostInEur\",\n            label: \"Operating Cost in EUR\",\n            description: \"Please provide your company's operating cost in the relevant fiscal year in Euro.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"capitalAssetsInEur\",\n            label: \"Capital assets in EUR\",\n            description:\n              \"Please provide the value of your company's capital assets in the relevant fiscal year in Euro.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"production\",\n    label: \"Production\",\n    color: \"orange\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"sites\",\n        label: \"Sites\",\n        fields: [\n          {\n            name: \"listOfProductionSites\",\n            label: \"List of Production Sites\",\n            description:\n              \"Please provide the percentage of revenue generated at the provided main branch/production site or your headquarters relative to your company's total revenue in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"ProductionSitesFormFieldSme\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"products\",\n        label: \"Products\",\n        fields: [\n          {\n            name: \"listOfProducts\",\n            label: \"List of Products\",\n            description:\n              \"Please provide the HS-Code of the product category generating the highest revenue in your company in the relevant fiscal year. Please use the provided link to identify the product category code.\",\n            unit: \"\",\n            component: \"ProductsFormFieldSme\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"power\",\n    label: \"Power\",\n    color: \"yellow\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"investments\",\n        label: \"Investments\",\n        fields: [\n          {\n            name: \"percentageOfInvestmentsInEnhancingEnergyEfficiency\",\n            label: \"Percentage of investments in enhancing energy efficiency\",\n            description:\n              \"Please provide the fraction of your company's total investments that was primarily spent to enhance energy efficiency in the last fiscal year.\",\n            unit: \"\",\n            component: \"RadioButtonsFormField\",\n            evidenceDesired: false,\n            options: [\n              {\n                label: \"< 1%\",\n                value: \"LessThan1\",\n              },\n              {\n                label: \"1-5%\",\n                value: \"Between1And5\",\n              },\n              {\n                label: \"5-10%\",\n                value: \"Between5And10\",\n              },\n              {\n                label: \"10-15%\",\n                value: \"Between10And15\",\n              },\n              {\n                label: \"15-20%\",\n                value: \"Between15And20\",\n              },\n              {\n                label: \"20-25%\",\n                value: \"Between20And25\",\n              },\n              {\n                label: \"> 25%\",\n                value: \"GreaterThan25\",\n              },\n            ],\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"consumption\",\n        label: \"Consumption\",\n        fields: [\n          {\n            name: \"powerConsumptionInMwh\",\n            label: \"Power consumption in MWh\",\n            description: \"Please provide your company's power consumption in the relevant fiscal year in MWh.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"powerFromRenewableSources\",\n            label: \"power from renewable sources\",\n            description:\n              \"Please provide information whether your company has been primarily using power from renewable sources in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"YesNoFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n            certificateRequiredIfYes: false,\n          },\n          {\n            name: \"energyConsumptionHeatingAndHotWater\",\n            label: \"Energy consumption heating and hot water\",\n            description:\n              \"Please provide your company's power consumption for heating and hot water generation in the relevant fiscal year in MWh.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"primaryEnergySourceForHeatingAndHotWater\",\n            label: \"Primary energy source for heating and hot water\",\n            description:\n              \"Please provide the energy source primarily used by your company for heating/hot water generation in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"RadioButtonsFormField\",\n            evidenceDesired: false,\n            options: [\n              {\n                label: \"Oil\",\n                value: \"oil\",\n              },\n              {\n                label: \"Gas\",\n                value: \"gas\",\n              },\n              {\n                label: \"Electric\",\n                value: \"electric\",\n              },\n              {\n                label: \"District Heating\",\n                value: \"district heating\",\n              },\n            ],\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"energyConsumptionCoveredByOwnRenewablePowerGeneration\",\n            label: \"Energy consumption covered by own renewable power generation\",\n            description:\n              \"Please provide the portion of consumed power generated by your own renewable sources relative to your company's total power consumption in the relevant fiscal year.\",\n            unit: \"\",\n            component: \"RadioButtonsFormField\",\n            evidenceDesired: false,\n            options: [\n              {\n                label: \"< 25%\",\n                value: \"LessThan25\",\n              },\n              {\n                label: \"25-50%\",\n                value: \"Between25And50\",\n              },\n              {\n                label: \"50-75%\",\n                value: \"Between50And75\",\n              },\n              {\n                label: \"> 75%\",\n                value: \"GreaterThan75\",\n              },\n            ],\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"insurances\",\n    label: \"Insurances\",\n    color: \"blue\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"naturalHazards\",\n        label: \"Natural Hazards\",\n        fields: [\n          {\n            name: \"insuranceAgainstNaturalHazards\",\n            label: \"Insurance against natural hazards\",\n            description:\n              \"Please provide information whether your company has insurance against natural hazards at its branch/production site generating most revenue, or its headquarters.\",\n            unit: \"\",\n            component: \"YesNoFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n            certificateRequiredIfYes: false,\n          },\n          {\n            name: \"amountCoveredByInsuranceAgainstNaturalHazards\",\n            label: \"Amount covered by insurance against natural hazards\",\n            description:\n              \"Please provide the amount covered by the insurance in EUR. In case your company has different policies for different natural hazards please provide the average amount covered.\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (dataModel: SmeData): boolean =>\n              dataModel?.insurances?.naturalHazards?.insuranceAgainstNaturalHazards === \"Yes\",\n          },\n          {\n            name: \"naturalHazardsCovered\",\n            label: \"Natural Hazards covered\",\n            description: \"Please identify all natural hazards covered by your insurance.\",\n            unit: \"\",\n            component: \"MultiSelectFormField\",\n            evidenceDesired: false,\n            options: [\n              {\n                label: \"Hail\",\n                value: \"hail\",\n              },\n              {\n                label: \"Wind\",\n                value: \"wind\",\n              },\n              {\n                label: \"Flooding\",\n                value: \"flooding\",\n              },\n              {\n                label: \"Earth Quakes\",\n                value: \"earth quakes\",\n              },\n              {\n                label: \"Avalanches\",\n                value: \"avalanches\",\n              },\n              {\n                label: \"Snow\",\n                value: \"snow\",\n              },\n            ],\n            required: false,\n            showIf: (dataModel: SmeData): boolean =>\n              dataModel?.insurances?.naturalHazards?.insuranceAgainstNaturalHazards === \"Yes\",\n            placeholder: \"Select Options\",\n          },\n        ],\n      },\n    ],\n  },\n] as Array<Category>;\n","export const smeModalColumnHeaders = {\n  listOfProductionSites: {\n    nameOfProductionSite: \"Name\",\n    addressOfProductionSite: \"Address\",\n    percentageOfTotalRevenue: \"Percentage of Total Revenue\",\n  },\n  listOfProducts: {\n    name: \"Product Name\",\n    percentageOfTotalRevenue: \"Percentage of Total Revenue\",\n  },\n};\n","<template>\n  <div v-if=\"waitingForData\" class=\"d-center-div text-center px-7 py-4\">\n    <p class=\"font-medium text-xl\">Loading {{ humanizeString(DataTypeEnum.Sme) }} Data...</p>\n    <em class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n  </div>\n  <div v-show=\"!waitingForData\">\n    <ThreeLayerTable\n      :data-model=\"smeDataModel\"\n      :data-and-meta-info=\"smeDataAndMetaInfo.map((it) => getViewModelWithIdentityApiModel(it))\"\n      @data-converted=\"handleFinishedDataConversion\"\n      :format-value-for-display=\"formatValueForDisplay\"\n      :modal-column-headers=\"smeModalColumnHeaders\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { PanelProps } from \"@/components/resources/frameworkDataSearch/PanelComponentOptions\";\nimport { smeDataModel } from \"@/components/resources/frameworkDataSearch/sme/SmeDataModel\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport {\n  type DataAndMetaInformationSmeData,\n  DataTypeEnum,\n  type SmeProduct,\n  type SmeProductionSite,\n} from \"@clients/backend\";\nimport type Keycloak from \"keycloak-js\";\nimport { defineComponent, inject } from \"vue\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport ThreeLayerTable from \"@/components/resources/frameworkDataSearch/ThreeLayerDataTable.vue\";\nimport { type KpiValue } from \"@/components/resources/frameworkDataSearch/KpiDataObject\";\nimport { type Field } from \"@/utils/GenericFrameworkTypes\";\nimport { smeModalColumnHeaders } from \"@/components/resources/frameworkDataSearch/sme/SmeModalColumnHeaders\";\nimport { convertToMillions } from \"@/utils/NumberConversionUtils\";\nimport { convertNace } from \"@/utils/NaceCodeConverter\";\nimport { getViewModelWithIdentityApiModel } from \"@/components/resources/ViewModel\";\n\nexport default defineComponent({\n  name: \"SmePanel\",\n  components: { ThreeLayerTable },\n  data() {\n    return {\n      DataTypeEnum,\n      smeDataModel,\n      firstRender: true,\n      waitingForData: true,\n      smeDataAndMetaInfo: [] as Array<DataAndMetaInformationSmeData>,\n      smeModalColumnHeaders,\n    };\n  },\n  props: PanelProps,\n  watch: {\n    companyId() {\n      this.fetchSmeData().catch((error) => console.log(error));\n    },\n    singleDataMetaInfoToDisplay() {\n      if (!this.firstRender) {\n        this.fetchSmeData().catch((error) => console.log(error));\n      }\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  created() {\n    this.fetchSmeData().catch((error) => console.log(error));\n    this.firstRender = false;\n  },\n\n  methods: {\n    getViewModelWithIdentityApiModel,\n    humanizeString: humanizeStringOrNumber,\n    /**\n     * Fetches all accepted SME datasets for the current company and converts them to the required frontend format.\n     */\n    async fetchSmeData() {\n      try {\n        this.waitingForData = true;\n        const smeDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getSmeDataControllerApi();\n        if (this.singleDataMetaInfoToDisplay) {\n          const singleSmeData = (\n            await smeDataControllerApi.getCompanyAssociatedSmeData(this.singleDataMetaInfoToDisplay.dataId)\n          ).data.data;\n          this.smeDataAndMetaInfo = [{ metaInfo: this.singleDataMetaInfoToDisplay, data: singleSmeData }];\n        } else {\n          this.smeDataAndMetaInfo = (\n            await smeDataControllerApi.getAllCompanySmeData(assertDefined(this.companyId))\n          ).data;\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * Handles the ThreeLayerTableEvent of finishing the data conversion\n     */\n    handleFinishedDataConversion() {\n      this.waitingForData = false;\n    },\n    /**\n     * Formats KPI values for display\n     * @param field the considered KPI field\n     * @param value the value to be formatted\n     * @returns the formatted value\n     */\n    formatValueForDisplay(field: Field, value: KpiValue): KpiValue {\n      const fieldsToConvertToMillions = [\n        \"revenueInEur\",\n        \"operatingCostInEur\",\n        \"capitalAssetsInEur\",\n        \"amountCoveredByInsuranceAgainstNaturalHazards\",\n      ];\n      const optionFields = [\n        \"percentageOfInvestmentsInEnhancingEnergyEfficiency\",\n        \"energyConsumptionCoveredByOwnRenewablePowerGeneration\",\n      ];\n      if (value == null) {\n        return value;\n      } else if (field.name == \"addressOfHeadquarters\") {\n        return this.formatAddress(value as object);\n      } else if (optionFields.includes(field.name)) {\n        return assertDefined(assertDefined(field.options).find((option) => option.value === value).label);\n      } else if (field.name == \"listOfProductionSites\") {\n        const listOfProductionSites = value as SmeProductionSite[];\n        return listOfProductionSites.map((productionSite) => ({\n          nameOfProductionSite: productionSite.nameOfProductionSite,\n          addressOfProductionSite: productionSite.addressOfProductionSite,\n          percentageOfTotalRevenue: productionSite.percentageOfTotalRevenue\n            ? `${productionSite.percentageOfTotalRevenue} %`\n            : undefined,\n        }));\n      } else if (field.name == \"sector\") {\n        return convertNace(value);\n      } else if (field.name == \"listOfProducts\") {\n        const listOfProducts = value as SmeProduct[];\n        return listOfProducts.map((product) => ({\n          name: product.name,\n          percentageOfTotalRevenue: product.percentageOfTotalRevenue\n            ? `${product.percentageOfTotalRevenue} %`\n            : undefined,\n        }));\n      } else if (fieldsToConvertToMillions.includes(field.name)) {\n        return convertToMillions(value as number);\n      }\n      return value;\n    },\n    /**\n     * Formats an address to a multiline string\n     * @param addressObject the address in object form\n     * @returns the multiline address string\n     */\n    formatAddress(addressObject: object): string {\n      /**\n       * Tests if a provided string is defined and non-empty\n       * @param value the string to test\n       * @returns true if the string is defined and non-empty, else false\n       */\n      function isProperString(value?: string): boolean {\n        return value != undefined && value != \"\";\n      }\n\n      /**\n       * Tries to get the value of a field with a key or undefined if no such field was found\n       * @param key the key to get the data for\n       * @returns the value corresponding to the key or undefined if no such field was found\n       */\n      function getEntryValue(key: string): string | undefined {\n        const searchResult = Object.entries(addressObject).find((entry) => entry[0] == key);\n        return searchResult ? (searchResult[1] as string) : undefined;\n      }\n\n      let addressString = \"\";\n      const streetAndHouseNumber = getEntryValue(\"streetAndHouseNumber\");\n      if (isProperString(streetAndHouseNumber)) {\n        addressString += `${assertDefined(streetAndHouseNumber)}\\n`;\n      }\n      const postalCode = getEntryValue(\"postalCode\");\n      if (isProperString(postalCode)) {\n        addressString += `${assertDefined(postalCode)} `;\n      }\n      addressString += `${assertDefined(getEntryValue(\"city\"))}\\n`;\n      const state = getEntryValue(\"state\");\n      if (isProperString(state)) {\n        addressString += `${assertDefined(state)}, `;\n      }\n      addressString += assertDefined(getEntryValue(\"country\"));\n      return addressString;\n    },\n  },\n});\n</script>\n","import { type Category } from \"@/utils/GenericFrameworkTypes\";\n\n/*\nNote: This file is not in the same state as it is in the devtools repo, where it has been auto-generated.\nManual adjustments have been made in oder to make the view page work while using this file here.\nTherefore, the view page for eu-taxo will break if you replace the current content of this file here with the\ncontent from the auto-generated file in the devtools repo.\n */\n\nexport const euTaxonomyForNonFinancialsDisplayDataModel = [\n  {\n    name: \"general\",\n    label: \"General\",\n    color: \"orange\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"general\",\n        label: \"General\",\n        fields: [\n          {\n            name: \"fiscalYearDeviation\",\n            label: \"Fiscal Year Deviation\",\n            description: \"Fiscal Year (Deviation/ No Deviation)\",\n            unit: \"\",\n            component: \"RadioButtonsFormField\",\n            evidenceDesired: false,\n            options: [\n              {\n                label: \"Deviation\",\n                value: \"Deviation\",\n              },\n              {\n                label: \"No Deviation\",\n                value: \"NoDeviation\",\n              },\n            ],\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"fiscalYearEnd\",\n            label: \"Fiscal Year End\",\n            description: \"The date the fiscal year ends\",\n            unit: \"\",\n            component: \"DateFormField\",\n            evidenceDesired: false,\n            required: true,\n            showIf: (): boolean => true,\n            validation: \"required\",\n          },\n          {\n            name: \"scopeOfEntities\",\n            label: \"Scope Of Entities\",\n            description:\n              \"Does a list of legal entities covered by Sust./Annual/Integrated/ESEF report match with a list of legal entities covered by Audited Consolidated Financial Statement \",\n            unit: \"\",\n            component: \"YesNoNaFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n            certificateRequiredIfYes: false,\n          },\n          {\n            name: \"euTaxonomyActivityLevelReporting\",\n            label: \"EU Taxonomy Activity Level Reporting\",\n            description: \"Activity Level disclosure\",\n            unit: \"\",\n            component: \"YesNoFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n            certificateRequiredIfYes: false,\n          },\n          {\n            name: \"numberOfEmployees\",\n            label: \"Number Of Employees\",\n            description: \"Total number of employees (including temporary workers)\",\n            unit: \"\",\n            component: \"NumberFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"nfrdMandatory\",\n            label: \"NFRD Mandatory\",\n            description: \"The reporting obligation for companies whose number of employees is greater or equal to 500\",\n            unit: \"\",\n            component: \"YesNoFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n            certificateRequiredIfYes: false,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"assurance\",\n    label: \"Assurance\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"assurance\",\n        label: \"Assurance\",\n        fields: [\n          {\n            name: \"levelOfAssurance\",\n            label: \"Level of Assurance\",\n            description:\n              \"Level of Assurance of the EU Taxonomy disclosure (Reasonable Assurance, Limited Assurance, None)\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: true,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"assuranceProvider\",\n            label: \"Assurance Provider\",\n            description: \"Provider of the Assurance\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: true,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"revenue\",\n    label: \"Revenue\",\n    color: \"green\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"totalAmount\",\n        label: \"Total Revenue\",\n        fields: [\n          {\n            name: \"quality\",\n            label: \"Quality\",\n            description: \"The quality of the provided data\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"value\",\n            label: \"Value\",\n            description: \"The provided data\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"dataSource\",\n            label: \"Data Source\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => false,\n          },\n          {\n            name: \"comment\",\n            label: \"Comment\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => false,\n          },\n          {\n            name: \"unit\",\n            label: \"Currency\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"eligibleShare\",\n        label: \"Eligible Revenue\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"alignedShare\",\n        label: \"Aligned Revenue\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"substantialContributionToClimateChangeMitigationInPercent\",\n            label: \"Substantial Contribution to Climate Change Mitigation\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToClimateChangeAdaptionInPercent\",\n            label: \"Substantial Contribution to Climate Change Adaption\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent\",\n            label: \"Substantial Contribution to Sustainable Use and Protection of Water and Marine Resources\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToTransitionToACircularEconomyInPercent\",\n            label: \"Substantial Contribution to Transition to a Circular Economy\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToPollutionPreventionAndControlInPercent\",\n            label: \"Substantial Contribution to Pollution Prevention and Control\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent\",\n            label: \"Substantial Contribution to Protection and Restoration of Biodiversity and Ecosystems\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"alignedActivities\",\n            label: \"Aligned Revenue per Activity\",\n            description: \"\",\n            unit: \"\",\n            component: \"AlignedActivitiesDataTable\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"nonAlignedShare\",\n        label: \"Non-Aligned Revenue\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"nonAlignedActivities\",\n            label: \"Non-Aligned Revenue per Activity\",\n            description: \"\",\n            unit: \"\",\n            component: \"NonAlignedActivitiesDataTable\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"nonEligibleShare\",\n        label: \"Non-Eligible Revenue\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"enablingShare\",\n        label: \"Enabling Revenue\",\n        fields: [\n          {\n            name: \"enablingShareInPercent\",\n            label: \"Enabling Revenue\",\n            description: \"\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"transitionalShare\",\n        label: \"Transitional Revenue\",\n        fields: [\n          {\n            name: \"transitionalShareInPercent\",\n            label: \"Transitional Revenue\",\n            description: \"\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"capex\",\n    label: \"CapEx\",\n    color: \"yellow\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"totalAmount\",\n        label: \"Total CapEx\",\n        fields: [\n          {\n            name: \"quality\",\n            label: \"Quality\",\n            description: \"The quality of the provided data\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"value\",\n            label: \"Value\",\n            description: \"The provided data\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"dataSource\",\n            label: \"Data Source\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => false,\n          },\n          {\n            name: \"comment\",\n            label: \"Comment\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => false,\n          },\n          {\n            name: \"unit\",\n            label: \"Currency\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"eligibleShare\",\n        label: \"Eligible CapEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"alignedShare\",\n        label: \"Aligned CapEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"substantialContributionToClimateChangeMitigationInPercent\",\n            label: \"Substantial Contribution to Climate Change Mitigation\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToClimateChangeAdaptionInPercent\",\n            label: \"Substantial Contribution to Climate Change Adaption\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent\",\n            label: \"Substantial Contribution to Sustainable Use and Protection of Water and Marine Resources\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToTransitionToACircularEconomyInPercent\",\n            label: \"Substantial Contribution to Transition to a Circular Economy\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToPollutionPreventionAndControlInPercent\",\n            label: \"Substantial Contribution to Pollution Prevention and Control\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent\",\n            label: \"Substantial Contribution to Protection and Restoration of Biodiversity and Ecosystems\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"alignedActivities\",\n            label: \"Aligned CapEx per Activity\",\n            description: \"\",\n            unit: \"\",\n            component: \"AlignedActivitiesDataTable\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"nonAlignedShare\",\n        label: \"Non-Aligned CapEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"nonAlignedActivities\",\n            label: \"Non-Aligned CapEx per Activity\",\n            description: \"\",\n            unit: \"\",\n            component: \"NonAlignedActivitiesDataTable\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"nonEligibleShare\",\n        label: \"Non-Eligible CapEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"enablingShare\",\n        label: \"Enabling CapEx\",\n        fields: [\n          {\n            name: \"enablingShareInPercent\",\n            label: \"Enabling CapEx\",\n            description: \"\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"transitionalShare\",\n        label: \"Transitional CapEx\",\n        fields: [\n          {\n            name: \"transitionalShareInPercent\",\n            label: \"Transitional CapEx\",\n            description: \"\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"opex\",\n    label: \"OpEx\",\n    color: \"blue\",\n    showIf: (): boolean => true,\n    subcategories: [\n      {\n        name: \"totalAmount\",\n        label: \"Total OpEx\",\n        fields: [\n          {\n            name: \"quality\",\n            label: \"Quality\",\n            description: \"The quality of the provided data\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"value\",\n            label: \"Value\",\n            description: \"The provided data\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"dataSource\",\n            label: \"Data Source\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => false,\n          },\n          {\n            name: \"comment\",\n            label: \"Comment\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => false,\n          },\n          {\n            name: \"unit\",\n            label: \"Currency\",\n            description: \"\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"eligibleShare\",\n        label: \"Eligible OpEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"alignedShare\",\n        label: \"Aligned OpEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"substantialContributionToClimateChangeMitigationInPercent\",\n            label: \"Substantial Contribution to Climate Change Mitigation\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToClimateChangeAdaptionInPercent\",\n            label: \"Substantial Contribution to Climate Change Adaption\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent\",\n            label: \"Substantial Contribution to Sustainable Use and Protection of Water and Marine Resources\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToTransitionToACircularEconomyInPercent\",\n            label: \"Substantial Contribution to Transition to a Circular Economy\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToPollutionPreventionAndControlInPercent\",\n            label: \"Substantial Contribution to Pollution Prevention and Control\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent\",\n            label: \"Substantial Contribution to Protection and Restoration of Biodiversity and Ecosystems\",\n            showIf: (): boolean => true,\n            description: \"\",\n            component: \"PercentageFormField\",\n          },\n          {\n            name: \"alignedActivities\",\n            label: \"Aligned OpEx per Activity\",\n            description: \"\",\n            unit: \"\",\n            component: \"AlignedActivitiesDataTable\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"nonAlignedShare\",\n        label: \"Non-Aligned OpEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"nonAlignedActivities\",\n            label: \"Non-Aligned OpEx per Activity\",\n            description: \"\",\n            unit: \"\",\n            component: \"NonAlignedActivitiesDataTable\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"nonEligibleShare\",\n        label: \"Non-Eligible OpEx\",\n        fields: [\n          {\n            name: \"relativeShareInPercent\",\n            label: \"Percentage\",\n            description: \"The relative share on the financial asset\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n          {\n            name: \"absoluteShare\",\n            label: \"Absolute share\",\n            description: \"The absolute share on the financial asset\",\n            unit: \"\",\n            component: \"UndefinedFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"enablingShare\",\n        label: \"Enabling OpEx\",\n        fields: [\n          {\n            name: \"enablingShareInPercent\",\n            label: \"Enabling OpEx\",\n            description: \"\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n      {\n        name: \"transitionalShare\",\n        label: \"Transitional OpEx\",\n        fields: [\n          {\n            name: \"transitionalShareInPercent\",\n            label: \"Transitional OpEx\",\n            description: \"\",\n            unit: \"\",\n            component: \"PercentageFormField\",\n            evidenceDesired: false,\n            required: false,\n            showIf: (): boolean => true,\n          },\n        ],\n      },\n    ],\n  },\n] as Array<Category>;\n","import {\n  type AssuranceDataAssuranceEnum,\n  type DataAndMetaInformationEuTaxonomyDataForNonFinancials,\n  type DataMetaInformation,\n  type EuTaxonomyActivity,\n  type EuTaxonomyAlignedActivity,\n  type FiscalYearDeviation,\n  type EuTaxonomyDataForNonFinancials,\n  type EuTaxonomyDetailsPerCashFlowType,\n  type RelativeAndAbsoluteFinancialShare,\n  type YesNo,\n  type YesNoNa,\n  type DataPointWithUnitBigDecimal,\n} from \"@clients/backend\";\nimport { type DataAndMetaInformationViewModel, type FrameworkViewModel } from \"@/components/resources/ViewModel\";\n\ninterface EuTaxonomyDetailsPerCashFlowViewModel {\n  totalAmount?: DataPointWithUnitBigDecimal;\n  nonEligibleShare?: RelativeAndAbsoluteFinancialShare;\n  eligibleShare?: RelativeAndAbsoluteFinancialShare;\n  nonAlignedShare?: RelativeAndAbsoluteFinancialShare & { nonAlignedActivities?: EuTaxonomyActivity[] };\n  alignedShare?: RelativeAndAbsoluteFinancialShare & {\n    alignedActivities?: EuTaxonomyAlignedActivity[];\n    substantialContributionToClimateChangeMitigationInPercent?: number;\n    substantialContributionToClimateChangeAdaptionInPercent?: number;\n    substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent?: number;\n    substantialContributionToTransitionToACircularEconomyInPercent?: number;\n    substantialContributionToPollutionPreventionAndControlInPercent?: number;\n    substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent?: number;\n  };\n  enablingShare?: { enablingShareInPercent?: number };\n  transitionalShare?: { transitionalShareInPercent?: number };\n}\n\nexport class EuTaxonomyForNonFinancialsViewModel implements FrameworkViewModel {\n  general?: {\n    general: {\n      fiscalYearDeviation?: FiscalYearDeviation;\n      fiscalYearEnd?: string;\n      scopeOfEntities?: YesNoNa;\n      nfrdMandatory?: YesNo;\n      euTaxonomyActivityLevelReporting?: YesNo;\n      numberOfEmployees?: number;\n    };\n  };\n  assurance?: {\n    assurance: {\n      levelOfAssurance: AssuranceDataAssuranceEnum;\n      assuranceProvider?: string;\n    };\n  };\n  revenue?: EuTaxonomyDetailsPerCashFlowViewModel;\n  capex?: EuTaxonomyDetailsPerCashFlowViewModel;\n  opex?: EuTaxonomyDetailsPerCashFlowViewModel;\n\n  constructor(apiModel: EuTaxonomyDataForNonFinancials) {\n    this.general = {\n      general: {\n        fiscalYearDeviation: apiModel.general?.fiscalYearDeviation,\n        fiscalYearEnd: apiModel.general?.fiscalYearEnd,\n        scopeOfEntities: apiModel.general?.scopeOfEntities,\n        euTaxonomyActivityLevelReporting: apiModel.general?.euTaxonomyActivityLevelReporting,\n        numberOfEmployees: apiModel.general?.numberOfEmployees,\n        nfrdMandatory: apiModel.general?.nfrdMandatory,\n      },\n    };\n    this.assurance =\n      apiModel.general?.assurance?.assurance == undefined\n        ? undefined\n        : {\n            assurance: {\n              levelOfAssurance: apiModel.general.assurance.assurance,\n              assuranceProvider: apiModel.general.assurance.provider,\n            },\n          };\n    this.revenue = EuTaxonomyForNonFinancialsViewModel.convertDetailsPerCashFlowApiModelToViewModel(apiModel.revenue);\n    this.capex = EuTaxonomyForNonFinancialsViewModel.convertDetailsPerCashFlowApiModelToViewModel(apiModel.capex);\n    this.opex = EuTaxonomyForNonFinancialsViewModel.convertDetailsPerCashFlowApiModelToViewModel(apiModel.opex);\n  }\n\n  toApiModel(): EuTaxonomyDataForNonFinancials {\n    return {\n      general: {\n        fiscalYearDeviation: this.general?.general?.fiscalYearDeviation,\n        fiscalYearEnd: this.general?.general?.fiscalYearEnd,\n        scopeOfEntities: this.general?.general?.scopeOfEntities,\n        nfrdMandatory: this.general?.general?.nfrdMandatory,\n        euTaxonomyActivityLevelReporting: this.general?.general?.euTaxonomyActivityLevelReporting,\n        assurance:\n          this.assurance == undefined\n            ? undefined\n            : {\n                assurance: this.assurance?.assurance.levelOfAssurance,\n                provider: this.assurance?.assurance.assuranceProvider,\n              },\n        numberOfEmployees: this.general?.general?.numberOfEmployees,\n      },\n      revenue: EuTaxonomyForNonFinancialsViewModel.convertDetailsPerCashFlowViewModelToApiModel(this.revenue),\n      capex: EuTaxonomyForNonFinancialsViewModel.convertDetailsPerCashFlowViewModelToApiModel(this.capex),\n      opex: EuTaxonomyForNonFinancialsViewModel.convertDetailsPerCashFlowViewModelToApiModel(this.opex),\n    };\n  }\n\n  private static convertDetailsPerCashFlowApiModelToViewModel(\n    apiModel?: EuTaxonomyDetailsPerCashFlowType,\n  ): EuTaxonomyDetailsPerCashFlowViewModel | undefined {\n    if (apiModel == undefined) {\n      return undefined;\n    }\n    return {\n      totalAmount: apiModel.totalAmount,\n      eligibleShare: apiModel.eligibleShare,\n      alignedShare: {\n        ...(apiModel.alignedShare ?? {}),\n        substantialContributionToClimateChangeMitigationInPercent:\n          apiModel.substantialContributionToClimateChangeMitigationInPercent,\n        substantialContributionToClimateChangeAdaptionInPercent:\n          apiModel.substantialContributionToClimateChangeAdaptionInPercent,\n        substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:\n          apiModel.substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent,\n        substantialContributionToTransitionToACircularEconomyInPercent:\n          apiModel.substantialContributionToTransitionToACircularEconomyInPercent,\n        substantialContributionToPollutionPreventionAndControlInPercent:\n          apiModel.substantialContributionToPollutionPreventionAndControlInPercent,\n        substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:\n          apiModel.substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent,\n        alignedActivities: apiModel.alignedActivities,\n      },\n      nonAlignedShare: {\n        ...(apiModel.nonAlignedShare ?? {}),\n        nonAlignedActivities: apiModel.nonAlignedActivities,\n      },\n      nonEligibleShare: apiModel.nonEligibleShare,\n      enablingShare: { enablingShareInPercent: apiModel.enablingShareInPercent },\n      transitionalShare: { transitionalShareInPercent: apiModel.transitionalShareInPercent },\n    };\n  }\n\n  private static convertDetailsPerCashFlowViewModelToApiModel(\n    viewModel?: EuTaxonomyDetailsPerCashFlowViewModel,\n  ): EuTaxonomyDetailsPerCashFlowType | undefined {\n    if (viewModel == undefined) {\n      return undefined;\n    }\n    return {\n      totalAmount: viewModel.totalAmount,\n      nonEligibleShare: viewModel.nonEligibleShare,\n      eligibleShare: viewModel.eligibleShare,\n      nonAlignedShare: viewModel.nonAlignedShare,\n      alignedShare: viewModel.alignedShare,\n      nonAlignedActivities: viewModel.nonAlignedShare?.nonAlignedActivities,\n      alignedActivities: viewModel.alignedShare?.alignedActivities,\n      substantialContributionToClimateChangeMitigationInPercent:\n        viewModel.alignedShare?.substantialContributionToClimateChangeMitigationInPercent,\n      substantialContributionToClimateChangeAdaptionInPercent:\n        viewModel.alignedShare?.substantialContributionToClimateChangeAdaptionInPercent,\n      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:\n        viewModel.alignedShare?.substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent,\n      substantialContributionToTransitionToACircularEconomyInPercent:\n        viewModel.alignedShare?.substantialContributionToTransitionToACircularEconomyInPercent,\n      substantialContributionToPollutionPreventionAndControlInPercent:\n        viewModel.alignedShare?.substantialContributionToPollutionPreventionAndControlInPercent,\n      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:\n        viewModel.alignedShare?.substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent,\n      enablingShareInPercent: viewModel.enablingShare?.enablingShareInPercent,\n      transitionalShareInPercent: viewModel.transitionalShare?.transitionalShareInPercent,\n    };\n  }\n}\n\nexport class DataAndMetaInformationEuTaxonomyForNonFinancialsViewModel\n  implements DataAndMetaInformationViewModel<EuTaxonomyForNonFinancialsViewModel>\n{\n  metaInfo: DataMetaInformation;\n  data: EuTaxonomyForNonFinancialsViewModel;\n\n  constructor(dataAndMetaInfoApiModel: DataAndMetaInformationEuTaxonomyDataForNonFinancials) {\n    this.metaInfo = dataAndMetaInfoApiModel.metaInfo;\n    this.data = new EuTaxonomyForNonFinancialsViewModel(dataAndMetaInfoApiModel.data);\n  }\n\n  toApiModel(): DataAndMetaInformationEuTaxonomyDataForNonFinancials {\n    return {\n      metaInfo: this.metaInfo,\n      data: this.data.toApiModel(),\n    };\n  }\n}\n","<template>\n  <div class=\"dataland-dialog dataland-dialog-sm\" data-test=\"previousReportsList\">\n    <div v-for=\"(referencedReportObject, indexOuter) in referencedReportsList\" :key=\"indexOuter\" class=\"row\">\n      <div v-if=\"indexOuter !== indexOfNewestReportingPeriod\">\n        <h4>{{ `Company Reports (${reportingPeriods[indexOuter]})` }}</h4>\n        <div\n          v-for=\"(report, nameInner, indexInner) in referencedReportObject\"\n          :key=\"indexInner\"\n          class=\"row mb-2\"\n          data-test=\"previousReportsList\"\n        >\n          <DocumentLink :download-name=\"nameInner\" :reference=\"report.reference\" show-icon />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport type { DynamicDialogInstance } from \"primevue/dynamicdialogoptions\";\nimport DocumentLink from \"@/components/resources/frameworkDataSearch/DocumentLink.vue\";\nimport type { CompanyReport } from \"@clients/backend\";\n\nexport default defineComponent({\n  components: { DocumentLink },\n  inject: [\"dialogRef\"],\n  name: \"PreviousReportsModal\",\n  data() {\n    return {\n      reportingPeriods: [] as Array<string>,\n      referencedReportsList: [] as Array<{ [p: string]: CompanyReport }>,\n      indexOfNewestReportingPeriod: 9999 as number,\n    };\n  },\n  created() {\n    const dialogRefToDisplay = this.dialogRef as DynamicDialogInstance;\n    const dialogRefData = dialogRefToDisplay.data as {\n      reportingPeriodsForTable: Array<string>;\n      referencedReportsForModal: Array<{ [p: string]: CompanyReport }>;\n      indexOfNewestReportingPeriodForModal: number;\n    };\n    this.reportingPeriods = dialogRefData.reportingPeriodsForTable;\n    this.referencedReportsList = dialogRefData.referencedReportsForModal;\n    this.indexOfNewestReportingPeriod =\n      this.reportingPeriods.length - dialogRefData.indexOfNewestReportingPeriodForModal - 1;\n    this.reportingPeriods.reverse();\n    this.referencedReportsList.reverse();\n  },\n});\n</script>\n\n<style scoped>\na:link {\n  color: var(--yellow-700);\n}\n</style>\n","<template>\n  <div class=\"next-to-each-other my-4\">\n    <h4 class=\"m-0\" data-test=\"frameworkNewDataTableTitle\">\n      {{\n        `Data extracted from the company report. Company Reports(${reportingPeriods[indexOfNewestReportingPeriod]}):`\n      }}\n    </h4>\n    <span id=\"reportList\">\n      <span v-for=\"(report, name, index) in reports[indexOfNewestReportingPeriod]\" :key=\"index\" class=\"link-in-list\">\n        <DocumentLink\n          data-test=\"documentLinkTest\"\n          :download-name=\"name\"\n          :reference=\"report.reference\"\n          font-style=\"font-semibold\"\n        />\n      </span>\n    </span>\n    <span\n      v-if=\"doPreviousReportsExist(reports, indexOfNewestReportingPeriod)\"\n      class=\"link font-semibold underline mr-0 ml-auto\"\n      @click=\"openModalAndDisplayPreviousReportsInTable(reportingPeriods)\"\n      data-test=\"previousReportsLinkToModal\"\n      >Previous years reports\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport DocumentLink from \"@/components/resources/frameworkDataSearch/DocumentLink.vue\";\nimport PreviousReportsModal from \"@/components/resources/frameworkDataSearch/PreviousReportsModal.vue\";\nimport type { CompanyReport } from \"@clients/backend\";\n\nexport default defineComponent({\n  name: \"ShowMultipleReportsBanner\",\n  components: { DocumentLink },\n  data() {\n    return {\n      indexOfNewestReportingPeriod: -1 as number,\n    };\n  },\n  props: {\n    reports: { type: Array<{ [p: string]: CompanyReport }>, required: true },\n    reportingPeriods: { type: Array<string>, required: true },\n  },\n  mounted() {\n    this.indexOfNewestReportingPeriod = this.calculateIndexOfNewestReportingPeriod(this.reportingPeriods);\n  },\n  methods: {\n    /**\n     * Opens a modal to display a table containing previous referenced reports\n     * @param reportingPeriods States the origin year of the report.\n     */\n    openModalAndDisplayPreviousReportsInTable(reportingPeriods: Array<string>) {\n      const passedData = {\n        reportingPeriodsForTable: reportingPeriods,\n        referencedReportsForModal: this.reports,\n        indexOfNewestReportingPeriodForModal: this.indexOfNewestReportingPeriod,\n      };\n      this.$dialog.open(PreviousReportsModal, {\n        props: {\n          header: \"Previous years reports\",\n          modal: true,\n          dismissableMask: true,\n        },\n        data: passedData,\n      });\n    },\n\n    /**\n     * Returns the index of the with the newest reporting period in the array containing all reporting periods.\n     * @param reportingPeriods array containing all reporting periods.\n     * @returns index of the newest reporting period\n     */\n    calculateIndexOfNewestReportingPeriod(reportingPeriods: Array<string>): number {\n      let indexOfHighestReportingPeriod = 0;\n      let tempHighestReportingPeriodNumber = 0;\n      for (let i = 0; i < reportingPeriods.length; i++) {\n        if (Number(reportingPeriods[i]) > tempHighestReportingPeriodNumber) {\n          tempHighestReportingPeriodNumber = Number(reportingPeriods[i]);\n          indexOfHighestReportingPeriod = i;\n        }\n      }\n      return indexOfHighestReportingPeriod;\n    },\n\n    /**\n     * Checks whether a report of the previous year exists.\n     * @param reports array of all reports\n     * @param indexOfNewestReport index of newest report in the reports array\n     * @returns returns a boolean wheter a report has been found\n     */\n    doPreviousReportsExist(reports: Array<{ [p: string]: CompanyReport }>, indexOfNewestReport: number): boolean {\n      if (!reports) return false;\n      let reportsFound = false;\n      reports.forEach((report, index) => {\n        if (index != indexOfNewestReport) {\n          if (report) {\n            reportsFound = true;\n          }\n        }\n      });\n      return reportsFound;\n    },\n  },\n});\n</script>\n","<template>\n  <div v-if=\"waitingForData\" class=\"d-center-div text-center px-7 py-4\">\n    <p class=\"font-medium text-xl\">Loading {{ humanizeString(DataTypeEnum.EutaxonomyNonFinancials) }} Data...</p>\n    <em class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n  </div>\n  <div v-show=\"!waitingForData\" data-test=\"multipleReportsBanner\">\n    <ShowMultipleReportsBanner\n      data-test=\"multipleReportsBanner\"\n      v-if=\"\n        extractedReportsAndReportingPeriods &&\n        extractedReportsAndReportingPeriods[0] &&\n        extractedReportsAndReportingPeriods[1]\n      \"\n      :reporting-periods=\"extractedReportsAndReportingPeriods[1]\"\n      :reports=\"extractedReportsAndReportingPeriods[0]\"\n    />\n    <ThreeLayerTable\n      data-test=\"ThreeLayerTableTest\"\n      :data-model=\"euTaxonomyForNonFinancialsDisplayDataModel\"\n      :data-and-meta-info=\"convertedDataAndMetaInfo\"\n      @data-converted=\"handleFinishedDataConversion\"\n      :format-value-for-display=\"formatValueForDisplay\"\n      :modal-column-headers=\"euTaxonomyForNonFinancialsModalColumnHeaders\"\n      :sort-by-subcategory-key=\"false\"\n      :unfold-subcategories=\"true\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { PanelProps } from \"@/components/resources/frameworkDataSearch/PanelComponentOptions\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport {\n  type AmountWithCurrency,\n  AssuranceDataAssuranceEnum,\n  type DataAndMetaInformationEuTaxonomyDataForNonFinancials,\n  DataTypeEnum,\n  type EuTaxonomyDataForNonFinancials,\n  FiscalYearDeviation,\n} from \"@clients/backend\";\nimport type Keycloak from \"keycloak-js\";\nimport { defineComponent, inject } from \"vue\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport ThreeLayerTable from \"@/components/resources/frameworkDataSearch/ThreeLayerDataTable.vue\";\nimport { type KpiValue } from \"@/components/resources/frameworkDataSearch/KpiDataObject\";\nimport { type Field } from \"@/utils/GenericFrameworkTypes\";\nimport { euTaxonomyForNonFinancialsModalColumnHeaders } from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsModalColumnHeaders\";\nimport { euTaxonomyForNonFinancialsDisplayDataModel } from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsDisplayDataModel\";\nimport { DataAndMetaInformationEuTaxonomyForNonFinancialsViewModel } from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsViewModel\";\nimport {\n  formatAmountWithCurrency,\n  formatPercentageNumberAsString,\n  formatNumberToReadableFormat,\n} from \"@/utils/Formatter\";\nimport ShowMultipleReportsBanner from \"@/components/resources/frameworkDataSearch/ShowMultipleReportsBanner.vue\";\nimport type { CompanyReport } from \"@clients/backend\";\n\nexport default defineComponent({\n  name: \"EuTaxonomyForNonFinancialsPanel\",\n  components: { ThreeLayerTable, ShowMultipleReportsBanner },\n  data() {\n    return {\n      DataTypeEnum,\n      firstRender: true,\n      waitingForData: true,\n      waitingForReports: true,\n      convertedDataAndMetaInfo: [] as Array<DataAndMetaInformationEuTaxonomyForNonFinancialsViewModel>,\n      euTaxonomyForNonFinancialsModalColumnHeaders,\n      euTaxonomyForNonFinancialsDisplayDataModel,\n      dataSet: null as EuTaxonomyDataForNonFinancials | null | undefined,\n      dataAndMetaInfoSets: null as Array<DataAndMetaInformationEuTaxonomyDataForNonFinancials> | null | undefined,\n      extractedReportsAndReportingPeriods: null as\n        | [({ [p: string]: CompanyReport } | undefined)[], Array<string>]\n        | null\n        | undefined,\n    };\n  },\n  props: PanelProps,\n  watch: {\n    companyId() {\n      this.fetchEuTaxonomyData().catch((error) => console.log(error));\n    },\n    singleDataMetaInfoToDisplay() {\n      if (!this.firstRender) {\n        this.fetchEuTaxonomyData().catch((error) => console.log(error));\n      }\n    },\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  created() {\n    this.fetchEuTaxonomyData().catch((error) => console.log(error));\n    this.firstRender = false;\n  },\n\n  methods: {\n    humanizeString: humanizeStringOrNumber,\n    /**\n     * Fetches all accepted EU Taxonomy Non-Financial datasets for the current company and converts them to the required frontend format.\n     */\n    async fetchEuTaxonomyData() {\n      try {\n        let fetchedData: DataAndMetaInformationEuTaxonomyDataForNonFinancials[];\n        this.waitingForData = true;\n        const euTaxonomyForNonFinancialsDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getEuTaxonomyDataForNonFinancialsControllerApi();\n        if (this.singleDataMetaInfoToDisplay) {\n          const singleEuTaxonomyForNonFinancialsDataData = (\n            await euTaxonomyForNonFinancialsDataControllerApi.getCompanyAssociatedEuTaxonomyDataForNonFinancials(\n              this.singleDataMetaInfoToDisplay.dataId,\n            )\n          ).data.data;\n          fetchedData = [\n            { metaInfo: this.singleDataMetaInfoToDisplay, data: singleEuTaxonomyForNonFinancialsDataData },\n          ];\n          this.dataSet = singleEuTaxonomyForNonFinancialsDataData;\n          this.dataAndMetaInfoSets = fetchedData;\n        } else {\n          fetchedData = (\n            await euTaxonomyForNonFinancialsDataControllerApi.getAllCompanyEuTaxonomyDataForNonFinancials(\n              assertDefined(this.companyId),\n            )\n          ).data;\n          this.dataAndMetaInfoSets = fetchedData;\n        }\n        this.extractedReportsAndReportingPeriods = this.extractReportsAndReportingPeriodsFromDataAndMetaInfoSets(\n          this.dataAndMetaInfoSets,\n        );\n        this.convertedDataAndMetaInfo = fetchedData.map(\n          (dataAndMetaInfo) => new DataAndMetaInformationEuTaxonomyForNonFinancialsViewModel(dataAndMetaInfo),\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * Handles the ThreeLayerTableEvent of finishing the data conversion\n     */\n    handleFinishedDataConversion() {\n      this.waitingForData = false;\n    },\n\n    /**\n     * Checks if a KpiValue is an object with amount and currency\n     * @param kpiValue the kpiValue that shall be checked\n     * @returns a boolean based on the result of the check\n     */\n    isKpiObjectAmountWithCurrency(kpiValue: KpiValue): boolean {\n      return (\n        typeof kpiValue === \"object\" &&\n        \"amount\" in kpiValue &&\n        (typeof kpiValue.amount === \"number\" || kpiValue.amount === null) &&\n        \"currency\" in kpiValue &&\n        (typeof kpiValue.currency === \"string\" || kpiValue.currency === null)\n      );\n    },\n\n    /**\n     * Checks if a KpiValue is a string with one of the Enum values of Assurance\n     * @param kpiValue the kpiValue that shall be checked\n     * @returns a boolean based on the result of the check\n     */\n    isKpiObjectAssuranceLevel(kpiValue: KpiValue): boolean {\n      if (typeof kpiValue === \"string\") {\n        return Object.values(AssuranceDataAssuranceEnum).includes(kpiValue as AssuranceDataAssuranceEnum);\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Checks if a KpiValue is a string with one of the Enum values of FiscalYearDeviation\n     * @param kpiValue the kpiValue that shall be checked\n     * @returns a boolean based on the result of the check\n     */\n    isKpiObjectFiscalYearDeviation(kpiValue: KpiValue): boolean {\n      if (typeof kpiValue === \"string\") {\n        return Object.values(FiscalYearDeviation).includes(kpiValue as FiscalYearDeviation);\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Formats KPI values for display\n     * @param field the considered KPI field\n     * @param kpiValueToFormat the value to be formatted\n     * @returns the formatted value\n     */\n    formatValueForDisplay(field: Field, kpiValueToFormat: KpiValue): KpiValue {\n      if (kpiValueToFormat == null) {\n        return kpiValueToFormat;\n      }\n      if (this.isKpiObjectFiscalYearDeviation(kpiValueToFormat) || this.isKpiObjectAssuranceLevel(kpiValueToFormat)) {\n        return humanizeStringOrNumber(kpiValueToFormat as string);\n      }\n      if (field.component == \"PercentageFormField\") {\n        return formatPercentageNumberAsString(kpiValueToFormat as number);\n      }\n      if (this.isKpiObjectAmountWithCurrency(kpiValueToFormat)) {\n        return formatAmountWithCurrency(kpiValueToFormat as AmountWithCurrency);\n      }\n      if (typeof kpiValueToFormat === \"number\") {\n        return formatNumberToReadableFormat(kpiValueToFormat);\n      }\n      return kpiValueToFormat;\n    },\n\n    /**\n     * Extracts the reports and reporting periods for all data sets.\n     * @param dataAndMetaInfoSets array of data sets includin meta information\n     * @returns array containing an array of company reports and an array of the corresponding reporting periods\n     * as strings\n     */\n    extractReportsAndReportingPeriodsFromDataAndMetaInfoSets(\n      dataAndMetaInfoSets: Array<DataAndMetaInformationEuTaxonomyDataForNonFinancials>,\n    ): [({ [p: string]: CompanyReport } | undefined)[], Array<string>] {\n      const reportingPeriods = [];\n      let tempReportingPeriod: string | undefined;\n      for (const dataAndMetaInfoSet of dataAndMetaInfoSets) {\n        tempReportingPeriod = dataAndMetaInfoSet.metaInfo.reportingPeriod;\n        if (tempReportingPeriod) {\n          reportingPeriods.push(tempReportingPeriod);\n        }\n      }\n      const allReports = dataAndMetaInfoSets.map(\n        (dataAndMetaInfoSet) => dataAndMetaInfoSet?.data?.general?.referencedReports,\n      );\n      this.waitingForReports = false;\n      return [allReports, reportingPeriods];\n    },\n  },\n});\n</script>\n","<template>\n  <ViewFrameworkBase\n    :companyID=\"companyId\"\n    :dataType=\"dataType\"\n    :singleDataMetaInfoToDisplay=\"singleDataMetaInfoToDisplay\"\n    @updateActiveDataMetaInfoForChosenFramework=\"handleUpdateActiveDataMetaInfo\"\n    :viewInPreviewMode=\"viewInPreviewMode\"\n  >\n    <template v-slot:content>\n      <div v-if=\"isListOfDataIdsToDisplayFound\">\n        <DatasetDisplayStatusIndicator\n          :displayed-dataset=\"singleDataMetaInfoToDisplay\"\n          :received-map-of-reporting-periods-to-active-data-meta-info=\"\n            receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo\n          \"\n          :is-multiview=\"true\"\n        />\n\n        <div class=\"grid\">\n          <div class=\"col-12 text-left\">\n            <h2 class=\"mb-0\" data-test=\"frameworkDataTableTitle\">{{ humanizeString(dataType) }}</h2>\n          </div>\n          <div class=\"col-12\">\n            <EuTaxonomyForNonFinancialsPanel\n              v-if=\"dataType === DataTypeEnum.EutaxonomyNonFinancials\"\n              :companyId=\"companyId\"\n              :singleDataMetaInfoToDisplay=\"singleDataMetaInfoToDisplay\"\n            />\n            <LksgPanel\n              v-if=\"dataType === DataTypeEnum.Lksg\"\n              :companyId=\"companyId\"\n              :singleDataMetaInfoToDisplay=\"singleDataMetaInfoToDisplay\"\n            />\n            <SfdrPanel\n              v-if=\"dataType === DataTypeEnum.Sfdr\"\n              :companyId=\"companyId\"\n              :singleDataMetaInfoToDisplay=\"singleDataMetaInfoToDisplay\"\n            />\n            <P2pPanel\n              v-if=\"dataType === DataTypeEnum.P2p\"\n              :company-id=\"companyId\"\n              :single-data-meta-info-to-display=\"singleDataMetaInfoToDisplay\"\n            />\n            <SmePanel\n              v-if=\"dataType === DataTypeEnum.Sme\"\n              :company-id=\"companyId\"\n              :single-data-meta-info-to-display=\"singleDataMetaInfoToDisplay\"\n            />\n          </div>\n        </div>\n      </div>\n      <div v-if=\"isWaitingForListOfDataIdsToDisplay\" class=\"col-12 text-left\">\n        <h2>Checking if {{ humanizeString(dataType) }} data available...</h2>\n      </div>\n      <div\n        v-if=\"!isListOfDataIdsToDisplayFound && !isWaitingForListOfDataIdsToDisplay\"\n        class=\"col-12 text-left\"\n        data-test=\"noDataForThisFrameworkPresentErrorIndicator\"\n      >\n        <h2>No {{ humanizedDataDescription }} data present for this company.</h2>\n      </div>\n      <div v-if=\"isDataIdInUrlInvalid\" data-test=\"noDataForThisDataIdPresentErrorIndicator\">\n        <h2>\n          No {{ humanizedDataDescription }} data could be found for the data ID passed in the URL for this company and\n          framework.\n        </h2>\n      </div>\n      <div v-if=\"isReportingPeriodInUrlInvalid\" data-test=\"noDataForThisReportingPeriodPresentErrorIndicator\">\n        <h2>\n          No {{ humanizedDataDescription }} data could be found for the reporting period passed in the URL for this\n          company.\n        </h2>\n      </div>\n    </template>\n  </ViewFrameworkBase>\n</template>\n\n<script lang=\"ts\">\nimport ViewFrameworkBase from \"@/components/generics/ViewFrameworkBase.vue\";\nimport { defineComponent, inject } from \"vue\";\nimport { type DataMetaInformation, DataTypeEnum } from \"@clients/backend\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport LksgPanel from \"@/components/resources/frameworkDataSearch/lksg/LksgPanel.vue\";\nimport SfdrPanel from \"@/components/resources/frameworkDataSearch/sfdr/SfdrPanel.vue\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { type AxiosError } from \"axios\";\nimport type Keycloak from \"keycloak-js\";\nimport DatasetDisplayStatusIndicator from \"@/components/resources/frameworkDataSearch/DatasetDisplayStatusIndicator.vue\";\nimport P2pPanel from \"@/components/resources/frameworkDataSearch/p2p/P2pPanel.vue\";\nimport SmePanel from \"@/components/resources/frameworkDataSearch/sme/SmePanel.vue\";\nimport EuTaxonomyForNonFinancialsPanel from \"@/components/resources/frameworkDataSearch/euTaxonomy/EuTaxonomyForNonFinancialsPanel.vue\";\n\nexport default defineComponent({\n  name: \"ViewMultipleDatasetsDisplayBase\",\n  components: {\n    EuTaxonomyForNonFinancialsPanel,\n    P2pPanel,\n    DatasetDisplayStatusIndicator,\n    SfdrPanel,\n    LksgPanel,\n    ViewFrameworkBase,\n    SmePanel,\n  },\n  props: {\n    companyId: {\n      type: String,\n    },\n    dataType: {\n      type: String,\n    },\n    dataId: {\n      type: String,\n    },\n    reportingPeriod: {\n      type: String,\n    },\n    viewInPreviewMode: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      isWaitingForListOfDataIdsToDisplay: true,\n      isListOfDataIdsToDisplayFound: false,\n      receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo: {} as Map<string, DataMetaInformation>,\n      singleDataMetaInfoToDisplay: null as null | DataMetaInformation,\n      humanizeString: humanizeStringOrNumber,\n      isDataIdInUrlInvalid: false,\n      isReportingPeriodInUrlInvalid: false,\n      humanizedDataDescription: humanizeStringOrNumber(this.dataType),\n      DataTypeEnum,\n    };\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  watch: {\n    dataId(newDataId: string) {\n      if (newDataId) {\n        this.setFlagsToDataNotFoundState();\n        void this.getMetaDataForDataId(newDataId);\n      } else if (!this.reportingPeriod) {\n        this.setSingleDataMetaInfoToDisplay(null);\n      }\n    },\n    reportingPeriod(newReportingPeriod: string) {\n      if (newReportingPeriod) {\n        const dataMetaInfoForNewlyChosenReportingPeriod =\n          this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo.get(newReportingPeriod);\n        if (dataMetaInfoForNewlyChosenReportingPeriod) {\n          this.getMetaDataForDataId(dataMetaInfoForNewlyChosenReportingPeriod.dataId).catch((err) =>\n            console.log(\n              \"Retrieving meta data information for data ID \" +\n                dataMetaInfoForNewlyChosenReportingPeriod.dataId +\n                \" failed with error \" +\n                String(err),\n            ),\n          );\n        } else {\n          this.isReportingPeriodInUrlInvalid = true;\n        }\n      } else if (!this.dataId) {\n        this.setSingleDataMetaInfoToDisplay(null);\n      }\n    },\n  },\n\n  methods: {\n    /**\n     * Method to set flags that indicate found data\n     */\n    setFlagsToDataFoundState() {\n      this.isListOfDataIdsToDisplayFound = true;\n      this.isDataIdInUrlInvalid = false;\n      this.isReportingPeriodInUrlInvalid = false;\n    },\n\n    /**\n     * Method to set flags that indicate that fetching data is in progress\n     */\n    setFlagsToDataNotFoundState() {\n      this.isListOfDataIdsToDisplayFound = false;\n      this.isDataIdInUrlInvalid = false;\n      this.isReportingPeriodInUrlInvalid = false;\n    },\n\n    /**\n     * Method to handle an invalid data ID that was passed in URL\n     */\n    handleInvalidDataIdPassedInUrl() {\n      this.isDataIdInUrlInvalid = true;\n      this.isListOfDataIdsToDisplayFound = false;\n    },\n\n    /**\n     * Method to handle an invalid reporting period that was passed in URL\n     */\n    handleInvalidReportingPeriodPassedInUrl() {\n      this.isReportingPeriodInUrlInvalid = true;\n      this.isListOfDataIdsToDisplayFound = false;\n    },\n\n    /**\n     * Method to set a data meta information object as the only one to display\n     * @param dataMetaInfoToDisplay the data meta information to display\n     */\n    setSingleDataMetaInfoToDisplay(dataMetaInfoToDisplay: DataMetaInformation | null) {\n      this.setFlagsToDataFoundState();\n      this.singleDataMetaInfoToDisplay = dataMetaInfoToDisplay;\n    },\n\n    /**\n     * Method to asynchronously retrieve the meta data associated to a given data ID\n     * @param dataId the data id to retrieve meta info for\n     */\n    async getMetaDataForDataId(dataId: string) {\n      try {\n        const metaDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getMetaDataControllerApi();\n        const apiResponse = await metaDataControllerApi.getDataMetaInfo(dataId);\n        const dataMetaInfoForDataSetWithDataIdFromUrl = apiResponse.data;\n        if (\n          dataMetaInfoForDataSetWithDataIdFromUrl.companyId != this.companyId ||\n          dataMetaInfoForDataSetWithDataIdFromUrl.dataType != this.dataType\n        ) {\n          this.handleInvalidDataIdPassedInUrl();\n        } else {\n          this.setSingleDataMetaInfoToDisplay(dataMetaInfoForDataSetWithDataIdFromUrl);\n        }\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status == 404) {\n          this.handleInvalidDataIdPassedInUrl();\n        }\n      }\n    },\n\n    /**\n     * Method to asynchronously create a list of all data meta information objects for the displayed data sets\n     */\n    async createListOfDataMetaInfoForDisplayedDatasets() {\n      if (this.dataId) {\n        await this.getMetaDataForDataId(this.dataId);\n      } else if (!this.dataId && this.reportingPeriod) {\n        const activeDataMetaInfoWithReportingPeriodFromUrl =\n          this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo.get(this.reportingPeriod);\n        if (activeDataMetaInfoWithReportingPeriodFromUrl) {\n          this.setSingleDataMetaInfoToDisplay(activeDataMetaInfoWithReportingPeriodFromUrl);\n        } else {\n          this.handleInvalidReportingPeriodPassedInUrl();\n        }\n      } else {\n        this.setFlagsToDataFoundState();\n      }\n    },\n\n    /**\n     * Stores the received map of distinct reporting periods to active meta info from the\n     * \"updateActiveDataMetaInfoForChosenFramework\" event, then triggers a controller-method which picks the data\n     * meta infos for the datasets to display, and finally terminates the loading-state of the component.\n     * @param receivedMapOfReportingPeriodsToActiveDataMetaInfo 1-to-1 map between reporting periods and corresponding\n     * active data meta information objects\n     */\n    handleUpdateActiveDataMetaInfo(\n      receivedMapOfReportingPeriodsToActiveDataMetaInfo: Map<string, DataMetaInformation>,\n    ) {\n      this.receivedMapOfDistinctReportingPeriodsToActiveDataMetaInfo =\n        receivedMapOfReportingPeriodsToActiveDataMetaInfo;\n      this.createListOfDataMetaInfoForDisplayedDatasets().catch((err) =>\n        console.log(\"Retrieving data meta info failed with error \" + String(err)),\n      );\n      this.isWaitingForListOfDataIdsToDisplay = false;\n    },\n  },\n});\n</script>\n","<template>\n  <AuthenticationWrapper :disable-authentication-wrapper=\"viewInPreviewMode\">\n    <ViewSingleDatasetDisplayBase\n      v-if=\"singleViewFrameworks.includes(dataType)\"\n      :dataType=\"dataType\"\n      :companyId=\"companyId\"\n      :dataId=\"dataId\"\n      :reportingPeriod=\"reportingPeriod\"\n      :viewInPreviewMode=\"viewInPreviewMode\"\n    />\n    <ViewMultipleDatasetsDisplayBase\n      v-if=\"multiViewFrameworks.includes(dataType)\"\n      :dataType=\"dataType\"\n      :companyId=\"companyId\"\n      :dataId=\"dataId\"\n      :reportingPeriod=\"reportingPeriod\"\n      :viewInPreviewMode=\"viewInPreviewMode\"\n    />\n  </AuthenticationWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport { DataTypeEnum } from \"@clients/backend\";\nimport ViewSingleDatasetDisplayBase from \"@/components/generics/ViewSingleDatasetDisplayBase.vue\";\nimport ViewMultipleDatasetsDisplayBase from \"@/components/generics/ViewMultipleDatasetsDisplayBase.vue\";\nimport AuthenticationWrapper from \"@/components/wrapper/AuthenticationWrapper.vue\";\n\nexport default defineComponent({\n  name: \"ViewFrameworkData\",\n  components: { AuthenticationWrapper, ViewSingleDatasetDisplayBase, ViewMultipleDatasetsDisplayBase },\n  props: {\n    companyId: {\n      type: String,\n    },\n    dataType: {\n      type: String,\n    },\n    dataId: {\n      type: String,\n    },\n    reportingPeriod: {\n      type: String,\n    },\n    viewInPreviewMode: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    if (!this.dataType) return this.gotoNotFound();\n    if (!this.singleViewFrameworks.includes(this.dataType) && !this.multiViewFrameworks.includes(this.dataType))\n      return this.gotoNotFound();\n  },\n  methods: {\n    /**\n     * Navigate to the not found page.\n     */\n    gotoNotFound() {\n      void this.$router.push(\"/nocontent\");\n    },\n  },\n  data() {\n    return {\n      singleViewFrameworks: [DataTypeEnum.EutaxonomyFinancials] as string[],\n      multiViewFrameworks: [\n        DataTypeEnum.EutaxonomyNonFinancials,\n        DataTypeEnum.Lksg,\n        DataTypeEnum.Sfdr,\n        DataTypeEnum.P2p,\n        DataTypeEnum.Sme,\n      ] as string[],\n    };\n  },\n});\n</script>\n"],"names":["FiscalYearDeviation","YesNo","sortReportingPeriodsToDisplayAsColumns","listOfDataDateToDisplayAsColumns","dataSetA","dataSetB","compareReportingPeriods","firstReportingPeriod","secondReportingPeriod","buttonRowHeaderId","mountRowHeaderClickEventListeners","dataTableIdentifier","expandedRowsOnClick","newExpandedRowsCallback","handlerMap","expandedRowGroups","rowHeaders","rowButtons","rowHeader","button","_a","el","clickHandler","evt","id","target","unmountRowHeaderClickEventListeners","buttonAttributeName","_sfc_main$n","defineComponent","sortedReportingPeriodMetaInfoPairs","firstEl","secondEl","key","value","_hoisted_2","_createElementVNode","_hoisted_3","_resolveComponent","_openBlock","_createElementBlock","_hoisted_1","_Fragment","_renderList","_ctx","index","_createBlock","_component_router_link","_sfc_main$m","TheContent","TheHeader","BackButton","MarginWrapper","FrameworkDataSearchBar","Dropdown","CompanyInformation","TheFooter","PrimeButton","OverlayPanel","SelectReportingPeriodDialog","inject","ref","humanizeStringOrNumber","ARRAY_OF_FRAMEWORKS_WITH_UPLOAD_FORM","checkIfUserHasRole","KEYCLOAK_ROLE_UPLOADER","hasUserUploaderRights","error","event","panel","assertDefined","companyID","dataType","dataId","dropDownChangeEvent","searchTerm","listOfDataMetaInfo","setOfAvailableFrameworksForCompany","dataMetaInfo","listOfDistinctAvailableAndViewableFrameworksForCompany","ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE","a","b","listOfActiveDataMetaInfo","listOfActiveDataMetaInfoPerFrameworkAndReportingPeriod","ApiClientProvider","newDataType","_hoisted_6","_hoisted_8","_hoisted_11","_createVNode","_component_TheHeader","_component_TheContent","_withCtx","_component_MarginWrapper","_component_BackButton","_component_FrameworkDataSearchBar","_hoisted_4","_hoisted_5","_component_Dropdown","_cache","$event","_renderSlot","_component_PrimeButton","_hoisted_7","_createCommentVNode","_hoisted_9","_component_OverlayPanel","convertCurrencyNumbersToNotationWithLetters","numberToConvert","maxNumberOfDigitsAfterDecimalPoint","lookup","regex","item","part","_sfc_main$l","Card","PrimeProgressBar","_hoisted_10","_hoisted_13","_component_Card","_toDisplayString","_component_PrimeProgressBar","_sfc_main$k","getComponentOptionsForDatalandInfoCard","_directive_tooltip","_resolveDirective","_withDirectives","_sfc_main$j","reference","docUrl","getDocumentsFromStorageResponse","newBlob","_sfc_render","$props","$setup","$data","$options","_normalizeClass","_sfc_main$i","DocumentLink","_withScopeId","report","name","_component_DocumentLink","_sfc_main$h","TaxoCard","TaxoInfoCard","ShowReportsBanner","companyAssociatedData","type","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_23","_hoisted_25","_component_ShowReportsBanner","_component_TaxoInfoCard","_b","fsType","_hoisted_12","_component_TaxoCard","_hoisted_17","_hoisted_22","_hoisted_24","_hoisted_26","_sfc_main$g","QaStatus","_c","_d","_sfc_main$f","DatasetDisplayStatusIndicator","ViewFrameworkBase","EuTaxonomyPanelFinancials","DataTypeEnum","newDataId","newReportingPeriod","dataMetaInfoForDisplay","dataMetaInfoForNewlyChosenReportingPeriod","reportingPeriod","err","inputMap","reportingPeriodA","reportingPeriodB","receivedMapOfReportingPeriodsToActiveDataMetaInfo","dataMetaInfoForDataSetWithDataIdFromUrl","latestDataMetaInformation","firstActiveDataMetaInfo","listOfNumbersInReportingPeriods","reportingPeriodAsString","parsedReportingPeriod","latestReportingPeriod","activeDataMetaInfoForLatestReportingPeriod","_component_ViewFrameworkBase","_component_DatasetDisplayStatusIndicator","_component_EuTaxonomyPanelFinancials","PanelProps","_sfc_main$e","DataTable","Column","dialogRefData","o","presentKeys","keyList","rowContent","_component_DataTable","keyOfColumn","_component_Column","data","script$1","BaseComponent","script","activityApiNameToHumanizedName","ActivityName","formatPercentageNumberAsString","percentageNumber","precision","roundNumber","formatAmountWithCurrency","amountWithCurrency","formatNumberToReadableFormat","euTaxonomyForNonFinancialsModalColumnHeaders","euTaxonomyObjectives","_sfc_main$d","ColumnGroup","Row","activity","col","createRevenueGroupData","createActivityGroupData","createMinimumSafeguardsGroupData","groupName","environmentalObjectivesLength","activityName","fieldName","prefix","suffix","extendedKey","environmentalObjectiveKey","columnDefinition","additionalClasses","fields","valueFormatter","field","_component_ColumnGroup","_component_Row","group","_createTextVNode","code","_sfc_main$c","_sfc_main$b","Tooltip","kpiDataObject","dataPoint","label","lowerCaseLabel","listOfValues","modalTitle","kpiKey","kpiFormFieldComponent","kpiDataComponent","AlignedActivitiesDataTable","NonAlignedActivitiesDataTable","DetailsCompanyDataTable","dialogData","slotProps","reportingPeriodWithDataId","lksgModalColumnHeaders","_sfc_main$a","TwoLayerDataTable","lksgDataControllerApi","singleLksgData","kpiValue","subcategory","dataIdOfLksgDataset","kpiField","kpiData","currentLksgDataset","reportingPeriodOfLksgDataset","lksgData","categoryKey","categoryObject","subCategoryKey","subCategoryObject","lksgDataModel","category","subCategory","countryCodeShort","getCountryNameFromCountryCode","numberOfSuppliersPerCountryCode","readableListOfSuppliersAndCountries","countryCode","numberOfSuppliers","countryName","inputObject","inputEntry","procurementCategoryType","lksgProcurementCategory","definitionsOfProductTypeOrService","convertNace","convertToMillions","returnValue","filteredOption","option","_component_TwoLayerDataTable","_sfc_main$9","listOfProductionSites","sfdrKpisNameMappings","sfdrKpisInfoMappings","sfdrSubAreasNameMappings","_sfc_main$8","SfdrDataTable","sfdrDataControllerApi","singleSfdrData","subAreaKey","dataIdOfSfdrDataset","indexOfExistingItem","singleKpiDataObject","oneSfdrDataset","reportingPeriodOfSfdrDataset","sfdrData","columnIdentifierDataId","dataEntry","sfdrDataPropName","sfdrDataPropValue","propValue","mappedOfColumnIdentifierObjects","columnIdentifier","_component_SfdrDataTable","_sfc_main$7","uniqueIdentiferOfKpi","currentDataset","listOfDataObjects","frameworkCategoryData","categoryDataObject","listOfKpiDataObjects","currentViewModelDataset","subCategoryDataObject","categoryName","dataAndMetaInfo","arrayOfKpiDataObjectsMapItem","getViewModelWithIdentityApiModel","input","formatValueForDisplay","sector","_sfc_main$6","ThreeLayerTable","p2pDataModel","p2pDataControllerApi","singleP2pData","_component_ThreeLayerTable","it","smeDataModel","dataModel","smeModalColumnHeaders","_sfc_main$5","smeDataControllerApi","singleSmeData","fieldsToConvertToMillions","optionFields","productionSite","product","addressObject","isProperString","getEntryValue","searchResult","entry","addressString","streetAndHouseNumber","postalCode","state","euTaxonomyForNonFinancialsDisplayDataModel","EuTaxonomyForNonFinancialsViewModel","apiModel","__publicField","_e","_f","_h","_g","_j","_i","_k","_l","_n","_m","viewModel","DataAndMetaInformationEuTaxonomyForNonFinancialsViewModel","dataAndMetaInfoApiModel","_sfc_main$4","referencedReportObject","indexOuter","nameInner","indexInner","_sfc_main$3","reportingPeriods","passedData","PreviousReportsModal","indexOfHighestReportingPeriod","tempHighestReportingPeriodNumber","i","reports","indexOfNewestReport","reportsFound","_sfc_main$2","ShowMultipleReportsBanner","fetchedData","euTaxonomyForNonFinancialsDataControllerApi","singleEuTaxonomyForNonFinancialsDataData","AssuranceDataAssuranceEnum","kpiValueToFormat","dataAndMetaInfoSets","tempReportingPeriod","dataAndMetaInfoSet","allReports","_component_ShowMultipleReportsBanner","_sfc_main$1","EuTaxonomyForNonFinancialsPanel","P2pPanel","SfdrPanel","LksgPanel","SmePanel","dataMetaInfoToDisplay","activeDataMetaInfoWithReportingPeriodFromUrl","_component_EuTaxonomyForNonFinancialsPanel","_component_LksgPanel","_component_SfdrPanel","_component_P2pPanel","_component_SmePanel","_sfc_main","AuthenticationWrapper","ViewSingleDatasetDisplayBase","ViewMultipleDatasetsDisplayBase","_component_AuthenticationWrapper","_component_ViewSingleDatasetDisplayBase","_component_ViewMultipleDatasetsDisplayBase"],"mappings":"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,EAAA,6DCFjBwT,GAAe,CAC1B,CACE,KAAM,UACN,MAAO,UACP,MAAO,SACP,OAAQ,IAAe,GACvB,cAAe,CACb,CACE,KAAM,mBACN,MAAO,oBACP,OAAQ,CACN,CACE,KAAM,SACN,MAAO,SACP,YACE,yGACF,KAAM,GACN,UAAW,oBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,GACvB,WAAY,mBACd,EACA,CACE,KAAM,wBACN,MAAO,0BACP,YAAa,8FACb,KAAM,GACN,UAAW,mBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,GACvB,WAAY,UACd,EACA,CACE,KAAM,oBACN,MAAO,sBACP,YAAa,+FACb,KAAM,GACN,UAAW,kBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,GACvB,WAAY,UACd,EACA,CACE,KAAM,kBACN,MAAO,oBACP,YAAa,oFACb,KAAM,GACN,UAAW,gBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,GACvB,WAAY,UACd,CACF,CACF,EACA,CACE,KAAM,oBACN,MAAO,qBACP,OAAQ,CACN,CACE,KAAM,eACN,MAAO,iBACP,YAAa,sEACb,KAAM,GACN,UAAW,kBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,qBACN,MAAO,wBACP,YAAa,oFACb,KAAM,GACN,UAAW,kBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,qBACN,MAAO,wBACP,YACE,iGACF,KAAM,GACN,UAAW,kBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,CACF,CACF,EACA,CACE,KAAM,aACN,MAAO,aACP,MAAO,SACP,OAAQ,IAAe,GACvB,cAAe,CACb,CACE,KAAM,QACN,MAAO,QACP,OAAQ,CACN,CACE,KAAM,wBACN,MAAO,2BACP,YACE,4LACF,KAAM,GACN,UAAW,8BACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,WACN,MAAO,WACP,OAAQ,CACN,CACE,KAAM,iBACN,MAAO,mBACP,YACE,qMACF,KAAM,GACN,UAAW,uBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,CACF,CACF,EACA,CACE,KAAM,QACN,MAAO,QACP,MAAO,SACP,OAAQ,IAAe,GACvB,cAAe,CACb,CACE,KAAM,cACN,MAAO,cACP,OAAQ,CACN,CACE,KAAM,qDACN,MAAO,2DACP,YACE,iJACF,KAAM,GACN,UAAW,wBACX,gBAAiB,GACjB,QAAS,CACP,CACE,MAAO,OACP,MAAO,WACT,EACA,CACE,MAAO,OACP,MAAO,cACT,EACA,CACE,MAAO,QACP,MAAO,eACT,EACA,CACE,MAAO,SACP,MAAO,gBACT,EACA,CACE,MAAO,SACP,MAAO,gBACT,EACA,CACE,MAAO,SACP,MAAO,gBACT,EACA,CACE,MAAO,QACP,MAAO,eACT,CACF,EACA,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,cACN,MAAO,cACP,OAAQ,CACN,CACE,KAAM,wBACN,MAAO,2BACP,YAAa,sFACb,KAAM,GACN,UAAW,kBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,4BACN,MAAO,+BACP,YACE,qIACF,KAAM,GACN,UAAW,iBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,GACvB,yBAA0B,EAC5B,EACA,CACE,KAAM,sCACN,MAAO,2CACP,YACE,2HACF,KAAM,GACN,UAAW,kBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,2CACN,MAAO,kDACP,YACE,gIACF,KAAM,GACN,UAAW,wBACX,gBAAiB,GACjB,QAAS,CACP,CACE,MAAO,MACP,MAAO,KACT,EACA,CACE,MAAO,MACP,MAAO,KACT,EACA,CACE,MAAO,WACP,MAAO,UACT,EACA,CACE,MAAO,mBACP,MAAO,kBACT,CACF,EACA,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,wDACN,MAAO,+DACP,YACE,uKACF,KAAM,GACN,U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,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,gBACN,MAAO,mBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,mBACP,YAAa,GACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,oBACN,MAAO,uBACP,OAAQ,CACN,CACE,KAAM,6BACN,MAAO,uBACP,YAAa,GACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,CACF,CACF,EACA,CACE,KAAM,QACN,MAAO,QACP,MAAO,SACP,OAAQ,IAAe,GACvB,cAAe,CACb,CACE,KAAM,cACN,MAAO,cACP,OAAQ,CACN,CACE,KAAM,UACN,MAAO,UACP,YAAa,mCACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,QACN,MAAO,QACP,YAAa,oBACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,aACN,MAAO,cACP,YAAa,GACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,UACN,MAAO,UACP,YAAa,GACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,OACN,MAAO,WACP,YAAa,GACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,gBACN,MAAO,iBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,aACP,YAAa,4CACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,gBACN,MAAO,iBACP,YAAa,4CACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,eACN,MAAO,gBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,aACP,YAAa,4CACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,gBACN,MAAO,iBACP,YAAa,4CACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,4DACN,MAAO,wDACP,OAAQ,IAAe,GACvB,YAAa,GACb,UAAW,qBACb,EACA,CACE,KAAM,0DACN,MAAO,sDACP,OAAQ,IAAe,GACvB,YAAa,GACb,UAAW,qBACb,EACA,CACE,KAAM,yFACN,MAAO,2FACP,OAAQ,IAAe,GACvB,YAAa,GACb,UAAW,qBACb,EACA,CACE,KAAM,iEACN,MAAO,+DACP,OAAQ,IAAe,GACvB,YAAa,GACb,UAAW,qBACb,EACA,CACE,KAAM,kEACN,MAAO,+DACP,OAAQ,IAAe,GACvB,YAAa,GACb,UAAW,qBACb,EACA,CACE,KAAM,wFACN,MAAO,wFACP,OAAQ,IAAe,GACvB,YAAa,GACb,UAAW,qBACb,EACA,CACE,KAAM,oBACN,MAAO,6BACP,YAAa,GACb,KAAM,GACN,UAAW,6BACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,kBACN,MAAO,oBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,aACP,YAAa,4CACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,gBACN,MAAO,iBACP,YAAa,4CACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,uBACN,MAAO,iCACP,YAAa,GACb,KAAM,GACN,UAAW,gCACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,mBACN,MAAO,qBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,aACP,YAAa,4CACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,gBACN,MAAO,iBACP,YAAa,4CACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,gBACN,MAAO,iBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,iBACP,YAAa,GACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,oBACN,MAAO,qBACP,OAAQ,CACN,CACE,KAAM,6BACN,MAAO,qBACP,YAAa,GACb,KAAM,GACN,UAAW,sBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,CACF,CACF,EACA,CACE,KAAM,OACN,MAAO,OACP,MAAO,OACP,OAAQ,IAAe,GACvB,cAAe,CACb,CACE,KAAM,cACN,MAAO,aACP,OAAQ,CACN,CACE,KAAM,UACN,MAAO,UACP,YAAa,mCACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,QACN,MAAO,QACP,YAAa,oBACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,aACN,MAAO,cACP,YAAa,GACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,UACN,MAAO,UACP,YAAa,GACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,EACA,CACE,KAAM,OACN,MAAO,WACP,YAAa,GACb,KAAM,GACN,UAAW,qBACX,gBAAiB,GACjB,SAAU,GACV,OAAQ,IAAe,EACzB,CACF,CACF,EACA,CACE,KAAM,gBACN,MAAO,gBACP,OAAQ,CACN,CACE,KAAM,yBACN,MAAO,aACP,YAAa,4CACb,KAAM,GACN,UAAW,sBACX,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","x_google_ignoreList":[15,16]}