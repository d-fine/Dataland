{"version":3,"file":"ChooseCompanyForFrameworkDataUpload-a716ed6e.js","sources":["../../src/components/resources/frameworkDataSearch/ReferenceDataModelTranslations.ts","../../src/components/forms/CreateCompany.vue","../../src/components/resources/companiesOnlySearch/CompaniesOnlySearchBar.vue","../../src/components/pages/ChooseCompanyForFrameworkDataUpload.vue"],"sourcesContent":["export const companyDataNames = {\n  companyName: \"Company Name\",\n  companyAlternativeNames: \"Company Alternative Names\",\n  companyLegalForm: \"Company Legal Form\",\n  headquarters: \"Headquarters\",\n  headquartersPostalCode: \"Headquarters Postal Code\",\n  countryCode: \"Country Code\",\n  sector: \"Sector\",\n  isin: \"ISIN\",\n  permId: \"PermID\",\n  lei: \"LEI\",\n  duns: \"D-U-N-S Number\",\n  vatNumber: \"VAT Number\",\n  ticker: \"Ticker\",\n  companyRegistrationNumber: \"Company Registration Number\",\n  website: \"Website\",\n};\n\nexport const companyDataExplanations = {\n  companyName: \"Name of the company\",\n  companyAlternativeNames: \"Short names or aliases of the company\",\n  companyLegalForm:\n    \"Legal Form means, for example, „Public Limited Company (PLC)‟, Private Limited Company (Ltd)‟, „Limited Liability Partnership (LLP)‟, „Partnership without Limited Liability‟ or „Sole Trader‟, or the equivalent in the jurisdiction in which company based\",\n  headquarters: \"City where the headquarters of the company are located\",\n  headquartersPostalCode: \"Postal code of the headquarters\",\n  countryCode: \"Country where the headquarters of the company are located\",\n  sector: \"GICS classification, “Sector” level\",\n  isin: \"A 12-digit alphanumeric code that uniquely identifies a specific security\",\n  permId: \"An open standard from Refinitiv\",\n  lei: \"The Legal Entity Identifier (LEI) is a 20-character alphanumeric string\",\n  duns: \"A unique nine-digit identifier for businesses\",\n  ticker: \"An abbreviation used to identify financial instruments on stock exchanges\",\n  vatNumber: \"Every VAT identification number begins with a country-code followed by a block of digits or characters\",\n  companyRegistrationNumber: \"Identification number assigned to a company in the commercial register\",\n  website: \"Company website\",\n};\n\nexport const gicsSectors = [\n  \"Energy\",\n  \"Materials\",\n  \"Industrials\",\n  \"Consumer Discretionary\",\n  \"Consumer Staples\",\n  \"Health Care\",\n  \"Financial Services\",\n  \"Information Technology\",\n  \"Communication Services\",\n  \"Utilities\",\n  \"Real Estate\",\n];\n","<template>\n  <Card class=\"bg-white\">\n    <template #title>Create a Company</template>\n    <template #content>\n      <div class=\"uploadFormWrapper\">\n        <FormKit\n          :actions=\"false\"\n          type=\"form\"\n          id=\"createCompanyForm\"\n          @submit=\"postCompanyInformation\"\n          @submit-invalid=\"checkCustomInputs\"\n        >\n          <h4>Name & location</h4>\n          <UploadFormHeader\n            :label=\"companyDataNames.companyName\"\n            :description=\"companyDataExplanations.companyName\"\n            :is-required=\"true\"\n          />\n          <FormKit\n            name=\"companyName\"\n            v-model=\"companyName\"\n            type=\"text\"\n            :placeholder=\"companyDataNames.companyName\"\n            validation=\"required\"\n            validation-label=\"Company Name\"\n          />\n          <div class=\"flex align-items-center form-field-label\">\n            <UploadFormHeader\n              :label=\"companyDataNames.companyAlternativeNames\"\n              :description=\"companyDataExplanations.companyAlternativeNames\"\n            />\n            <PrimeButton\n              :disabled=\"this.enteredCompanyAlternativeName === ''\"\n              @click=\"addCompanyAlternativeName\"\n              name=\"addAlternativeName\"\n              label=\"Add\"\n              class=\"p-button-text\"\n              icon=\"pi pi-plus\"\n            ></PrimeButton>\n          </div>\n          <FormKit\n            name=\"alternativeName\"\n            v-model=\"enteredCompanyAlternativeName\"\n            type=\"text\"\n            placeholder=\"Company alternative name\"\n          />\n\n          <template v-for=\"index in companyAlternativeNames.length\" :key=\"index\">\n            <span class=\"form-list-item\">\n              {{ companyAlternativeNames[index - 1] }}\n              <em @click=\"removeAlternativeName(index)\" class=\"material-icons\">close</em>\n            </span>\n          </template>\n\n          <div class=\"next-to-each-other\">\n            <div>\n              <UploadFormHeader\n                :label=\"companyDataNames.headquarters\"\n                :description=\"companyDataExplanations.headquarters\"\n                :is-required=\"true\"\n              />\n              <FormKit\n                name=\"headquarters\"\n                v-model=\"headquarters\"\n                type=\"text\"\n                placeholder=\"City\"\n                validation=\"required\"\n                validation-label=\"Headquarters\"\n              />\n            </div>\n            <div>\n              <UploadFormHeader\n                :label=\"companyDataNames.countryCode\"\n                :description=\"companyDataExplanations.countryCode\"\n                :is-required=\"true\"\n              />\n              <FormKit\n                name=\"countryCode\"\n                v-model=\"countryCode\"\n                type=\"select\"\n                placeholder=\"Select\"\n                validation=\"required\"\n                validation-label=\"Country Code\"\n                :options=\"allCountryCodes\"\n              />\n            </div>\n          </div>\n\n          <UploadFormHeader\n            :label=\"companyDataNames.headquartersPostalCode\"\n            :description=\"companyDataExplanations.headquartersPostalCode\"\n          />\n          <FormKit\n            name=\"headquartersPostalCode\"\n            v-model=\"headquartersPostalCode\"\n            type=\"text\"\n            :placeholder=\"companyDataNames.headquartersPostalCode\"\n          />\n\n          <UploadFormHeader\n            :label=\"companyDataNames.companyLegalForm\"\n            :description=\"companyDataExplanations.companyLegalForm\"\n          />\n          <FormKit\n            name=\"companyLegalForm\"\n            v-model=\"companyLegalForm\"\n            type=\"text\"\n            :placeholder=\"companyDataNames.companyLegalForm\"\n          />\n\n          <UploadFormHeader :label=\"companyDataNames.website\" :description=\"companyDataExplanations.website\" />\n          <FormKit name=\"website\" v-model=\"website\" type=\"text\" :placeholder=\"companyDataNames.website\" />\n\n          <h4>Identifier</h4>\n\n          <FormKit\n            type=\"group\"\n            :config=\"{\n              validationMessages: { identifierDoesNotExistValidator: 'There already exists a company with this ID' },\n              validationRules: { identifierDoesNotExistValidator },\n              validationVisibility: 'live',\n            }\"\n          >\n            <UploadFormHeader :label=\"companyDataNames.lei\" :description=\"companyDataExplanations.lei\" />\n            <FormKit\n              name=\"lei\"\n              v-model=\"lei\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.lei\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.Lei}`\"\n            />\n\n            <UploadFormHeader :label=\"companyDataNames.isin\" :description=\"companyDataExplanations.isin\" />\n            <FormKit\n              name=\"isin\"\n              v-model=\"isin\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.isin\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.Isin}`\"\n            />\n\n            <UploadFormHeader :label=\"companyDataNames.ticker\" :description=\"companyDataExplanations.ticker\" />\n            <FormKit\n              name=\"ticker\"\n              v-model=\"ticker\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.ticker\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.Ticker}`\"\n            />\n\n            <UploadFormHeader :label=\"companyDataNames.permId\" :description=\"companyDataExplanations.permId\" />\n            <FormKit\n              name=\"permId\"\n              v-model=\"permId\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.permId\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.PermId}`\"\n            />\n\n            <UploadFormHeader :label=\"companyDataNames.duns\" :description=\"companyDataExplanations.duns\" />\n            <FormKit\n              name=\"duns\"\n              v-model=\"duns\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.duns\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.Duns}`\"\n            />\n\n            <UploadFormHeader\n              :label=\"companyDataNames.companyRegistrationNumber\"\n              :description=\"companyDataExplanations.companyRegistrationNumber\"\n            />\n            <FormKit\n              name=\"companyRegistrationNumber\"\n              v-model=\"companyRegistrationNumber\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.companyRegistrationNumber\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.CompanyRegistrationNumber}`\"\n            />\n\n            <UploadFormHeader :label=\"companyDataNames.vatNumber\" :description=\"companyDataExplanations.vatNumber\" />\n            <FormKit\n              name=\"vatNumber\"\n              v-model=\"vatNumber\"\n              type=\"text\"\n              :placeholder=\"companyDataNames.vatNumber\"\n              :validation=\"`identifierDoesNotExistValidator:${IdentifierType.VatNumber}`\"\n            />\n          </FormKit>\n\n          <h4>GICS classification</h4>\n\n          <UploadFormHeader :label=\"companyDataNames.sector\" :description=\"companyDataExplanations.sector\" />\n          <FormKit name=\"sector\" v-model=\"sector\" type=\"select\" placeholder=\"Please choose\" :options=\"gicsSectors\" />\n\n          <PrimeButton type=\"submit\" label=\"ADD COMPANY\" name=\"addCompany\" />\n        </FormKit>\n        <template v-if=\"postCompanyProcessed\">\n          <SuccessMessage v-if=\"uploadSucceded\" :message=\"message\" :messageId=\"messageCounter\" />\n          <FailMessage v-else :message=\"message\" :messageId=\"messageCounter\" />\n        </template>\n      </div>\n    </template>\n  </Card>\n</template>\n\n<script lang=\"ts\">\nimport { FormKit } from \"@formkit/vue\";\nimport Card from \"primevue/card\";\nimport { defineComponent, inject } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { type CompanyInformation, IdentifierType } from \"@clients/backend\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport PrimeButton from \"primevue/button\";\nimport { getAllCountryCodes } from \"@/utils/CountryCodeConverter\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport SuccessMessage from \"@/components/messages/SuccessMessage.vue\";\nimport FailMessage from \"@/components/messages/FailMessage.vue\";\nimport { checkCustomInputs } from \"@/utils/ValidationsUtils\";\nimport Tooltip from \"primevue/tooltip\";\nimport {\n  companyDataNames,\n  companyDataExplanations,\n  gicsSectors,\n} from \"@/components/resources/frameworkDataSearch/ReferenceDataModelTranslations\";\nimport UploadFormHeader from \"@/components/forms/parts/elements/basic/UploadFormHeader.vue\";\nimport { AxiosError } from \"axios\";\nimport { type FormKitNode } from \"@formkit/core\";\n\nexport default defineComponent({\n  name: \"CreateCompany\",\n  components: {\n    UploadFormHeader,\n    Card,\n    FormKit,\n    PrimeButton,\n    SuccessMessage,\n    FailMessage,\n  },\n  directives: {\n    tooltip: Tooltip,\n  },\n  emits: [\"companyCreated\"],\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n  data: () => ({\n    companyName: \"\",\n    companyAlternativeNames: [] as Array<string>,\n    companyLegalForm: \"\",\n    headquarters: \"\",\n    headquartersPostalCode: \"\",\n    countryCode: \"\",\n    lei: \"\",\n    isin: \"\",\n    ticker: \"\",\n    permId: \"\",\n    duns: \"\",\n    companyRegistrationNumber: \"\",\n    vatNumber: \"\",\n    sector: \"\",\n    website: \"\",\n    checkCustomInputs,\n    identifiers: {} as { [key: string]: Array<string> },\n    enteredCompanyAlternativeName: \"\",\n    allCountryCodes: getAllCountryCodes(),\n    postCompanyProcessed: false,\n    message: \"\",\n    uploadSucceded: false,\n    messageCounter: 0,\n    companyDataExplanations,\n    companyDataNames,\n    gicsSectors,\n    IdentifierType,\n  }),\n  methods: {\n    /**\n     * Validates if there is already a company with an identifier of value of a FormKit input field\n     * @param node the node corresponding the FormKit input field\n     * @param identifierType the type of the identifier to check\n     * @returns true if and only if there is no company with the in the node specified identifier of the specified type\n     */\n    async identifierDoesNotExistValidator(node: FormKitNode, identifierType: IdentifierType): Promise<boolean> {\n      try {\n        await (\n          await new ApiClientProvider(assertDefined(this.getKeycloakPromise)()).getCompanyDataControllerApi()\n        ).existsIdentifier(identifierType, node.value as string);\n        return false;\n      } catch (error: AxiosError) {\n        if ((error as AxiosError).response.status == 404) {\n          return true;\n        }\n        throw error;\n      }\n    },\n    /**\n     * Adds a CompanyIdentifier to the array of identifiers\n     * @param identifierType the type of the identifier as specified in IdentifierType\n     * @param identifierValue the value of the identifier\n     */\n    setIdentifier(identifierType: IdentifierType, identifierValue: string): void {\n      if (identifierValue !== \"\") {\n        this.identifiers[identifierType] = [identifierValue];\n      }\n    },\n    /**\n     * Creates a new array of identifiers using the currently existing values\n     */\n    collectIdentifiers(): void {\n      this.identifiers = {};\n      this.setIdentifier(IdentifierType.Lei, this.lei);\n      this.setIdentifier(IdentifierType.Isin, this.isin);\n      this.setIdentifier(IdentifierType.Ticker, this.ticker);\n      this.setIdentifier(IdentifierType.PermId, this.permId);\n      this.setIdentifier(IdentifierType.Duns, this.duns);\n      this.setIdentifier(IdentifierType.CompanyRegistrationNumber, this.companyRegistrationNumber);\n      this.setIdentifier(IdentifierType.VatNumber, this.vatNumber);\n    },\n    /**\n     * Adds the value from the input field for company alternative names to the corresponding array.\n     * Empty strings and duplicates are ignored and the input field value is reset.\n     */\n    addCompanyAlternativeName(): void {\n      if (\n        this.enteredCompanyAlternativeName !== \"\" &&\n        !this.companyAlternativeNames.includes(this.enteredCompanyAlternativeName)\n      ) {\n        this.companyAlternativeNames.push(this.enteredCompanyAlternativeName);\n      }\n      this.enteredCompanyAlternativeName = \"\";\n    },\n    /**\n     * Removes the n-th company alternative name from the corresponding array\n     * @param index specifies the n-th alternative name to be removed\n     */\n    removeAlternativeName(index: number): void {\n      this.companyAlternativeNames.splice(index - 1, 1);\n    },\n    /**\n     * Builds a CompanyInformation object using the currently entered inputs and returns it\n     * @returns the CompanyInformation object build\n     */\n    getCompanyInformation(): CompanyInformation {\n      this.addCompanyAlternativeName();\n      this.collectIdentifiers();\n      return {\n        companyName: this.companyName,\n        companyAlternativeNames: this.companyAlternativeNames,\n        companyLegalForm: this.companyLegalForm,\n        headquarters: this.headquarters,\n        headquartersPostalCode: this.headquartersPostalCode,\n        sector: this.sector,\n        identifiers: this.identifiers,\n        countryCode: this.countryCode,\n        isTeaserCompany: false,\n        website: this.website,\n      } as CompanyInformation;\n    },\n    /**\n     * Posts the entered company information to the backend\n     */\n    async postCompanyInformation() {\n      this.messageCounter++;\n      try {\n        const company = this.getCompanyInformation();\n        if (this.identifiers.length === 0) {\n          this.message = \"Please specify at least one company identifier.\";\n          this.uploadSucceded = false;\n        } else {\n          const companyDataControllerApi = await new ApiClientProvider(\n            assertDefined(this.getKeycloakPromise)(),\n          ).getCompanyDataControllerApi();\n          const response = await companyDataControllerApi.postCompany(company);\n          const newCompanyId = response.data.companyId;\n          this.$emit(\"companyCreated\", newCompanyId);\n          this.$formkit.reset(\"createCompanyForm\");\n          this.companyAlternativeNames = new Array<string>();\n          this.message = \"New company has the ID: \" + newCompanyId;\n          this.uploadSucceded = true;\n        }\n      } catch (error) {\n        console.error(error);\n        if (error instanceof AxiosError) {\n          this.message = \"An error occurred: \" + error.message;\n        } else {\n          this.message =\n            \"An unexpected error occurred. Please try again or contact the support team if the issue persists.\";\n        }\n        this.uploadSucceded = false;\n      } finally {\n        this.postCompanyProcessed = true;\n      }\n    },\n  },\n});\n</script>\n","<template>\n  <span class=\"p-fluid\">\n    <span class=\"p-input-icon-left p-input-icon-right\">\n      <i class=\"pi pi-search d-framework-searchbar-input-icon\" aria-hidden=\"true\" style=\"z-index: 20; color: #958d7c\" />\n      <AutoComplete\n        inputId=\"company_search_bar_standard\"\n        ref=\"autocomplete\"\n        v-model=\"searchBarInput\"\n        :suggestions=\"autocompleteArray\"\n        :minLength=\"3\"\n        optionLabel=\"companyName\"\n        :autoOptionFocus=\"false\"\n        placeholder=\"Search company by name or identifier\"\n        inputClass=\"h-3rem d-framework-searchbar-input\"\n        panelClass=\"d-framework-searchbar-panel\"\n        style=\"z-index: 10\"\n        @complete=\"searchCompanyName($event)\"\n        @item-select=\"pushToChooseFrameworkForDataUploadPageForItem($event)\"\n      >\n        <template #option=\"slotProps\">\n          <i class=\"pi pi-search pl-3 pr-3\" aria-hidden=\"true\" />\n          <SearchResultHighlighter :text=\"slotProps.option.companyName\" :searchString=\"latestValidSearchString\" />\n        </template>\n      </AutoComplete>\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport AutoComplete, { type AutoCompleteCompleteEvent, type AutoCompleteItemSelectEvent } from \"primevue/autocomplete\";\nimport { type CompanyIdAndName } from \"@clients/backend\";\nimport SearchResultHighlighter from \"@/components/resources/frameworkDataSearch/SearchResultHighlighter.vue\";\nimport { defineComponent, inject, ref } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport { ApiClientProvider } from \"@/services/ApiClients\";\n\nexport default defineComponent({\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n      autocomplete: ref<HTMLFormElement>(),\n    };\n  },\n  name: \"CompaniesOnlySearchBar\",\n  components: { AutoComplete, SearchResultHighlighter },\n\n  mounted() {\n    const autocompleteRefsObject = this.autocomplete?.$refs as Record<string, unknown>;\n    const inputOfAutocompleteComponent = autocompleteRefsObject.focusInput as HTMLInputElement;\n    inputOfAutocompleteComponent.focus();\n  },\n\n  data: function () {\n    return {\n      searchBarInput: \"\",\n      latestValidSearchString: \"\",\n      autocompleteArray: [] as Array<CompanyIdAndName>,\n    };\n  },\n\n  watch: {\n    searchBarInput(newValue: string) {\n      this.saveCurrentSearchStringIfValid(newValue);\n    },\n  },\n\n  methods: {\n    /**\n     * The input string is stored in the variable latestValidSearchString if it is a string and not empty\n     * @param currentSearchString input to be checked (can be of type string or object)\n     */\n    saveCurrentSearchStringIfValid(currentSearchString: string | object) {\n      if (currentSearchString && typeof currentSearchString === \"string\") {\n        this.latestValidSearchString = currentSearchString;\n      }\n    },\n    /**\n     * Executes a router push to upload overview page of the given company\n     * @param event object containing the stored company\n     * @param event.value the stored company object\n     */\n    async pushToChooseFrameworkForDataUploadPageForItem(event: AutoCompleteItemSelectEvent) {\n      await this.$router.push(`/companies/${(event.value as CompanyIdAndName).companyId}/frameworks/upload`);\n    },\n    /**\n     * Queries the getCompanies endpoint and writes the response to the variable autoCompleteArray\n     * @param autoCompleteCompleteEvent object containing the search query for the getCompanies endpoint\n     */\n    async searchCompanyName(autoCompleteCompleteEvent: AutoCompleteCompleteEvent) {\n      try {\n        const companyDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getCompanyDataControllerApi();\n        const response = await companyDataControllerApi.getCompaniesBySearchString(autoCompleteCompleteEvent.query);\n        this.autocompleteArray = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n});\n</script>\n","<template>\n  <AuthenticationWrapper>\n    <TheHeader />\n    <AuthorizationWrapper :required-role=\"KEYCLOAK_ROLE_UPLOADER\">\n      <TheContent>\n        <BackButton id=\"backButton\" label=\"BACK\" />\n        <Card class=\"col-12 text-left page-wrapper-card\">\n          <template #title>New Dataset - Company</template>\n          <template #content>\n            <div class=\"grid\">\n              <div class=\"col-9\">\n                <div id=\"option1Container\" class=\"grid bottom-border-section\">\n                  <div id=\"option1Label\" class=\"col-3 p-3\">\n                    <h4 id=\"option1Title\">Option 01</h4>\n                    <h3>Select a company</h3>\n                    <p>Select the company for which you would like to add a new dataset.</p>\n                  </div>\n                  <div class=\"col-9 d-card\">\n                    <div class=\"mb-3\">\n                      <span>Type at least 3 characters to search for companies on Dataland:</span>\n                    </div>\n                    <CompaniesOnlySearchBar />\n                    <div class=\"mt-6\">\n                      <span>Can't find the company? </span>\n                      <a @click=\"autoScrollToCreateACompanyForm\" class=\"cursor-pointer text-primary font-semibold\"\n                        >Add it.</a\n                      >\n                    </div>\n                  </div>\n                </div>\n\n                <div id=\"option2Container\" ref=\"option2Container\" class=\"grid\">\n                  <div id=\"option2Label\" class=\"col-3 p-3\">\n                    <h4 id=\"option2Title\">Option 02</h4>\n                    <h3>Add a new company</h3>\n                    <p>\n                      If you want to add a dataset for a new company, you first have to create the company. To create a\n                      new company, all mandatory * fields must be filled.\n                    </p>\n                  </div>\n                  <div id=\"createCompanyForm\" class=\"col-9 d-card\">\n                    <CreateCompany @companyCreated=\"handleCompanyCreated\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </template>\n        </Card>\n      </TheContent>\n    </AuthorizationWrapper>\n    <TheFooter />\n  </AuthenticationWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref } from \"vue\";\nimport TheContent from \"@/components/generics/TheContent.vue\";\nimport AuthenticationWrapper from \"@/components/wrapper/AuthenticationWrapper.vue\";\nimport TheHeader from \"@/components/generics/TheHeader.vue\";\nimport BackButton from \"@/components/general/BackButton.vue\";\nimport Card from \"primevue/card\";\nimport CreateCompany from \"@/components/forms/CreateCompany.vue\";\nimport CompaniesOnlySearchBar from \"@/components/resources/companiesOnlySearch/CompaniesOnlySearchBar.vue\";\nimport { TIME_DELAY_BETWEEN_SUBMIT_AND_NEXT_ACTION_IN_MS } from \"@/utils/Constants\";\nimport AuthorizationWrapper from \"@/components/wrapper/AuthorizationWrapper.vue\";\nimport TheFooter from \"@/components/general/TheFooter.vue\";\nimport { KEYCLOAK_ROLE_UPLOADER } from \"@/utils/KeycloakUtils\";\n\nexport default defineComponent({\n  name: \"ChooseCompany\",\n  components: {\n    TheFooter,\n    AuthorizationWrapper,\n    AuthenticationWrapper,\n    BackButton,\n    TheHeader,\n    TheContent,\n    CompaniesOnlySearchBar,\n    CreateCompany,\n    Card,\n  },\n  data() {\n    return {\n      KEYCLOAK_ROLE_UPLOADER,\n    };\n  },\n  setup() {\n    return {\n      option2Container: ref<Element>(),\n    };\n  },\n\n  methods: {\n    /**\n     * Scrolls to the create company form section of the page\n     */\n    autoScrollToCreateACompanyForm() {\n      if (this.option2Container) {\n        this.option2Container.scrollIntoView({ behavior: \"smooth\" });\n      }\n    },\n    /**\n     * Executes a router push to the upload overview page of a given company\n     * @param companyId the ID of company in question\n     */\n    handleCompanyCreated(companyId: string) {\n      setTimeout(() => {\n        void this.$router.push(`/companies/${companyId}/frameworks/upload`);\n      }, TIME_DELAY_BETWEEN_SUBMIT_AND_NEXT_ACTION_IN_MS);\n    },\n  },\n});\n</script>\n"],"names":["companyDataNames","companyDataExplanations","gicsSectors","_sfc_main$2","defineComponent","UploadFormHeader","Card","FormKit","PrimeButton","SuccessMessage","FailMessage","Tooltip","inject","checkCustomInputs","getAllCountryCodes","IdentifierType","node","identifierType","ApiClientProvider","assertDefined","error","identifierValue","index","company","newCompanyId","AxiosError","_hoisted_3","_hoisted_5","_resolveComponent","_createBlock","_component_Card","_withCtx","_createTextVNode","_createElementVNode","_hoisted_1","_createVNode","_component_FormKit","_ctx","_hoisted_2","_component_UploadFormHeader","_cache","$event","_component_PrimeButton","_openBlock","_createElementBlock","_Fragment","_renderList","_toDisplayString","_hoisted_6","_hoisted_7","_component_SuccessMessage","_component_FailMessage","_sfc_main$1","ref","AutoComplete","SearchResultHighlighter","_a","newValue","currentSearchString","event","autoCompleteCompleteEvent","response","_hoisted_4","_component_AutoComplete","slotProps","_component_SearchResultHighlighter","_sfc_main","TheFooter","AuthorizationWrapper","AuthenticationWrapper","BackButton","TheHeader","TheContent","CompaniesOnlySearchBar","CreateCompany","KEYCLOAK_ROLE_UPLOADER","companyId","TIME_DELAY_BETWEEN_SUBMIT_AND_NEXT_ACTION_IN_MS","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_component_AuthenticationWrapper","_component_TheHeader","_component_AuthorizationWrapper","_component_TheContent","_component_BackButton","_component_CompaniesOnlySearchBar","args"],"mappings":"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"}