var A=Object.defineProperty;var y=(e,t,a)=>t in e?A(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;var n=(e,t,a)=>(y(e,typeof t!="symbol"?t+"":t,a),a);import{Q as l}from"./qa-status-272129d3.js";import{A as g}from"./ApiClients-ff4e7c51.js";import{L as m,d as R,e as f,_ as v,o as w,c as D,a as E,v as S,x as h}from"./index-727eb1c9.js";var p=(e=>(e[e.QaPending=0]="QaPending",e[e.QaApproved=1]="QaApproved",e[e.QaRejected=2]="QaRejected",e[e.Superseded=3]="Superseded",e))(p||{});class C{constructor(t,a,u,c,o,i,s){this.companyName=t,this.dataType=a,this.uploadTimeInMs=u,this.companyId=c,this.dataId=o,this.dataReportingPeriod=i,this.status=s}}function Q(e){return e.qaStatus==l.Accepted?e.currentlyActive?1:3:e.qaStatus==l.Rejected?2:0}async function q(e,t){let a;const c=(await(await new g(e()).getCompanyDataControllerApi()).getCompanies(t,new Set(m),void 0,void 0,void 0,!0)).data,o=(await e()).idTokenParsed;return o&&(a=o.sub),c.flatMap(i=>i.dataRegisteredByDataland.filter(s=>s.uploaderUserId==a&&m.includes(s.dataType)).map(s=>new C(i.companyInformation.companyName,s.dataType,s.uploadTime,i.companyId,s.dataId,s.reportingPeriod,Q(s))))}const T=R({name:"DatasetStatusBadge",data(){return{assertDefined:f,statusMap:new Map([[p.QaApproved,d.Approved],[p.QaPending,d.Pending],[p.QaRejected,d.Rejected],[p.Superseded,d.Superseded]])}},props:{datasetStatus:{type:Number,required:!0}}}),r=class r{constructor(t,a){n(this,"color");n(this,"text");this.color=t,this.text=a}};n(r,"Approved",new r("green","APPROVED")),n(r,"Pending",new r("yellow","PENDING")),n(r,"Rejected",new r("red","REJECTED")),n(r,"Superseded",new r("brown","SUPERSEDED"));let d=r;const P={"data-test":"qa-status"};function b(e,t,a,u,c,o){return w(),D("div",{class:h(`p-badge badge-${e.assertDefined(e.statusMap.get(e.datasetStatus)).color}`)},[E("span",P,S(e.assertDefined(e.statusMap.get(e.datasetStatus)).text),1)],2)}const U=v(T,[["render",b]]);export{U as D,Q as a,q as g};
//# sourceMappingURL=DatasetStatusBadge-69ec1772.js.map
