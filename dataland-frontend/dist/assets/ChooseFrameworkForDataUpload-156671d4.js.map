{"version":3,"file":"ChooseFrameworkForDataUpload-156671d4.js","sources":["../../src/components/resources/chooseFrameworkForDataUpload/MetaInfoPerCompanyAndFramework.vue","../../src/components/pages/ChooseFrameworkForDataUpload.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <h4>{{ title + \" Datasets:\" }}</h4>\n      <div v-if=\"isWaitingForData\" class=\"inline-loading text-center\">\n        <p class=\"font-medium text-xl\">Loading...</p>\n        <i class=\"pi pi-spinner pi-spin\" aria-hidden=\"true\" style=\"z-index: 20; color: #e67f3f\" />\n      </div>\n\n      <div v-else>\n        <div v-for=\"(dataMetaInfo, index) in listOfFrameworkData\" :key=\"index\">\n          <div>\n            <router-link\n              v-if=\"this.isFrontendViewPageExisting\"\n              :to=\"calculateDatasetLink(dataMetaInfo)\"\n              class=\"text-primary font-semibold underline\"\n            >\n              {{ getDynamicDatasetTitle(dataMetaInfo) }}\n            </router-link>\n            <span v-else class=\"font-semibold underline\">\n              {{ getDynamicDatasetTitle(dataMetaInfo) }}\n            </span>\n          </div>\n          <div>\n            <span class=\"mr-3\">{{ convertUnixTimeInMsToDateString(dataMetaInfo.uploadTime) }}</span>\n            <DatasetStatusBadge :dataset-status=\"getDatasetStatus(dataMetaInfo)\" />\n          </div>\n        </div>\n        <p class=\"mt-5\">{{ dynamicButtonTitle }}</p>\n        <PrimeButton\n          class=\"uppercase p-button p-button-sm d-letters mt-3\"\n          :disabled=\"!isFrontendUploadFormExisting\"\n          label=\"Create Dataset\"\n          data-test=\"createDatasetButton\"\n          icon=\"pi pi-plus\"\n          @click=\"redirectToUploadForm\"\n        />\n        <div v-if=\"!isFrontendUploadFormExisting\">\n          <p>\n            (Uploading data for this framework is currently not enabled on the Dataland frontend. You can use the\n            Dataland API to do so.)\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport { convertUnixTimeInMsToDateString } from \"@/utils/DataFormatUtils\";\nimport PrimeButton from \"primevue/button\";\nimport { type DataMetaInformation, type DataTypeEnum } from \"@clients/backend\";\nimport { ARRAY_OF_FRAMEWORKS_WITH_UPLOAD_FORM, ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE } from \"@/utils/Constants\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport { getDatasetStatus } from \"@/components/resources/datasetOverview/DatasetTableInfo\";\nimport DatasetStatusBadge from \"@/components/general/DatasetStatusBadge.vue\";\n\nexport default defineComponent({\n  name: \"MetaInfoPerCompanyAndFramework\",\n  components: { PrimeButton, DatasetStatusBadge },\n\n  props: {\n    dataType: {\n      type: String,\n      required: true,\n    },\n    isWaitingForData: {\n      type: Boolean,\n      default: true,\n    },\n    companyId: {\n      type: String,\n      required: true,\n    },\n    listOfFrameworkData: {\n      type: Array,\n      required: true,\n    },\n  },\n\n  data() {\n    return {\n      title: humanizeStringOrNumber(this.dataType),\n      isFrontendViewPageExisting: null as null | boolean,\n      isFrontendUploadFormExisting: null as null | boolean,\n      convertUnixTimeInMsToDateString: convertUnixTimeInMsToDateString,\n      getDatasetStatus,\n    };\n  },\n\n  mounted() {\n    this.isFrontendViewPageExisting = ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE.includes(this.dataType as DataTypeEnum);\n    this.isFrontendUploadFormExisting = ARRAY_OF_FRAMEWORKS_WITH_UPLOAD_FORM.includes(this.dataType as DataTypeEnum);\n  },\n\n  computed: {\n    dynamicButtonTitle(): string {\n      if (this.listOfFrameworkData.length === 0) {\n        return \"Be the first to create this dataset\";\n      } else {\n        return `Create another dataset for ${this.title}`;\n      }\n    },\n  },\n  methods: {\n    /**\n     * Calculates the link to the view page for the specified dataset\n     * @param dataMetaInfo the dataset to generate the link for\n     * @returns the link to the view page for the specified dataset\n     */\n    calculateDatasetLink(dataMetaInfo: DataMetaInformation): string {\n      return `/companies/${this.companyId}/frameworks/${this.dataType}/${dataMetaInfo.dataId}`;\n    },\n\n    /**\n     * Method to construct a title for a data meta information object depending on whether it is currently active and\n     * whether a corresponding frontend view page exists\n     * @param dataMetaInfo The data meta information object for which the title is constructed\n     * @returns the constrcted dataset title\n     */\n    getDynamicDatasetTitle(dataMetaInfo: DataMetaInformation): string {\n      let resultingTitle = `${this.title} dataset for reporting period: ${dataMetaInfo.reportingPeriod}`;\n      if (dataMetaInfo.currentlyActive) {\n        resultingTitle = `${resultingTitle} - latest version`;\n      }\n      if (!this.isFrontendViewPageExisting) {\n        resultingTitle = `${resultingTitle} (only viewable via API)`;\n      }\n      return resultingTitle;\n    },\n\n    /**\n     * Executes a router push to the upload page of a given company and framework\n     */\n    async redirectToUploadForm() {\n      await this.$router.push(`/companies/${this.companyId}/frameworks/${this.dataType}/upload`);\n    },\n  },\n});\n</script>\n","<template>\n  <AuthenticationWrapper>\n    <TheHeader />\n    <AuthorizationWrapper :required-role=\"KEYCLOAK_ROLE_UPLOADER\">\n      <TheContent>\n        <BackButton id=\"backButton\" label=\"BACK\" />\n        <CompanyInformation :companyID=\"companyID\" />\n        <Card class=\"col-12 text-left page-wrapper-card\">\n          <template #title> New Dataset - Framework </template>\n          <template #content>\n            <div class=\"uploadFormWrapper grid\">\n              <div id=\"euTaxonomyContainer\" class=\"col-9 flex\">\n                <div id=\"euTaxonomyLabel\" class=\"col-3 p-3\">\n                  <h3>EU Taxonomy</h3>\n                  <p>{{ buildSubtitle(\"EU Taxonomy\") }}</p>\n                </div>\n                <div class=\"col-9 d-card\">\n                  <div id=\"eutaxonomyDataSetsContainer\">\n                    <h4 class=\"bottom-border-section-dots\">Eu Taxonomy Data Sets:</h4>\n\n                    <MetaInfoPerCompanyAndFramework\n                      :data-type=\"DataTypeEnum.EutaxonomyNonFinancials\"\n                      :companyId=\"companyID\"\n                      :isWaitingForData=\"waitingForData\"\n                      :listOfFrameworkData=\"getFrameworkMetaInfos(DataTypeEnum.EutaxonomyNonFinancials)\"\n                      class=\"bottom-border-section-dots\"\n                    />\n\n                    <MetaInfoPerCompanyAndFramework\n                      :data-type=\"DataTypeEnum.EutaxonomyFinancials\"\n                      :companyId=\"companyID\"\n                      :isWaitingForData=\"waitingForData\"\n                      :listOfFrameworkData=\"getFrameworkMetaInfos(DataTypeEnum.EutaxonomyFinancials)\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div\n                v-for=\"dataType in allFrameworksExceptEuTaxonomy\"\n                :key=\"dataType\"\n                class=\"col-9 flex top-border-section\"\n                :id=\"dataType + 'Container'\"\n              >\n                <div :id=\"dataType + 'Label'\" class=\"col-3 p-3\">\n                  <h3>{{ humanizeString(dataType) }}</h3>\n                  <p>{{ buildSubtitle(humanizeString(dataType)) }}</p>\n                  <p v-if=\"dataType === DataTypeEnum.P2p\">\n                    Framework based on:\n                    <a\n                      href=\"https://pathwaystoparis.com/en/tool-box/transformation-perfomance/\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {{ humanizeString(dataType) }}</a\n                    >\n                  </p>\n                </div>\n                <div class=\"col-9 d-card\">\n                  <MetaInfoPerCompanyAndFramework\n                    :data-type=\"dataType\"\n                    :companyId=\"companyID\"\n                    :isWaitingForData=\"waitingForData\"\n                    :listOfFrameworkData=\"getFrameworkMetaInfos(dataType)\"\n                  />\n                </div>\n              </div>\n            </div>\n          </template>\n        </Card>\n      </TheContent>\n    </AuthorizationWrapper>\n    <TheFooter />\n  </AuthenticationWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { ApiClientProvider } from \"@/services/ApiClients\";\nimport { defineComponent, inject } from \"vue\";\nimport type Keycloak from \"keycloak-js\";\nimport { assertDefined } from \"@/utils/TypeScriptUtils\";\nimport TheContent from \"@/components/generics/TheContent.vue\";\nimport AuthenticationWrapper from \"@/components/wrapper/AuthenticationWrapper.vue\";\nimport TheHeader from \"@/components/generics/TheHeader.vue\";\nimport BackButton from \"@/components/general/BackButton.vue\";\nimport Card from \"primevue/card\";\nimport CompanyInformation from \"@/components/pages/CompanyInformation.vue\";\nimport { type DataMetaInformation, DataTypeEnum } from \"@clients/backend\";\nimport MetaInfoPerCompanyAndFramework from \"@/components/resources/chooseFrameworkForDataUpload/MetaInfoPerCompanyAndFramework.vue\";\nimport AuthorizationWrapper from \"@/components/wrapper/AuthorizationWrapper.vue\";\nimport TheFooter from \"@/components/general/TheFooter.vue\";\nimport { humanizeStringOrNumber } from \"@/utils/StringHumanizer\";\nimport { KEYCLOAK_ROLE_UPLOADER } from \"@/utils/KeycloakUtils\";\n\nexport default defineComponent({\n  name: \"ChooseFramework\",\n  components: {\n    TheFooter,\n    AuthorizationWrapper,\n    CompanyInformation,\n    AuthenticationWrapper,\n    TheHeader,\n    BackButton,\n    TheContent,\n    Card,\n    MetaInfoPerCompanyAndFramework,\n  },\n  setup() {\n    return {\n      getKeycloakPromise: inject<() => Promise<Keycloak>>(\"getKeycloakPromise\"),\n    };\n  },\n\n  created() {\n    void this.getMetaInfoAboutAllDataSetsForCurrentCompany();\n  },\n\n  data() {\n    return {\n      allFrameworksExceptEuTaxonomy: Object.values(DataTypeEnum).filter(\n        (frameworkName) =>\n          [DataTypeEnum.EutaxonomyFinancials as string, DataTypeEnum.EutaxonomyNonFinancials as string].indexOf(\n            frameworkName,\n          ) === -1,\n      ) as DataTypeEnum[],\n      waitingForData: true,\n      DataTypeEnum,\n      humanizeString: humanizeStringOrNumber,\n      mapOfDataTypeToListOfDataMetaInfo: new Map<DataTypeEnum, DataMetaInformation[]>(),\n      KEYCLOAK_ROLE_UPLOADER,\n    };\n  },\n  props: {\n    companyID: {\n      type: String,\n      required: true,\n    },\n  },\n\n  methods: {\n    /**\n     * Function building a unified for subtitle for a framework type\n     * @param dataTypeTitle the type of the framework (humanized name)\n     * @returns a unified subtitle\n     */\n    buildSubtitle(dataTypeTitle: string): string {\n      return `Overview of all existing ${dataTypeTitle} datasets for this company.`;\n    },\n    /**\n     *  Sorts a list of data meta information alphabetically by their reporting period\n     * @param listOfDataMetaInfo the list of data meta information to be sorted\n     * @returns the sorted list of data meta information\n     */\n    sortListOfDataMetaInfoAlphabeticallyByReportingPeriod(\n      listOfDataMetaInfo: DataMetaInformation[],\n    ): DataMetaInformation[] {\n      listOfDataMetaInfo.sort((dataMetaInfoA, dataMetaInfoB) => {\n        if (dataMetaInfoA.reportingPeriod > dataMetaInfoB.reportingPeriod) return -1;\n        else return 0;\n      });\n      return listOfDataMetaInfo;\n    },\n\n    /**\n     *  Sorts a list of data meta information descending by their uploading time\n     * @param listOfDataMetaInfo the list of data meta information to be sorted\n     * @returns the sorted list of data meta information\n     */\n    sortListOfDataMetaInfoByUploadTime(listOfDataMetaInfo: Array<DataMetaInformation>): Array<DataMetaInformation> {\n      return listOfDataMetaInfo.sort(\n        (dataMetaInfoA, dataMetaInfoB) => dataMetaInfoB.uploadTime - dataMetaInfoA.uploadTime,\n      );\n    },\n\n    /**\n     *  This function assigns the elements of an array of data meta info to buckets/groups based on their reporting periods.\n     *  It does so by using a map. It takes the list of data meta info and puts its elements into sub-arrays, which\n     *  are the values of that map. The respective reporting period is the key of those sub-arrays.\n     * @param listOfDataMetaInfo the list of data meta information to be grouped\n     * @returns a map with the distinct reporting periods as keys and arrays of data meta info for that period as values\n     */\n    groupListOfDataMetaInfoAsMapOfReportingPeriodToListOfDataMetaInfo(\n      listOfDataMetaInfo: DataMetaInformation[],\n    ): Map<string, DataMetaInformation[]> {\n      return listOfDataMetaInfo.reduce((groups, dataMetaInfo) => {\n        groups.get(dataMetaInfo.reportingPeriod)\n          ? groups.get(dataMetaInfo.reportingPeriod)?.push(dataMetaInfo)\n          : groups.set(dataMetaInfo.reportingPeriod, [dataMetaInfo]);\n        return groups;\n      }, new Map<string, DataMetaInformation[]>());\n    },\n\n    /**\n     *  Groups a list of data meta information by their reporting periods, then executes a sorting function on\n     *  each group, and then unites and returns all those groups.\n     * @param listOfDataMetaInfo the list of data meta information to be grouped and sorted\n     * @returns a list of data meta info as the united sub-lists of the groups\n     */\n    groupAndSortListOfDataMetaInfo(listOfDataMetaInfo: Array<DataMetaInformation>): Array<DataMetaInformation> {\n      const listOfDataMetaInfoSortedByReportingPeriod =\n        this.sortListOfDataMetaInfoAlphabeticallyByReportingPeriod(listOfDataMetaInfo);\n      const mapOfReportingPeriodToListOfDataMetaInfo =\n        this.groupListOfDataMetaInfoAsMapOfReportingPeriodToListOfDataMetaInfo(\n          listOfDataMetaInfoSortedByReportingPeriod,\n        );\n      const resultArray: DataMetaInformation[] = [];\n      Array.from(mapOfReportingPeriodToListOfDataMetaInfo.values()).forEach(\n        (listOfDataMetaInfoForUniqueReportingPeriod) => {\n          resultArray.push(...this.sortListOfDataMetaInfoByUploadTime(listOfDataMetaInfoForUniqueReportingPeriod));\n        },\n      );\n      return resultArray;\n    },\n\n    /**\n     * Gets all data meta information of the company identified by the company ID in the URL and fills the lists for\n     * data meta information of the various frameworks\n     */\n    async getMetaInfoAboutAllDataSetsForCurrentCompany() {\n      try {\n        const metaDataControllerApi = await new ApiClientProvider(\n          assertDefined(this.getKeycloakPromise)(),\n        ).getMetaDataControllerApi();\n        const response = await metaDataControllerApi.getListOfDataMetaInfo(this.companyID, undefined, false);\n        const listOfAllDataMetaInfo = response.data;\n        this.mapOfDataTypeToListOfDataMetaInfo = listOfAllDataMetaInfo.reduce((groups, dataMetaInfo) => {\n          groups.get(dataMetaInfo.dataType)\n            ? groups.get(dataMetaInfo.dataType)?.push(dataMetaInfo)\n            : groups.set(dataMetaInfo.dataType, [dataMetaInfo]);\n          return groups;\n        }, new Map<DataTypeEnum, Array<DataMetaInformation>>());\n        this.mapOfDataTypeToListOfDataMetaInfo.forEach((value, key) => {\n          this.mapOfDataTypeToListOfDataMetaInfo.set(key, this.groupAndSortListOfDataMetaInfo(value));\n        });\n        this.waitingForData = false;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    /**\n     * Returns a list of the meta information available for a framework\n     * @param dataType the data type of the data associated to the meta infos returned\n     * @returns the meta infos of data with the specified data type\n     */\n    getFrameworkMetaInfos(dataType: DataTypeEnum): Array<DataMetaInformation> {\n      if (!this.waitingForData) {\n        return this.mapOfDataTypeToListOfDataMetaInfo.get(dataType) ?? [];\n      } else {\n        return [];\n      }\n    },\n  },\n});\n</script>\n"],"names":["_sfc_main$1","defineComponent","PrimeButton","DatasetStatusBadge","humanizeStringOrNumber","convertUnixTimeInMsToDateString","getDatasetStatus","ARRAY_OF_FRAMEWORKS_WITH_VIEW_PAGE","ARRAY_OF_FRAMEWORKS_WITH_UPLOAD_FORM","dataMetaInfo","resultingTitle","_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_hoisted_6","_hoisted_8","_hoisted_10","_resolveComponent","_openBlock","_createElementBlock","_toDisplayString","_ctx","_hoisted_5","_Fragment","_renderList","index","_createBlock","_component_router_link","_hoisted_7","_createVNode","_component_DatasetStatusBadge","_component_PrimeButton","_createCommentVNode","_hoisted_9","_hoisted_11","_sfc_main","TheFooter","AuthorizationWrapper","CompanyInformation","AuthenticationWrapper","TheHeader","BackButton","TheContent","Card","MetaInfoPerCompanyAndFramework","inject","DataTypeEnum","frameworkName","KEYCLOAK_ROLE_UPLOADER","dataTypeTitle","listOfDataMetaInfo","dataMetaInfoA","dataMetaInfoB","groups","_a","listOfDataMetaInfoSortedByReportingPeriod","mapOfReportingPeriodToListOfDataMetaInfo","resultArray","listOfDataMetaInfoForUniqueReportingPeriod","listOfAllDataMetaInfo","ApiClientProvider","assertDefined","value","key","error","dataType","_component_AuthenticationWrapper","_withCtx","_component_TheHeader","_component_AuthorizationWrapper","_component_TheContent","_component_BackButton","_component_CompanyInformation","_component_Card","_createTextVNode","_component_MetaInfoPerCompanyAndFramework","_hoisted_12"],"mappings":"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"}