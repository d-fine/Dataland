{"version":3,"file":"CountryCodeConverter-1e06a9b2.js","sources":["../../node_modules/diacritics/index.js","../../node_modules/i18n-iso-countries/index.js","../../src/utils/CountryCodeConverter.ts"],"sourcesContent":["exports.remove = removeDiacritics;\n\nvar replacementList = [\n  {\n    base: ' ',\n    chars: \"\\u00A0\",\n  }, {\n    base: '0',\n    chars: \"\\u07C0\",\n  }, {\n    base: 'A',\n    chars: \"\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\",\n  }, {\n    base: 'AA',\n    chars: \"\\uA732\",\n  }, {\n    base: 'AE',\n    chars: \"\\u00C6\\u01FC\\u01E2\",\n  }, {\n    base: 'AO',\n    chars: \"\\uA734\",\n  }, {\n    base: 'AU',\n    chars: \"\\uA736\",\n  }, {\n    base: 'AV',\n    chars: \"\\uA738\\uA73A\",\n  }, {\n    base: 'AY',\n    chars: \"\\uA73C\",\n  }, {\n    base: 'B',\n    chars: \"\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181\",\n  }, {\n    base: 'C',\n    chars: \"\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B\",\n  }, {\n    base: 'D',\n    chars: \"\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779\",\n  }, {\n    base: 'Dh',\n    chars: \"\\u00D0\",\n  }, {\n    base: 'DZ',\n    chars: \"\\u01F1\\u01C4\",\n  }, {\n    base: 'Dz',\n    chars: \"\\u01F2\\u01C5\",\n  }, {\n    base: 'E',\n    chars: \"\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07\",\n  }, {\n    base: 'F',\n    chars: \"\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\",\n  }, {\n    base: 'G',\n    chars: \"\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262\",\n  }, {\n    base: 'H',\n    chars: \"\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\",\n  }, {\n    base: 'I',\n    chars: \"\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\",\n  }, {\n    base: 'J',\n    chars: \"\\u24BF\\uFF2A\\u0134\\u0248\\u0237\",\n  }, {\n    base: 'K',\n    chars: \"\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\",\n  }, {\n    base: 'L',\n    chars: \"\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\",\n  }, {\n    base: 'LJ',\n    chars: \"\\u01C7\",\n  }, {\n    base: 'Lj',\n    chars: \"\\u01C8\",\n  }, {\n    base: 'M',\n    chars: \"\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB\",\n  }, {\n    base: 'N',\n    chars: \"\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E\",\n  }, {\n    base: 'NJ',\n    chars: \"\\u01CA\",\n  }, {\n    base: 'Nj',\n    chars: \"\\u01CB\",\n  }, {\n    base: 'O',\n    chars: \"\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\",\n  }, {\n    base: 'OE',\n    chars: \"\\u0152\",\n  }, {\n    base: 'OI',\n    chars: \"\\u01A2\",\n  }, {\n    base: 'OO',\n    chars: \"\\uA74E\",\n  }, {\n    base: 'OU',\n    chars: \"\\u0222\",\n  }, {\n    base: 'P',\n    chars: \"\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\",\n  }, {\n    base: 'Q',\n    chars: \"\\u24C6\\uFF31\\uA756\\uA758\\u024A\",\n  }, {\n    base: 'R',\n    chars: \"\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\",\n  }, {\n    base: 'S',\n    chars: \"\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\",\n  }, {\n    base: 'T',\n    chars: \"\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\",\n  }, {\n    base: 'Th',\n    chars: \"\\u00DE\",\n  }, {\n    base: 'TZ',\n    chars: \"\\uA728\",\n  }, {\n    base: 'U',\n    chars: \"\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\",\n  }, {\n    base: 'V',\n    chars: \"\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\",\n  }, {\n    base: 'VY',\n    chars: \"\\uA760\",\n  }, {\n    base: 'W',\n    chars: \"\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\",\n  }, {\n    base: 'X',\n    chars: \"\\u24CD\\uFF38\\u1E8A\\u1E8C\",\n  }, {\n    base: 'Y',\n    chars: \"\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\",\n  }, {\n    base: 'Z',\n    chars: \"\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\",\n  }, {\n    base: 'a',\n    chars: \"\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\",\n  }, {\n    base: 'aa',\n    chars: \"\\uA733\",\n  }, {\n    base: 'ae',\n    chars: \"\\u00E6\\u01FD\\u01E3\",\n  }, {\n    base: 'ao',\n    chars: \"\\uA735\",\n  }, {\n    base: 'au',\n    chars: \"\\uA737\",\n  }, {\n    base: 'av',\n    chars: \"\\uA739\\uA73B\",\n  }, {\n    base: 'ay',\n    chars: \"\\uA73D\",\n  }, {\n    base: 'b',\n    chars: \"\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182\",\n  }, {\n    base: 'c',\n    chars: \"\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184\",\n  }, {\n    base: 'd',\n    chars: \"\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA\",\n  }, {\n    base: 'dh',\n    chars: \"\\u00F0\",\n  }, {\n    base: 'dz',\n    chars: \"\\u01F3\\u01C6\",\n  }, {\n    base: 'e',\n    chars: \"\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD\",\n  }, {\n    base: 'f',\n    chars: \"\\u24D5\\uFF46\\u1E1F\\u0192\",\n  }, {\n    base: 'ff',\n    chars: \"\\uFB00\",\n  }, {\n    base: 'fi',\n    chars: \"\\uFB01\",\n  }, {\n    base: 'fl',\n    chars: \"\\uFB02\",\n  }, {\n    base: 'ffi',\n    chars: \"\\uFB03\",\n  }, {\n    base: 'ffl',\n    chars: \"\\uFB04\",\n  }, {\n    base: 'g',\n    chars: \"\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79\",\n  }, {\n    base: 'h',\n    chars: \"\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\",\n  }, {\n    base: 'hv',\n    chars: \"\\u0195\",\n  }, {\n    base: 'i',\n    chars: \"\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\",\n  }, {\n    base: 'j',\n    chars: \"\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\",\n  }, {\n    base: 'k',\n    chars: \"\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\",\n  }, {\n    base: 'l',\n    chars: \"\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D\",\n  }, {\n    base: 'lj',\n    chars: \"\\u01C9\",\n  }, {\n    base: 'm',\n    chars: \"\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\",\n  }, {\n    base: 'n',\n    chars: \"\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\",\n  }, {\n    base: 'nj',\n    chars: \"\\u01CC\",\n  }, {\n    base: 'o',\n    chars: \"\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11\",\n  }, {\n    base: 'oe',\n    chars: \"\\u0153\",\n  }, {\n    base: 'oi',\n    chars: \"\\u01A3\",\n  }, {\n    base: 'oo',\n    chars: \"\\uA74F\",\n  }, {\n    base: 'ou',\n    chars: \"\\u0223\",\n  }, {\n    base: 'p',\n    chars: \"\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1\",\n  }, {\n    base: 'q',\n    chars: \"\\u24E0\\uFF51\\u024B\\uA757\\uA759\",\n  }, {\n    base: 'r',\n    chars: \"\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\",\n  }, {\n    base: 's',\n    chars: \"\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282\",\n  }, {\n    base: 'ss',\n    chars: \"\\xDF\",\n  }, {\n    base: 't',\n    chars: \"\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\",\n  }, {\n    base: 'th',\n    chars: \"\\u00FE\",\n  }, {\n    base: 'tz',\n    chars: \"\\uA729\",\n  }, {\n    base: 'u',\n    chars: \"\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\",\n  }, {\n    base: 'v',\n    chars: \"\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\",\n  }, {\n    base: 'vy',\n    chars: \"\\uA761\",\n  }, {\n    base: 'w',\n    chars: \"\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\",\n  }, {\n    base: 'x',\n    chars: \"\\u24E7\\uFF58\\u1E8B\\u1E8D\",\n  }, {\n    base: 'y',\n    chars: \"\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\",\n  }, {\n    base: 'z',\n    chars: \"\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\",\n  }\n];\n\nvar diacriticsMap = {};\nfor (var i = 0; i < replacementList.length; i += 1) {\n  var chars = replacementList[i].chars;\n  for (var j = 0; j < chars.length; j += 1) {\n    diacriticsMap[chars[j]] = replacementList[i].base;\n  }\n}\n\nfunction removeDiacritics(str) {\n  return str.replace(/[^\\u0000-\\u007e]/g, function(c) {\n    return diacriticsMap[c] || c;\n  });\n}\n\nexports.replacementList = replacementList;\nexports.diacriticsMap = diacriticsMap;\n","\"use strict\";\n\nconst codes = require(\"./codes.json\");\nconst supportedLocales = require(\"./supportedLocales.json\");\nconst removeDiacritics = require(\"diacritics\").remove;\nconst registeredLocales = {};\n\n/*\n * All codes map to ISO 3166-1 alpha-2\n */\nconst alpha2 = {},\n  alpha3 = {},\n  numeric = {},\n  invertedNumeric = {};\n\ncodes.forEach(function (codeInformation) {\n  const s = codeInformation;\n  alpha2[s[0]] = s[1];\n  alpha3[s[1]] = s[0];\n  numeric[s[2]] = s[0];\n  invertedNumeric[s[0]] = s[2];\n});\n\n/**\n * @private\n * @param {number} code\n */\nfunction formatNumericCode(code) {\n  return String(\"000\" + (code ? code : \"\")).slice(-3);\n}\n\n/**\n * @private\n * Avoid using obj.hasOwnProperty directly as `hasOwnProperty` could be a\n * property in itself ({ hasOwnProperty: 1 }) and cause weird bugs\n * https://eslint.org/docs/rules/no-prototype-builtins\n */\nfunction hasOwnProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n\n/**\n * @private\n * Pass localeList through a filter and return a newLocaleList obj\n * with the same structure of the old localeList.\n *\n * @param {LocalizedCountryNames} localeList  Local List in raw\n * @param {Function} filter    callback to set filter rule\n * @return {String | String[]} new filtered Local List\n */\nfunction localeFilter(localeList, filter) {\n  return Object.keys(localeList).reduce(function (newLocaleList, alpha2) {\n    const nameList = localeList[alpha2];\n    newLocaleList[alpha2] = filter(nameList, alpha2);\n    return newLocaleList;\n  }, {});\n}\n\n/**\n * @private\n * Preserve for getName & getNames\n *\n * @param {GetNameOptions.select} type all | official | alias\n * @param countryNameList  string array of country's\n *                         official name and alias\n * @return {String | String[]} of a country name\n */\nfunction filterNameBy(type, countryNameList) {\n  switch (type) {\n    case \"official\":\n      return Array.isArray(countryNameList)\n        ? countryNameList[0]\n        : countryNameList;\n\n    case \"all\":\n      return typeof countryNameList === \"string\"\n        ? [countryNameList]\n        : countryNameList;\n\n    case \"alias\":\n      return Array.isArray(countryNameList)\n        ? countryNameList[1] || countryNameList[0]\n        : countryNameList;\n\n    default:\n      throw new TypeError(\n        \"LocaleNameType must be one of these: all, official, alias!\"\n      );\n  }\n}\n\n/**\n * Register countries in browsers' environment:\n * @param {object} localeData\n * @example countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n * @return void\n */\nexports.registerLocale = function (localeData) {\n  if (!localeData.locale) {\n    throw new TypeError(\"Missing localeData.locale\");\n  }\n\n  if (!localeData.countries) {\n    throw new TypeError(\"Missing localeData.countries\");\n  }\n\n  registeredLocales[localeData.locale] = localeData.countries;\n};\n\n/*\n * @param code Alpha-3 code\n * @return Alpha-2 code or undefined\n */\nfunction alpha3ToAlpha2(code) {\n  return alpha3[code];\n}\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\n\n/*\n * @param code Alpha-2 code\n * @return Alpha-3 code or undefined\n */\nfunction alpha2ToAlpha3(code) {\n  return alpha2[code];\n}\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\n\n/*\n * @param code Alpha-3 code\n * @return Numeric code or undefined\n */\nfunction alpha3ToNumeric(code) {\n  return invertedNumeric[alpha3ToAlpha2(code)];\n}\nexports.alpha3ToNumeric = alpha3ToNumeric;\n\n/*\n * @param code Alpha-2 code\n * @return Numeric code or undefined\n */\nfunction alpha2ToNumeric(code) {\n  return invertedNumeric[code];\n}\nexports.alpha2ToNumeric = alpha2ToNumeric;\n\n/*\n * @param code Numeric code\n * @return Alpha-3 code or undefined\n */\nfunction numericToAlpha3(code) {\n  const padded = formatNumericCode(code);\n  return alpha2ToAlpha3(numeric[padded]);\n}\nexports.numericToAlpha3 = numericToAlpha3;\n\n/*\n * @param code Numeric code\n * @return Alpha-2 code or undefined\n */\nfunction numericToAlpha2(code) {\n  const padded = formatNumericCode(code);\n  return numeric[padded];\n}\nexports.numericToAlpha2 = numericToAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-3\n */\nfunction toAlpha3(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha3(code);\n    }\n    if (code.length === 2) {\n      return alpha2ToAlpha3(code.toUpperCase());\n    }\n    if (code.length === 3) {\n      return code.toUpperCase();\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha3(code);\n  }\n  return undefined;\n}\nexports.toAlpha3 = toAlpha3;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-2\n */\nfunction toAlpha2(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha2(code);\n    }\n    if (code.length === 2) {\n      return code.toUpperCase();\n    }\n    if (code.length === 3) {\n      return alpha3ToAlpha2(code.toUpperCase());\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha2(code);\n  }\n  return undefined;\n}\nexports.toAlpha2 = toAlpha2;\n\n/**\n * @param {string | number | Alpha2Code | Alpha3Code} code\n * @param {String} lang          language for country name\n * @param {GetNameOptions} options\n * @return {String | String[] | undefined}  name\n */\nexports.getName = function (code, lang, options = {}) {\n  if (!(\"select\" in options)) {\n    options.select = \"official\";\n  }\n  try {\n    const codeMaps = registeredLocales[lang.toLowerCase()];\n    const nameList = codeMaps[toAlpha2(code)];\n    return filterNameBy(options.select, nameList);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/**\n * @param {String} lang             language for country names\n * @param {GetNameOptions} options   getNames Options\n * @return {LocalizedCountryNames}  country code\n *                                  mapped to county name\n */\nexports.getNames = function (lang, options = {}) {\n  if (!(\"select\" in options)) {\n    options.select = \"official\";\n  }\n  const localeList = registeredLocales[lang.toLowerCase()];\n  if (localeList === undefined) return {};\n  return localeFilter(localeList, function (nameList) {\n    return filterNameBy(options.select, nameList);\n  });\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getAlpha2Code = function (name, lang) {\n  const normalizeString = (string) => string.toLowerCase();\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\n\n  try {\n    const codenames = registeredLocales[lang.toLowerCase()];\n    for (const p in codenames) {\n      if (!hasOwnProperty(codenames, p)) {\n        continue;\n      }\n      if (typeof codenames[p] === \"string\") {\n        if (areSimilar(codenames[p], name)) {\n          return p;\n        }\n      }\n      if (Array.isArray(codenames[p])) {\n        for (const mappedName of codenames[p]) {\n          if (areSimilar(mappedName, name)) {\n            return p;\n          }\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getSimpleAlpha2Code = function (name, lang) {\n  const normalizeString = (string) => removeDiacritics(string.toLowerCase());\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\n\n  try {\n    const codenames = registeredLocales[lang.toLowerCase()];\n    for (const p in codenames) {\n      if (!hasOwnProperty(codenames, p)) {\n        continue;\n      }\n      if (typeof codenames[p] === \"string\") {\n        if (areSimilar(codenames[p], name)) {\n          return p;\n        }\n      }\n      if (Array.isArray(codenames[p])) {\n        for (const mappedName of codenames[p]) {\n          if (areSimilar(mappedName, name)) {\n            return p;\n          }\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-2 codes mapped to alpha-3 codes\n */\nexports.getAlpha2Codes = function () {\n  return alpha2;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getAlpha3Code = function (name, lang) {\n  const alpha2 = exports.getAlpha2Code(name, lang);\n  if (alpha2) {\n    return exports.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getSimpleAlpha3Code = function (name, lang) {\n  const alpha2 = exports.getSimpleAlpha2Code(name, lang);\n  if (alpha2) {\n    return exports.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-3 codes mapped to alpha-2 codes\n */\nexports.getAlpha3Codes = function () {\n  return alpha3;\n};\n\n/*\n * @return Object of numeric codes mapped to alpha-2 codes\n */\nexports.getNumericCodes = function () {\n  return numeric;\n};\n\n/*\n * @return Array of registered languages\n */\nexports.langs = function () {\n  return Object.keys(registeredLocales);\n};\n\n/*\n * @return Array of supported languages\n */\nexports.getSupportedLanguages = function () {\n  return supportedLocales;\n};\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return Boolean\n */\nexports.isValid = function (code) {\n  if (!code) {\n    return false;\n  }\n\n  const coerced = code.toString().toUpperCase();\n  return (\n    hasOwnProperty(alpha3, coerced) ||\n    hasOwnProperty(alpha2, coerced) ||\n    hasOwnProperty(numeric, coerced)\n  );\n};\n","import countries from \"i18n-iso-countries\";\nimport countriesEn from \"i18n-iso-countries/langs/en.json\";\ncountries.registerLocale(countriesEn);\n\n/**\n * Returns the english name of the country identified by its country code\n * @param countryCode the country code of the country to lookup the name for\n * @returns the english name of the country identified by countryCode\n */\nexport function getCountryNameFromCountryCode(countryCode: string): string | undefined {\n  return countries.getName(countryCode, \"en\");\n}\n\n/**\n * Returns country identifiers\n * @returns the countryCodes\n */\nexport function getAllCountryCodes(): Array<string> {\n  return Object.keys(countries.getNames(\"en\")).sort((a, b) => a.localeCompare(b));\n}\n\n/**\n * Returns the english names and country identifiers\n * @returns the english names of the countries and the countryCodes\n */\nexport function getAllCountryNamesWithCodes(): { [alpha2CountryCode: string]: string } {\n  return countries.getNames(\"en\");\n}\n"],"names":["diacritics","removeDiacritics","replacementList","diacriticsMap","i","chars","j","str","c","codes","require$$0","supportedLocales","require$$1","require$$2","registeredLocales","alpha2","alpha3","numeric","invertedNumeric","codeInformation","s","formatNumericCode","code","hasOwnProperty","object","property","localeFilter","localeList","filter","newLocaleList","nameList","filterNameBy","type","countryNameList","exports","localeData","alpha3ToAlpha2","alpha2ToAlpha3","alpha3ToNumeric","alpha2ToNumeric","numericToAlpha3","padded","numericToAlpha2","toAlpha3","toAlpha2","lang","options","name","normalizeString","string","areSimilar","a","b","codenames","p","mappedName","coerced","countries","countriesEn","getCountryNameFromCountryCode","countryCode","getAllCountryCodes","getAllCountryNamesWithCodes"],"mappings":"8+RAAcA,EAAA,OAAGC,EAEjB,IAAIC,EAAkB,CACpB,CACE,KAAM,IACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,mCACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,KACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,IACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,SACX,EAAK,CACD,KAAM,IACN,MAAO,cACX,EAAK,CACD,KAAM,IACN,MAAO,eACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,IACX,EAAK,CACD,KAAM,KACN,MAAO,IACX,EAAK,CACD,KAAM,IACN,MAAO,iCACX,EAAK,CACD,KAAM,IACN,MAAO,QACX,EAAK,CACD,KAAM,IACN,MAAO,iBACX,EAAK,CACD,KAAM,IACN,MAAO,eACX,EAAK,CACD,KAAM,IACN,MAAO,qBACX,EAAK,CACD,KAAM,IACN,MAAO,OACX,EAAK,CACD,KAAM,IACN,MAAO,eACX,EAAK,CACD,KAAM,IACN,MAAO,mBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,UACX,EAAK,CACD,KAAM,IACN,MAAO,kBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,4CACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,WACX,EAAK,CACD,KAAM,IACN,MAAO,OACX,EAAK,CACD,KAAM,IACN,MAAO,kBACX,EAAK,CACD,KAAM,IACN,MAAO,kBACX,EAAK,CACD,KAAM,IACN,MAAO,gBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,mCACX,EAAK,CACD,KAAM,IACN,MAAO,SACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,WACX,EAAK,CACD,KAAM,IACN,MAAO,MACX,EAAK,CACD,KAAM,IACN,MAAO,gBACX,EAAK,CACD,KAAM,IACN,MAAO,eACX,EAAK,CACD,KAAM,IACN,MAAO,qCACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,KACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,IACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,WACX,EAAK,CACD,KAAM,IACN,MAAO,cACX,EAAK,CACD,KAAM,IACN,MAAO,kBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,IACX,EAAK,CACD,KAAM,IACN,MAAO,+BACX,EAAK,CACD,KAAM,IACN,MAAO,MACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,MACN,MAAO,GACX,EAAK,CACD,KAAM,MACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,gBACX,EAAK,CACD,KAAM,IACN,MAAO,gBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,qBACX,EAAK,CACD,KAAM,IACN,MAAO,OACX,EAAK,CACD,KAAM,IACN,MAAO,eACX,EAAK,CACD,KAAM,IACN,MAAO,qBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EAAK,CACD,KAAM,IACN,MAAO,SACX,EAAK,CACD,KAAM,IACN,MAAO,oBACX,EAAK,CACD,KAAM,KACN,MAAO,GACX,EA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","x_google_ignoreList":[0,1]}