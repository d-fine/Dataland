{"version":3,"file":"StringHumanizer-b303955c.js","sources":["../../src/utils/StringHumanizer.ts"],"sourcesContent":["/**\n * Module to convert string to a human-readable text\n */\n\n/**\n * convert camel case string to sentence case string using regex\n * @param rawText is the string to be converted to a human-readable string\n * @returns the converted string in \"sentence-case\"\n */\nfunction convertCamelCaseToSentenceCase(rawText: string): string {\n  // Split the sting to words\n  const processedText = rawText.replace(/((?!^)[A-Z])/g, \" $1\");\n  // uppercase the first letter of the first word\n  return processedText.charAt(0).toUpperCase() + processedText.slice(1);\n}\n\n/**\n * get the representable text from the mapping object\n * @param rawText is the string to be converted to a human-readable string\n * @returns the converted string\n */\nfunction humanizeViaMapping(rawText: string): string {\n  const mappingObject: { [key: string]: string } = {\n    isin: \"ISIN\",\n    permid: \"PermID\",\n    lei: \"LEI\",\n    ticker: \"Ticker\",\n    duns: \"DUNS\",\n    eligiblecapex: \"Eligible CapEx\",\n    eligibleopex: \"Eligible OpEx\",\n    alignedcapex: \"Aligned CapEx\",\n    alignedopex: \"Aligned OpEx\",\n    insuranceorreinsurance: \"Insurance or Reinsurance\",\n    annualreport: \"Annual Report\",\n    sustainabilityreport: \"Sustainability Report\",\n    integratedreport: \"Integrated Report\",\n    esefreport: \"ESEF Report\",\n    yes: \"Yes\",\n    no: \"No\",\n    na: \"N/A\",\n    \"eutaxonomy-financials\": \"EU Taxonomy for financial companies\",\n    \"eutaxonomy-non-financials\": \"EU Taxonomy for non-financial companies\",\n    lksg: \"LkSG\",\n    sfdr: \"SFDR\",\n    sme: \"SME\",\n    p2p: \"WWF Pathway to Paris\",\n    inhouseproduction: \"In-house Production\",\n    contractprocessing: \"Contract Processing\",\n    hvcplastics: \"HVC Plastics\",\n  };\n  const lowerCaseText = rawText.toLowerCase();\n  return lowerCaseText in mappingObject ? mappingObject[lowerCaseText] : \"\";\n}\n\n/**\n * convert string or number to a human-readable string\n * @param rawInput is the string or number to be converted to a human-readable string\n * @returns the converted string\n */\nexport function humanizeStringOrNumber(rawInput: string | number | null | undefined): string {\n  if (typeof rawInput === \"number\") {\n    return rawInput.toString();\n  }\n  if (!rawInput) {\n    return \"\";\n  }\n  const resultOfCustomMappingHumanisation = humanizeViaMapping(rawInput);\n  return resultOfCustomMappingHumanisation == \"\"\n    ? convertCamelCaseToSentenceCase(rawInput)\n    : resultOfCustomMappingHumanisation;\n}\n"],"names":["convertCamelCaseToSentenceCase","rawText","processedText","humanizeViaMapping","mappingObject","lowerCaseText","humanizeStringOrNumber","rawInput","resultOfCustomMappingHumanisation"],"mappings":"AASA,SAASA,EAA+BC,EAAyB,CAE/D,MAAMC,EAAgBD,EAAQ,QAAQ,gBAAiB,KAAK,EAErD,OAAAC,EAAc,OAAO,CAAC,EAAE,cAAgBA,EAAc,MAAM,CAAC,CACtE,CAOA,SAASC,EAAmBF,EAAyB,CACnD,MAAMG,EAA2C,CAC/C,KAAM,OACN,OAAQ,SACR,IAAK,MACL,OAAQ,SACR,KAAM,OACN,cAAe,iBACf,aAAc,gBACd,aAAc,gBACd,YAAa,eACb,uBAAwB,2BACxB,aAAc,gBACd,qBAAsB,wBACtB,iBAAkB,oBAClB,WAAY,cACZ,IAAK,MACL,GAAI,KACJ,GAAI,MACJ,wBAAyB,sCACzB,4BAA6B,0CAC7B,KAAM,OACN,KAAM,OACN,IAAK,MACL,IAAK,uBACL,kBAAmB,sBACnB,mBAAoB,sBACpB,YAAa,cAAA,EAETC,EAAgBJ,EAAQ,cAC9B,OAAOI,KAAiBD,EAAgBA,EAAcC,CAAa,EAAI,EACzE,CAOO,SAASC,EAAuBC,EAAsD,CACvF,GAAA,OAAOA,GAAa,SACtB,OAAOA,EAAS,WAElB,GAAI,CAACA,EACI,MAAA,GAEH,MAAAC,EAAoCL,EAAmBI,CAAQ,EACrE,OAAOC,GAAqC,GACxCR,EAA+BO,CAAQ,EACvCC,CACN"}