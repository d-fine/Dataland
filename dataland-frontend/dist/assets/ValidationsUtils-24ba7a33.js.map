{"version":3,"file":"ValidationsUtils-24ba7a33.js","sources":["../../src/components/forms/parts/elements/basic/UploadFormHeader.vue","../../src/utils/UpdateObjectUtils.ts","../../src/utils/ValidationsUtils.ts"],"sourcesContent":["<template>\n  <div class=\"form-field-label\">\n    <h5>{{ label }}</h5>\n    <span class=\"asterisk\" v-if=\"isRequired\">*</span>\n    <em\n      v-if=\"description !== ''\"\n      class=\"material-icons info-icon\"\n      aria-hidden=\"true\"\n      :title=\"label\"\n      v-tooltip.top=\"{\n        value: description,\n      }\"\n      >info</em\n    >\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Tooltip from \"primevue/tooltip\";\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  name: \"UploadFormHeader\",\n  directives: {\n    tooltip: Tooltip,\n  },\n  props: {\n    label: {\n      type: String,\n      required: true,\n    },\n    description: {\n      type: String,\n      required: true,\n    },\n    isRequired: {\n      type: Boolean,\n      default: false,\n    },\n  },\n});\n</script>\n","export type ObjectType = { [key: string]: string | object };\n\n/**\n * Updates keys from one object to another\n * @param baseObject object to be updated\n * @param objectWithNewData object to be updated\n */\nexport function updateObject(baseObject: ObjectType, objectWithNewData: ObjectType): void {\n  for (const key in objectWithNewData) {\n    if (typeof objectWithNewData[key] === \"object\" && objectWithNewData[key] !== null) {\n      if (baseObject[key]) {\n        updateObject(baseObject[key] as unknown as ObjectType, objectWithNewData[key] as unknown as ObjectType);\n      } else {\n        baseObject[key] = {};\n        updateObject(baseObject[key] as unknown as ObjectType, objectWithNewData[key] as unknown as ObjectType);\n      }\n    } else if (objectWithNewData[key] !== null) {\n      baseObject[key] = objectWithNewData[key];\n    }\n  }\n}\n\n/**\n * Changes the \"value\" named properties of an object from decimals to percentages\n * to maintain different number formatting between backend and frontend\n * @param obj object in which it is looking for the \"value\" properties to change\n * @returns the modified object\n */\nexport function convertValuesFromDecimalsToPercentages(obj: ObjectType): ObjectType {\n  const objectModified = obj;\n  for (const key in objectModified) {\n    if ((key === \"value\" || key === \"valueAsPercentage\") && objectModified[key]) {\n      objectModified[key] = (Math.round(+objectModified[key] * 100 * 100) / 100).toString();\n    } else if (typeof objectModified[key] === \"object\" && key !== \"totalAmount\") {\n      convertValuesFromDecimalsToPercentages(objectModified[key] as unknown as ObjectType);\n    }\n  }\n  return objectModified;\n}\n\n/**\n * Changes the \"value\" named properties of an object from percentages to decimals\n * to maintain different number formatting between backend and frontend\n * @param obj object in which it is looking for the \"value\" properties to change\n * @returns the modified object\n */\nexport function convertValuesFromPercentagesToDecimals(obj: ObjectType): ObjectType {\n  const objectModified = obj;\n  for (const key in objectModified) {\n    if ((key === \"value\" || key === \"valueAsPercentage\") && objectModified[key]) {\n      objectModified[key] = (Math.round(+objectModified[key] * 100) / 100 / 100).toString();\n    } else if (typeof objectModified[key] === \"object\" && key !== \"totalAmount\") {\n      convertValuesFromPercentagesToDecimals(objectModified[key] as unknown as ObjectType);\n    }\n  }\n  return objectModified;\n}\n\n/**\n * A recursive function that is able to retrieve all values for a provided key in an arbitrarily deeply nested object.\n * Example: the datasource.reference in the EUTaxonomyDataModel occurs for several data points and you might want to get\n * a list of all references in one dataset.\n * @param [obj] object in which it is looking for the value to change\n * @param [keyToFind] the key which is to be found\n * @returns all the values corresponding to the key\n */\nexport function findAllValuesForKey(obj: ObjectType, keyToFind: string): Array<string> {\n  return Object.entries(obj).reduce((acc: Array<string>, [key, value]) => {\n    if (key === keyToFind) {\n      return acc.concat(value as string);\n    } else if (typeof value === \"object\" && value != null) {\n      return acc.concat(findAllValuesForKey(value as ObjectType, keyToFind));\n    } else {\n      return acc;\n    }\n  }, []);\n}\n\n/**\n * Drops all nulls from arbitrarily nested object by stringifying it and parsing it back to object\n * It does not work in the case of the value being of type Array<null>!\n * @param obj the object that needs the nulls dropped\n * @returns the object without all keys with undefined or null value\n */\nexport function objectDropNull(obj: ObjectType): ObjectType {\n  return JSON.parse(\n    JSON.stringify(obj, (key, value: string | number) => {\n      return value ?? undefined;\n    }),\n  ) as ObjectType;\n}\n\n/**\n * Utility function to create a deep copy by parsing it to Json and parsing it back.\n * @param obj the object to be deep copied\n * @returns the deep copied object\n */\nexport function deepCopyObject(obj: ObjectType): ObjectType {\n  return JSON.parse(JSON.stringify(obj)) as ObjectType;\n}\n","import { type FormKitNode } from \"@formkit/core\";\nimport { findAllValuesForKey, type ObjectType } from \"@/utils/UpdateObjectUtils\";\n\n/**\n * Checks which inputs are not filled correctly\n * @param node - single form field\n */\nexport function checkCustomInputs(node: FormKitNode): void {\n  const invalidElements: HTMLElement[] = [];\n  node.walk((child: FormKitNode) => {\n    // Check if this child has errors\n    if ((child.ledger.value(\"blocking\") || child.ledger.value(\"errors\")) && child.type !== \"group\") {\n      // We found an input with validation errors\n      if (typeof child.props.id === \"string\") {\n        const invalidElement = document.getElementById(child.props.id);\n        if (invalidElement) {\n          invalidElements.push(invalidElement);\n        }\n      }\n    }\n  }, true);\n  invalidElements.find((el) => el !== null)?.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n}\n\n/**\n * checks if all reports that shall be uploaded are used as a data source at least once\n * @param [dataModel] the data model that has a field for referenced reports, named 'report'\n * @param [uploadedReports] the list of reports that were uploaded via form\n * returns nothing but throws an error if not all reports are referenced\n */\nexport function checkIfAllUploadedReportsAreReferencedInDataModel(\n  dataModel: ObjectType,\n  uploadedReports: string[],\n): void {\n  const referencedReports = findAllValuesForKey(dataModel, \"report\");\n  const unusedReports: string[] = [];\n  uploadedReports.forEach((report) => {\n    if (!referencedReports.some((refReport) => refReport === report)) {\n      unusedReports.push(report);\n    }\n  });\n  if (unusedReports.length >= 1) {\n    const uploadReportComponent = document.getElementById(\"uploadReports\");\n    if (uploadReportComponent) {\n      uploadReportComponent.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n    }\n    throw new Error(\n      `Not all uploaded reports are used as a data source. Please remove following reports, or use them as a data source: ${unusedReports.toString()}`,\n    );\n  }\n}\n\n/**\n * Checks if for a given validation the corresponding formkit field requires some input\n * @param validation the formkit validation string\n * @returns true if the validation string contains required else false\n */\nexport function isInputRequired(validation?: string): boolean {\n  return validation?.includes(\"required\") ?? false;\n}\n"],"names":["_sfc_main","defineComponent","Tooltip","_hoisted_2","_directive_tooltip","_resolveDirective","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_ctx","_createCommentVNode","updateObject","baseObject","objectWithNewData","key","convertValuesFromDecimalsToPercentages","obj","objectModified","convertValuesFromPercentagesToDecimals","findAllValuesForKey","keyToFind","acc","value","objectDropNull","deepCopyObject","checkCustomInputs","node","invalidElements","child","invalidElement","_a","el","checkIfAllUploadedReportsAreReferencedInDataModel","dataModel","uploadedReports","referencedReports","unusedReports","report","refReport","uploadReportComponent"],"mappings":"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"}