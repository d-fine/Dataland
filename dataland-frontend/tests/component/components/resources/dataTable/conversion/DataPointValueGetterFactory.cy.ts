import { type Field } from "@/utils/GenericFrameworkTypes";
import { type ExtendedDataPointBigDecimal } from "@clients/backend";
import { dataPointValueGetterFactory } from "@/components/resources/dataTable/conversion/DataPointValueGetterFactory";
import {
  MLDTDisplayObjectForEmptyString,
  MLDTDisplayComponentName,
  type MLDTDisplayObject,
} from "@/components/resources/dataTable/MultiLayerDataTableCellDisplayer";
describe("Unit test for the DataPointValueGetterFactory", () => {
  describe("Tests when the unit is pre-determined in the data model", () => {
    const field: Field = {
      name: "emissionsToWater",
      label: "Emissions To Water",
      description: "Tonnes of Emissions To Water generated by the company.",
      unit: "Tonnes",
      component: "DataPointFormField",
      evidenceDesired: true,
      required: false,
      showIf: (): boolean => true,
    };

    it("An empty string should be displayed if the data point is undefined", () => {
      const dataset = { data: undefined };
      const value = dataPointValueGetterFactory("data", field)(dataset);
      expect(value).to.deep.equal(MLDTDisplayObjectForEmptyString);
    });

    it("An empty string should be displayed if the data points value is undefined or null", () => {
      const datapoint: ExtendedDataPointBigDecimal = {
        value: undefined,
        quality: "NA",
      };
      const dataset = { data: datapoint };
      const value = dataPointValueGetterFactory("data", field)(dataset);
      expect(value).to.deep.equal(MLDTDisplayObjectForEmptyString);
    });

    it("Throw Error if there is no document referenced in this dataset but referenced in DataPoint", () => {
      const datapoint: ExtendedDataPointBigDecimal = {
        value: 321,
        quality: "NA",
        dataSource: {
          fileReference: "referencedFile1234ABCD",
          fileName: "1234ABCD",
        },
      };
      const dataset = { data: datapoint };
      cy.wrap(() => {
        dataPointValueGetterFactory("data", field)(dataset);
      }).should("throw");
    });

    it("The value should be displayed with a static unit suffix if set", () => {
      const datapoint: ExtendedDataPointBigDecimal = {
        value: 123,
        quality: "NA",
      };
      const dataset = { data: datapoint };
      const value = dataPointValueGetterFactory("data", field)(dataset);
      expect(value).to.deep.equal(<MLDTDisplayObject<MLDTDisplayComponentName.StringDisplayComponent>>{
        displayComponentName: MLDTDisplayComponentName.StringDisplayComponent,
        displayValue: "123 Tonnes",
      });
    });
  });

  describe("Tests when the unit is pre-determined in the data model", () => {
    const field: Field = {
      name: "emissionsToWater",
      label: "Emissions To Water",
      description: "Tonnes of Emissions To Water generated by the company.",
      component: "DataPointFormField",
      options: [
        {
          label: "Unit-A",
          value: "A",
        },
        {
          label: "Unit-B",
          value: "B",
        },
      ],
      evidenceDesired: true,
      required: false,
      showIf: (): boolean => true,
    };

    it("The value should be displayed with no unit suffix if no unit is provided", () => {
      const datapoint: ExtendedDataPointBigDecimal = {
        value: 123,
        quality: "NA",
      };
      const dataset = { data: datapoint };
      const value = dataPointValueGetterFactory("data", field)(dataset);
      expect(value).to.deep.equal(<MLDTDisplayObject<MLDTDisplayComponentName.StringDisplayComponent>>{
        displayComponentName: MLDTDisplayComponentName.StringDisplayComponent,
        displayValue: "123",
      });
    });
  });
});
