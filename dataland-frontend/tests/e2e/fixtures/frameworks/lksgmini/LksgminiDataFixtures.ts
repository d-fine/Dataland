// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from '@e2e/utils/FakeFixtureUtils';
import { type FixtureData } from '@sharedUtils/Fixtures';
import { LksgminiGenerator } from '@e2e/fixtures/frameworks/lksgmini/LksgminiGenerator';
import { generateNaceCodes } from '@e2e/fixtures/common/NaceCodeFixtures';
import { generateFixtureDataset } from '@e2e/fixtures/FixtureUtils';
import { type LksgminiData } from '@clients/backend';

/**
 * Generates a set number of lksgmini fixtures
 * @param numFixtures the number of lksgmini fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of lksgmini fixtures
 */
export function generateLksgminiFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY
): FixtureData<LksgminiData>[] {
  return generateFixtureDataset<LksgminiData>(() => generateLksgminiData(nullProbability), numFixtures);
}

/**
 * Generates a random lksgmini dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random lksgmini dataset
 */
export function generateLksgminiData(nullProbability = DEFAULT_PROBABILITY): LksgminiData {
  const dataGenerator = new LksgminiGenerator(nullProbability);
  return {
    general: {
      masterData: {
        dataDate: dataGenerator.guaranteedFutureDate(),
        headOfficeInGermany: dataGenerator.randomYesNo(),
        groupOfCompanies: dataGenerator.randomYesNo(),
        groupOfCompaniesName: dataGenerator.randomShortString(),
        industry: dataGenerator.valueOrNull(generateNaceCodes()),
      },
    },
    governance: {
      generalViolations: {
        legalProceedings: dataGenerator.randomYesNo(),
        humanRightsOrEnvironmentalViolations: dataGenerator.randomYesNo(),
      },
    },
  };
}
