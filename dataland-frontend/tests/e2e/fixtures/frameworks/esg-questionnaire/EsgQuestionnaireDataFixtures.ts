// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from '@e2e/utils/FakeFixtureUtils';
import { type FixtureData } from '@sharedUtils/Fixtures';
import { EsgQuestionnaireGenerator } from '@e2e/fixtures/frameworks/esg-questionnaire/EsgQuestionnaireGenerator';
import {
  pickSubsetOfElements,
  pickOneElement,
  generateArray,
  generateFixtureDataset,
} from '@e2e/fixtures/FixtureUtils';
import {
  EsgQuestionnaireSozialesAuditArtDesAuditsOptions,
  Activity,
  EsgQuestionnaireUmweltTaxonomieTaxonomieBerichterstattungOptions,
  EsgQuestionnaireAllgemeinRechtsstreitigkeitenStatusZuGOptions,
  EsgQuestionnaireAllgemeinRechtsstreitigkeitenStatusZuSOptions,
  EsgQuestionnaireAllgemeinRechtsstreitigkeitenStatusZuEOptions,
  EsgQuestionnaireAllgemeinFuehrungsstandardsAnreizmechanismenFuerDasManagementSozialesOptions,
  EsgQuestionnaireAllgemeinFuehrungsstandardsAnreizmechanismenFuerDasManagementUmweltOptions,
  type EsgQuestionnaireData,
} from '@clients/backend';
import { generateNaceCodes } from '@e2e/fixtures/common/NaceCodeFixtures';

/**
 * Generates a set number of esg-questionnaire fixtures
 * @param numFixtures the number of esg-questionnaire fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of esg-questionnaire fixtures
 */
export function generateEsgQuestionnaireFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY
): FixtureData<EsgQuestionnaireData>[] {
  return generateFixtureDataset<EsgQuestionnaireData>(() => generateEsgQuestionnaireData(nullProbability), numFixtures);
}

/**
 * Generates a random esg-questionnaire dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random esg-questionnaire dataset
 */
export function generateEsgQuestionnaireData(nullProbability = DEFAULT_PROBABILITY): EsgQuestionnaireData {
  const dataGenerator = new EsgQuestionnaireGenerator(nullProbability);
  return {
    general: {
      masterData: {
        berichtspflichtUndEinwilligungZurVeroeffentlichung: dataGenerator.guaranteedYesNo(),
        gueltigkeitsDatum: dataGenerator.dataDate,
      },
    },
    allgemein: {
      generelleEsgStrategie: {
        nachhaltigkeitsstrategieVorhanden: dataGenerator.randomYesNo(),
        dokumenteZurNachhaltigkeitsstrategie: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0)
        ),
        massnahmenBezueglich15GradCelsiusZielVorhanden: dataGenerator.randomYesNo(),
        beschreibungMassnahmenBezueglich15GradCelsiusZiel: dataGenerator.randomParagraphs(),
        zugewieseneBudgetsBis2030: dataGenerator.randomFloat(),
        zugewieseneBudgetsAb2031: dataGenerator.randomFloat(),
        erwarteterFinanzierungsbedarfBis2030: dataGenerator.randomFloat(),
        erwarteterFinanzierungsbedarfAb2031: dataGenerator.randomFloat(),
        geplanteVollzeitaequivalenteBis2023: dataGenerator.randomFloat(),
        geplanteVollzeitaequivalenteAb2031: dataGenerator.randomFloat(),
        chancenOderHindernisse: dataGenerator.randomParagraphs(),
      },
      taxonomieKpisAndBestimmteAktivitaeten: {
        wirtschaftszweige: dataGenerator.valueOrNull(generateNaceCodes()),
        gesamtumsatz: dataGenerator.randomFloat(),
        taxonomiefaehigerUmsatz: dataGenerator.randomFloat(),
        taxonomiekonformerUmsatz: dataGenerator.randomFloat(),
        gesamtCapex: dataGenerator.randomFloat(),
        taxonomiefaehigeCapex: dataGenerator.randomFloat(),
        taxonomiekonformeCapex: dataGenerator.randomFloat(),
        taxonomiebezogeneCapexPlanungVorhanden: dataGenerator.randomYesNo(),
        geplanteTaxonomiefaehigeCapexIn5Jahren: dataGenerator.randomPercentageValue(),
        geplanteTaxonomiekonformeCapexIn5Jahren: dataGenerator.randomPercentageValue(),
        aktivitaetImSektorFossileBrennstoffe: dataGenerator.randomYesNo(),
        aktuellerProzentualerUmsatzanteilImSektorFossileBrennstoffe: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorFossileBrennstoffeIn2030: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorFossileBrennstoffeIn2040: dataGenerator.randomPercentageValue(),
        aktivitaetImSektorHerstellungVonChemikalien: dataGenerator.randomYesNo(),
        aktuellerProzentualerUmsatzanteilImSektorHerstellungVonChemikalien: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorHerstellungVonChemikalienIn2030: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorHerstellungVonChemikalienIn2040: dataGenerator.randomPercentageValue(),
        aktivitaetImSektorUmstritteneWaffen: dataGenerator.randomYesNo(),
        aktuellerProzentualerUmsatzanteilImSektorUmstritteneWaffen: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorUmstritteneWaffenIn2030: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorUmstritteneWaffenIn2040: dataGenerator.randomPercentageValue(),
        aktivitaetImSektorTabakanbauUndVerarbeitung: dataGenerator.randomYesNo(),
        aktuellerProzentualerUmsatzanteilImSektorTabakanbauUndVerarbeitung: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorTabakanbauUndVerarbeitungIn2030: dataGenerator.randomPercentageValue(),
        geplanterProzentualerUmsatzanteilImSektorTabakanbauUndVerarbeitungIn2040: dataGenerator.randomPercentageValue(),
      },
      esgRatingAndZertifizierung: {
        esgRating: dataGenerator.randomYesNo(),
        ratingagentur: dataGenerator.randomShortString(),
        ergebnisDesEsgRatings: dataGenerator.randomShortString(),
        ratingbericht: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso14001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso45001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso27001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso50001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso14040Ivm14044: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso14064: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        emas: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
      },
      unGlobalCompactPrinzipien: {
        mechanismenZurUeberwachungDerEinhaltungDerUngcp: dataGenerator.randomYesNo(),
        richtlinienZurEinhaltungDerUngcp: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0)
        ),
        erklaerungDerEinhaltungDerUngcp: dataGenerator.randomParagraphs(),
      },
      oecdLeitsaetze: {
        mechanismenZurUeberwachungDerEinhaltungDerOecdLeitsaetze: dataGenerator.randomYesNo(),
        richtlinienZurEinhaltungDerOecdLeitsaetze: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0)
        ),
        erklaerungDerEinhaltungDerOecdLeitsaetze: dataGenerator.randomParagraphs(),
      },
      sonstige: {
        ausrichtungAufDieUnSdgsUndAktivesVerfolgen: dataGenerator.randomParagraphs(),
        ausschlusslistenAufBasisVonEsgKriterien: dataGenerator.randomYesNo(),
        ausschlusslisten: dataGenerator.randomParagraphs(),
      },
      fuehrungsstandards: {
        oekologischeSozialeFuehrungsstandardsOderPrinzipien: dataGenerator.randomYesNo(),
        anreizmechanismenFuerDasManagementUmwelt: dataGenerator.valueOrNull(
          pickOneElement(
            Object.values(EsgQuestionnaireAllgemeinFuehrungsstandardsAnreizmechanismenFuerDasManagementUmweltOptions)
          )
        ),
        anreizmechanismenFuerDasManagementSoziales: dataGenerator.valueOrNull(
          pickOneElement(
            Object.values(EsgQuestionnaireAllgemeinFuehrungsstandardsAnreizmechanismenFuerDasManagementSozialesOptions)
          )
        ),
      },
      rechtsstreitigkeiten: {
        esgBezogeneRechtsstreitigkeiten: dataGenerator.randomYesNo(),
        rechtsstreitigkeitenMitBezugZuE: dataGenerator.randomYesNo(),
        statusZuE: dataGenerator.valueOrNull(
          pickOneElement(Object.values(EsgQuestionnaireAllgemeinRechtsstreitigkeitenStatusZuEOptions))
        ),
        einzelheitenZuDenRechtsstreitigkeitenZuE: dataGenerator.randomParagraphs(),
        rechtsstreitigkeitenMitBezugZuS: dataGenerator.randomYesNo(),
        statusZuS: dataGenerator.valueOrNull(
          pickOneElement(Object.values(EsgQuestionnaireAllgemeinRechtsstreitigkeitenStatusZuSOptions))
        ),
        einzelheitenZuDenRechtsstreitigkeitenZuS: dataGenerator.randomParagraphs(),
        rechtsstreitigkeitenMitBezugZuG: dataGenerator.randomYesNo(),
        statusZuG: dataGenerator.valueOrNull(
          pickOneElement(Object.values(EsgQuestionnaireAllgemeinRechtsstreitigkeitenStatusZuGOptions))
        ),
        einzelheitenZuDenRechtsstreitigkeitenZuG: dataGenerator.randomParagraphs(),
      },
      rating: {
        esgRating: dataGenerator.randomYesNo(),
        agentur: dataGenerator.randomShortString(),
        ergebnis: dataGenerator.randomShortString(),
        ratingbericht: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        kritischePunkte: dataGenerator.randomParagraphs(),
      },
      anleihen: {
        grueneSozialeUndOderNachhaltigeEmissionen: dataGenerator.randomYesNo(),
        ausstehendeGrueneSozialeUndOderNachhaltigeEmissionen: dataGenerator.randomFloat(),
        sustainibilityLinkedDebt: dataGenerator.randomYesNo(),
        ausstehendeSustainibilityLinkedDebt: dataGenerator.randomFloat(),
      },
      risiken: {
        wichtigsteESUndGRisikenUndBewertung: dataGenerator.randomParagraphs(),
        hindernisseBeimUmgangMitEsgBedenken: dataGenerator.randomParagraphs(),
      },
    },
    umwelt: {
      treibhausgasemissionen: {
        treibhausgasBerichterstattungUndPrognosen: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['scope1', 'scope2', 'scope3'],
          3,
          3
        ),
        treibhausgasEmissionsintensitaetDerUnternehmenInDieInvestiertWird: dataGenerator.randomParagraphs(),
        strategieUndZieleZurReduzierungVonTreibhausgasEmissionen: dataGenerator.randomParagraphs(),
      },
      produktion: {
        produkteZurVerringerungDerUmweltbelastung: dataGenerator.randomYesNo(),
        verringerungenDerUmweltbelastung: dataGenerator.randomParagraphs(),
        oekologischerMindestStandardFuerProduktionsprozesse: dataGenerator.randomYesNo(),
      },
      energieverbrauch: {
        berichterstattungEnergieverbrauch: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['energieverbrauch', 'prozentDesVerbrauchsErneuerbarerEnergien', 'ggfProzentDerErneuerbarenEnergieerzeugung'],
          3,
          3
        ),
        unternehmensGruppenStrategieBzglEnergieverbrauch: dataGenerator.randomParagraphs(),
      },
      energieeffizienzImmobilienanlagen: {
        berichterstattungEnergieverbrauchVonImmobilienvermoegen: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['engagementAnteilInEnergieineffizientenImmobilienanlagen'],
          3,
          3
        ),
        unternehmensGruppenStrategieBzglEnergieeffizientenImmobilienanlagen: dataGenerator.randomParagraphs(),
      },
      wasserverbrauch: {
        berichterstattungWasserverbrauch: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['wasserverbrauch', 'emissionenInWasser'],
          3,
          3
        ),
        unternehmensGruppenStrategieBzglWasserverbrauch: dataGenerator.randomParagraphs(),
      },
      abfallproduktion: {
        berichterstattungAbfallproduktion: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['gesamteAbfallmenge', 'prozentAbfallRecyclet', 'prozentGefaehrlicherAbfall'],
          3,
          3
        ),
        unternehmensGruppenStrategieBzglAbfallproduktion: dataGenerator.randomParagraphs(),
        recyclingImProduktionsprozess: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['prozentRecycelteWerkstoffeImProduktionsprozess'],
          3,
          3
        ),
        gefaehrlicherAbfall: dataGenerator.randomParagraphs(),
      },
      biodiversitaet: {
        negativeAktivitaetenFuerDieBiologischeVielfalt: dataGenerator.randomYesNo(),
        negativeMassnahmenFuerDieBiologischeVielfalt: dataGenerator.randomParagraphs(),
        positiveAktivitaetenFuerDieBiologischeVielfalt: dataGenerator.randomYesNo(),
        positiveMassnahmenFuerDieBiologischeVielfalt: dataGenerator.randomParagraphs(),
      },
      fossileBrennstoffe: {
        einnahmenAusFossilenBrennstoffen: dataGenerator.randomYesNo(),
        berichterstattungEinnahmenAusFossilenBrennstoffen: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['prozentDerEinnahmenAusFossilenBrennstoffen'],
          3,
          3
        ),
      },
      taxonomie: {
        taxonomieBerichterstattung: dataGenerator.valueOrNull(
          pickOneElement(Object.values(EsgQuestionnaireUmweltTaxonomieTaxonomieBerichterstattungOptions))
        ),
        euTaxonomieKompassAktivitaeten: dataGenerator.valueOrNull(pickSubsetOfElements(Object.values(Activity))),
        umsatzInvestitionsaufwandFuerNachhaltigeAktivitaeten: dataGenerator.randomDecimalYearlyTimeseriesData(
          [
            'taxonomieGeeignetNachProzentUmsatz',
            'taxonomieGeeignetNachProzentCapex',
            'taxonomieKonformNachProzentUmsatz',
            'taxonomieKonformNachProzentCapex',
          ],
          3,
          3
        ),
      },
    },
    soziales: {
      unternehmensstrukturaenderungen: {
        vorhandenseinKuerzlicherAenderungenDerUnternehmensstruktur: dataGenerator.randomYesNo(),
        anzahlUnbefristeterVertraegeInDeutschland: dataGenerator.randomInt(),
        anzahlDerVonEinemVerkaufBetroffenenUnbefristetenVertraegeInDeutschland: dataGenerator.randomInt(),
        anzahlDerVonEinerAkquisitionBetroffenenUnbefristetenVertraegeInDeutschland: dataGenerator.randomInt(),
        anzahlUnbefristeterVertraegeInDerGesamtgruppe: dataGenerator.randomInt(),
        anzahlDerVonEinemVerkaufBetroffenenUnbefristetenVertraegeInDerGesamtgruppe: dataGenerator.randomInt(),
        anzahlDerVonEinerAkquisitionBetroffenenUnbefristetenVertraegeInDerGesamtgruppe: dataGenerator.randomInt(),
        auswirkungenAufAnteilBefristerVertraegeUndFluktuation: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['anzahlDerBefristetenVertraege', 'fluktuation'],
          3,
          0
        ),
      },
      sicherheitUndWeiterbildung: {
        sicherheitsmassnahmenFuerMitarbeiter: dataGenerator.randomParagraphs(),
        unfallrate: dataGenerator.randomDecimalYearlyTimeseriesData(
          ['haeufigkeitsrateVonArbeitsunfaellenMitZeitverlust'],
          3,
          0
        ),
        budgetFuerSchulungAusbildung: dataGenerator.randomDecimalYearlyTimeseriesData(['budgetProMitarbeiter'], 3, 0),
      },
      einkommensgleichheit: {
        ueberwachungDerEinkommensungleichheit: dataGenerator.randomDecimalYearlyTimeseriesData(
          [
            'unbereinigtesGeschlechtsspezifischesLohngefaelle',
            'einkommensungleichheitsverhaeltnis',
            'ceoEinkommensungleichheitsverhaeltnis',
          ],
          3,
          0
        ),
        massnahmenZurVerbesserungDerEinkommensungleichheit: dataGenerator.randomParagraphs(),
      },
      geschlechterdiversitaet: {
        mitarbeiterAufTopManagementEbene: dataGenerator.randomInt(),
        frauenAufTopManagementEbene: dataGenerator.randomInt(),
        mitgliederGeschaeftsfuehrung: dataGenerator.randomInt(),
        frauenInDerGeschaeftsfuehrung: dataGenerator.randomInt(),
        definitionTopManagement: dataGenerator.randomParagraphs(),
        einhaltungRechtlicherVorgaben: dataGenerator.randomParagraphs(),
      },
      audit: {
        auditsZurEinhaltungVonArbeitsstandards: dataGenerator.randomYesNo(),
        artDesAudits: dataGenerator.valueOrNull(
          pickOneElement(Object.values(EsgQuestionnaireSozialesAuditArtDesAuditsOptions))
        ),
        auditErgebnisse: dataGenerator.randomParagraphs(),
      },
    },
    unternehmensfuehrungGovernance: {
      aufsichtsrat: {
        anzahlDerMitgliederImAufsichtsrat: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImAufsichtsrat: dataGenerator.randomInt(),
        anzahlVonFrauenImAufsichtsrat: dataGenerator.randomInt(),
      },
      verguetungsausschuss: {
        anzahlDerMitgliederImVerguetungsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImVerguetungsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImVerguetungsausschuss: dataGenerator.randomInt(),
      },
      nominierungsausschuss: {
        anzahlDerMitgliederImNominierungsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImNominierungsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImVerguetungsausschuss: dataGenerator.randomInt(),
      },
      pruefungsausschuss: {
        anzahlDerMitgliederImPruefungsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImPruefungsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImPruefungsausschuss: dataGenerator.randomInt(),
      },
      nachhaltigkeitsausschuss: {
        anzahlDerMitgliederImNachhaltigkeitsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImNachhaltigkeitsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImNachhaltigkeitsausschuss: dataGenerator.randomInt(),
      },
      sonstige: {
        wirtschaftspruefer: dataGenerator.randomShortString(),
        trennungVonCeoOderVorsitzenden: dataGenerator.randomYesNo(),
        amtszeitBisZurTrennung: dataGenerator.randomInt(),
      },
      stakeholder: {
        einbeziehungVonStakeholdern: dataGenerator.randomYesNo(),
        prozessDerEinbeziehungVonStakeholdern: dataGenerator.randomParagraphs(),
        mechanismenZurAusrichtungAufStakeholder: dataGenerator.randomParagraphs(),
      },
      unternehmensrichtlinien: {
        veroeffentlichteUnternehmensrichtlinien: dataGenerator.valueOrNull(
          pickSubsetOfElements([
            'AntiKorruption',
            'Verhaltenskodex',
            'Interessenkonflikte',
            'Datenschutz',
            'DiversitaetAndInklusion',
            'FaireBehandlungVonKunden',
            'Zwangsarbeit',
            'GesundheitUndSicherheit',
            'MgtVonUmweltgefahren',
            'VerantwortungsvollesMarketing',
            'Whistleblowing',
            'Other',
          ])
        ),
        weitereVeroeffentlicheUnternehmensrichtlinien: dataGenerator.randomParagraphs(),
      },
      lieferantenauswahl: {
        esgKriterienUndUeberwachungDerLieferanten: dataGenerator.randomYesNo(),
        auswahlkriterien: dataGenerator.randomParagraphs(),
      },
    },
  };
}
