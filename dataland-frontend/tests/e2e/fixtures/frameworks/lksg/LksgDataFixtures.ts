// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { LksgGenerator } from "@e2e/fixtures/frameworks/lksg/LksgGenerator";
import { pickSubsetOfElements, pickOneElement, generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import {
  LksgGeneralProductionspecificMarketOptions,
  LksgGeneralMasterdataShareOfTemporaryWorkersOptions,
  type LksgData,
} from "@clients/backend";
import { generateNaceCodes } from "@e2e/fixtures/common/NaceCodeFixtures";

/**
 * Generates a set number of lksg fixtures
 * @param numFixtures the number of lksg fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of lksg fixtures
 */
export function generateLksgFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<LksgData>[] {
  return generateFixtureDataset<LksgData>(() => generateLksgData(nullProbability), numFixtures);
}

/**
 * Generates a random lksg dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random lksg dataset
 */
export function generateLksgData(nullProbability = DEFAULT_PROBABILITY): LksgData {
  const dataGenerator = new LksgGenerator(nullProbability);
  return {
    general: {
      masterData: {
        dataDate: dataGenerator.guaranteedFutureDate(),
        headOfficeInGermany: dataGenerator.randomYesNo(),
        groupOfCompanies: dataGenerator.randomYesNo(),
        groupOfCompaniesName: dataGenerator.randomShortString(),
        industry: dataGenerator.valueOrNull(generateNaceCodes()),
        numberOfEmployees: dataGenerator.randomFloat(0),
        seasonalOrMigrantWorkers: dataGenerator.randomYesNo(),
        shareOfTemporaryWorkers: dataGenerator.valueOrNull(
          pickOneElement(Object.values(LksgGeneralMasterdataShareOfTemporaryWorkersOptions)),
        ),
        annualTotalRevenue: dataGenerator.valueOrNull(dataGenerator.generateAmountWithCurrency()),
        fixedAndWorkingCapital: dataGenerator.valueOrNull(dataGenerator.generateAmountWithCurrency()),
      },
      productionSpecific: {
        manufacturingCompany: dataGenerator.randomYesNo(),
        capacity: dataGenerator.randomShortString(),
        productionViaSubcontracting: dataGenerator.randomYesNo(),
        subcontractingCompaniesCountries: dataGenerator.valueOrNull(dataGenerator.generateSubcontractingCompanies()),
        productionSites: dataGenerator.randomYesNo(),
        numberOfProductionSites: dataGenerator.randomFloat(),
        listOfProductionSites: dataGenerator.randomArray(() => dataGenerator.generateLksgProductionSite(), 0, 5),
        market: dataGenerator.valueOrNull(pickOneElement(Object.values(LksgGeneralProductionspecificMarketOptions))),
        specificProcurement: dataGenerator.valueOrNull(
          pickSubsetOfElements([
            "ShortLivedAndChangingBusinessRelationships",
            "HighPricePressure",
            "TightlyTimedOrShortTermAdjustedDeliveryDeadlinesAndConditionsWithSuppliers",
            "NoneOfTheAbove",
          ]),
        ),
      },
      productionSpecificOwnOperations: {
        mostImportantProducts: dataGenerator.randomArray(() => dataGenerator.generateLksgProduct(), 0, 10),
        procurementCategories: dataGenerator.valueOrNull(dataGenerator.generateProcurementCategories()),
      },
    },
    governance: {
      riskManagementOwnOperations: {
        riskManagementSystem: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        riskAnalysisInFiscalYear: dataGenerator.randomYesNo(),
        risksIdentified: dataGenerator.randomYesNo(),
        identifiedRisks: dataGenerator.randomArray(() => dataGenerator.generateLksgRiskOrViolationAssessment(), 1, 5),
        regulatedRiskManagementResponsibility: dataGenerator.randomYesNo(),
      },
      grievanceMechanismOwnOperations: {
        grievanceHandlingMechanism: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        grievanceHandlingReportingAccessible: dataGenerator.randomYesNo(),
        appropriateGrievanceHandlingInformation: dataGenerator.randomYesNo(),
        appropriateGrievanceHandlingSupport: dataGenerator.randomYesNo(),
        accessToExpertiseForGrievanceHandling: dataGenerator.randomYesNo(),
        grievanceComplaints: dataGenerator.randomYesNo(),
        complaintsNumber: dataGenerator.randomFloat(0),
        complaintsRiskPosition: dataGenerator.randomArray(
          () => dataGenerator.generateLksgGrievanceMechanismAssessment(),
          1,
          5,
        ),
        publicAccessToGrievanceHandling: dataGenerator.randomYesNo(),
        whistleblowerProtection: dataGenerator.randomYesNo(),
        dueDiligenceProcessForGrievanceHandling: dataGenerator.randomYesNo(),
      },
      certificationsPoliciesAndResponsibilities: {
        codeOfConduct: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        codeOfConductTraining: dataGenerator.randomYesNo(),
        supplierCodeOfConduct: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        policyStatement: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        humanRightsStrategy: dataGenerator.randomShortString(),
        environmentalImpactPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        fairWorkingConditionsPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        responsibilitiesForFairWorkingConditions: dataGenerator.randomYesNo(),
        responsibilitiesForTheEnvironment: dataGenerator.randomYesNo(),
        responsibilitiesForOccupationalSafety: dataGenerator.randomYesNo(),
        amforiBsci: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        betterWorkProgram: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        ecoManagementAndAuditSchemeEmas: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        flaFairLaborCodeAndComplianceBenchmarksForAgriculture: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        flaFairLaborCodeAndComplianceBenchmarksForManufacturing: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        fairtradeTraderStandard: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        globalOrganicTextileStandardGots: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        gotsOrganicInConversion: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iatf16949: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso10007: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso14001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso20400: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso26000: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso31000: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso37001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso37002: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso37301: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso44001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso45001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso50001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso9001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        isoIec27001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        isoIecTs33061: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        isoIecIeee15288: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        naturlandStandards: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        responsibleBusinessAlliance: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        sa8000: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        sedexMembersEthicalTradeAuditSmeta: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        textileExchangeGlobalRecycledStandard: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        znuStandardNachhaltigerWirtschaften: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        additionalCertifications: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
      },
      generalViolations: {
        legalProceedings: dataGenerator.randomYesNo(),
        humanRightsOrEnvironmentalViolations: dataGenerator.randomYesNo(),
        humanRightsOrEnvironmentalViolationsDefinition: dataGenerator.randomArray(
          () => dataGenerator.generateLksgRiskOrViolationAssessment(),
          1,
          5,
        ),
        highRiskCountriesRawMaterials: dataGenerator.randomYesNo(),
        highRiskCountriesRawMaterialsLocation: dataGenerator.valueOrNull(
          pickSubsetOfElements(["DE", "AL", "AZ", "GB", "US", "DK"]),
        ),
        highRiskCountriesActivity: dataGenerator.randomYesNo(),
        highRiskCountries: dataGenerator.valueOrNull(pickSubsetOfElements(["DE", "AL", "AZ", "GB", "US", "DK"])),
        highRiskCountriesProcurement: dataGenerator.randomYesNo(),
        highRiskCountriesProcurementName: dataGenerator.valueOrNull(
          pickSubsetOfElements(["DE", "AL", "AZ", "GB", "US", "DK"]),
        ),
      },
    },
    social: {
      childLabor: {
        employeeSUnder18: dataGenerator.randomYesNo(),
        employeeSUnder15: dataGenerator.randomYesNo(),
        employeeSUnder18InApprenticeship: dataGenerator.randomYesNo(),
        worstFormsOfChildLabor: dataGenerator.randomYesNo(),
        worstFormsOfChildLaborProhibition: dataGenerator.randomYesNo(),
        worstFormsOfChildLaborForms: dataGenerator.randomShortString(),
        measuresForPreventionOfEmploymentUnderLocalMinimumAge: dataGenerator.randomYesNo(),
        employmentUnderLocalMinimumAgePreventionEmploymentContracts: dataGenerator.randomYesNo(),
        employmentUnderLocalMinimumAgePreventionJobDescription: dataGenerator.randomYesNo(),
        employmentUnderLocalMinimumAgePreventionIdentityDocuments: dataGenerator.randomYesNo(),
        employmentUnderLocalMinimumAgePreventionTraining: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        employmentUnderLocalMinimumAgePreventionCheckingOfLegalMinimumAge: dataGenerator.randomYesNo(),
        childLaborPreventionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        additionalChildLaborOtherMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        additionalChildLaborOtherMeasuresDescription: dataGenerator.randomShortString(),
      },
      forcedLaborSlavery: {
        forcedLaborAndSlaveryPractices: dataGenerator.randomYesNo(),
        forcedLaborAndSlaveryPracticesSpecification: dataGenerator.randomShortString(),
        forcedLaborAndSlaveryPreventionMeasures: dataGenerator.randomYesNo(),
        forcedLaborAndSlaveryPreventionEmploymentContracts: dataGenerator.randomYesNo(),
        forcedLaborAndSlaveryPreventionIdentityDocuments: dataGenerator.randomYesNo(),
        forcedLaborAndSlaveryPreventionFreeMovement: dataGenerator.randomYesNo(),
        forcedLaborAndSlaveryPreventionProvisionSocialRoomsAndToilets: dataGenerator.randomYesNo(),
        forcedLaborAndSlaveryPreventionTraining: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        forcedLaborPreventionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        forcedLaborAndSlaveryPreventionOtherMeasures: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        forcedLaborAndSlaveryPreventionOtherMeasuresDescription: dataGenerator.randomParagraphs(),
      },
      withholdingAdequateWages: {
        adequateWageWithholding: dataGenerator.randomYesNo(),
        adequateWagesMeasures: dataGenerator.randomYesNo(),
        documentedWorkingHoursAndWages: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        adequateLivingWage: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        regularWagesProcessFlow: dataGenerator.randomYesNo(),
        fixedHourlyWages: dataGenerator.randomYesNoNa(),
        fixedPieceworkWages: dataGenerator.randomYesNoNa(),
        adequateWageOtherMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        adequateWageOtherMeasuresDescription: dataGenerator.randomShortString(),
      },
      disregardForOccupationalHealthSafety: {
        lowSkillWork: dataGenerator.randomYesNo(),
        hazardousMachines: dataGenerator.randomYesNo(),
        oshMeasures: dataGenerator.randomYesNo(),
        oshPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        oshTraining: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        healthAndSafetyPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        otherOshMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        otherOshMeasuresDescription: dataGenerator.randomShortString(),
        under10WorkplaceAccidents: dataGenerator.randomYesNo(),
      },
      disregardForFreedomOfAssociation: {
        freedomOfAssociation: dataGenerator.randomYesNo(),
        employeeRepresentation: dataGenerator.randomPercentageValue(),
        freedomOfAssociationDisregardPrevention: dataGenerator.randomYesNo(),
        discriminationForTradeUnionMembers: dataGenerator.randomYesNo(),
        freedomOfOperationForTradeUnion: dataGenerator.randomYesNo(),
        freedomOfAssociationTraining: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        worksCouncil: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        freedomOfAssociationOtherMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        freedomOfAssociationOtherMeasuresDescription: dataGenerator.randomShortString(),
      },
      unequalTreatmentOfEmployment: {
        unequalTreatmentOfEmployment: dataGenerator.randomYesNo(),
        unequalTreatmentOfEmploymentPreventionMeasures: dataGenerator.randomYesNo(),
        diversityAndInclusionRole: dataGenerator.randomYesNo(),
        preventionOfMistreatments: dataGenerator.randomYesNo(),
        unequalTreatmentPreventionTraining: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        equalOpportunitiesOfficer: dataGenerator.randomYesNo(),
        equalEmploymentPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        unequalTreatmentPreventionOtherMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        unequalTreatmentPreventionOtherMeasuresDescription: dataGenerator.randomShortString(),
      },
      contaminationOfSoilWaterAirNoiseEmissionsExcessiveWaterConsumption: {
        harmfulSoilChange: dataGenerator.randomYesNo(),
        soilDegradation: dataGenerator.randomYesNo(),
        soilErosion: dataGenerator.randomYesNo(),
        soilBorneDiseases: dataGenerator.randomYesNo(),
        soilContamination: dataGenerator.randomYesNo(),
        soilSalinization: dataGenerator.randomYesNo(),
        soilProtectionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        soilSpotChecks: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        harmfulWaterPollution: dataGenerator.randomYesNo(),
        fertilizersOrPollutants: dataGenerator.randomYesNo(),
        wasteWaterFiltration: dataGenerator.randomYesNo(),
        waterProtectionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        waterSpotChecks: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        harmfulAirPollution: dataGenerator.randomYesNo(),
        airFiltration: dataGenerator.randomYesNo(),
        airQualityProtectionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        airQualitySpotChecks: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        harmfulNoiseEmission: dataGenerator.randomYesNo(),
        reductionOfNoiseEmissions: dataGenerator.randomYesNo(),
        noiseReductionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        noiseEmissionsSpotChecks: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        excessiveWaterConsumption: dataGenerator.randomYesNo(),
        waterSavingMeasures: dataGenerator.randomYesNo(),
        waterSavingMeasuresName: dataGenerator.randomShortString(),
        waterUseReductionPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        waterConsumptionSpotChecks: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        waterSources: dataGenerator.randomYesNo(),
        contaminationPreventionMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        contaminationPreventionMeasuresDescription: dataGenerator.randomShortString(),
      },
      unlawfulEvictionDeprivationOfLandForestAndWater: {
        unlawfulEvictionAndTakingOfLand: dataGenerator.randomYesNo(),
        unlawfulEvictionAndTakingOfLandRisk: dataGenerator.randomShortString(),
        unlawfulEvictionAndTakingOfLandMeasures: dataGenerator.randomYesNo(),
        modelContractsForLandPurchaseOrLeasing: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        involvementOfLocalsInDecisionMaking: dataGenerator.randomYesNo(),
        governanceOfTenurePolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        unlawfulEvictionAndTakingOfLandOtherMeasures: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        unlawfulEvictionAndTakingOfLandOtherMeasuresDescription: dataGenerator.randomShortString(),
        voluntaryGuidelinesOnTheResponsibleGovernanceOfTenure: dataGenerator.randomYesNo(),
      },
      useOfPrivatePublicSecurityForcesWithDisregardForHumanRights: {
        useOfPrivatePublicSecurityForces: dataGenerator.randomYesNo(),
        useOfPrivatePublicSecurityForcesAndRiskOfViolationOfHumanRights: dataGenerator.randomYesNo(),
        instructionOfSecurityForces: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        humanRightsTraining: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        stateSecurityForces: dataGenerator.randomYesNoNa(),
        privateSecurityForces: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNoNa()),
        useOfPrivatePublicSecurityForcesMeasures: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        useOfPrivatePublicSecurityForcesMeasuresDescription: dataGenerator.randomParagraphs(),
      },
    },
    environmental: {
      useOfMercuryMercuryWasteMinamataConvention: {
        mercuryAndMercuryWasteHandling: dataGenerator.randomYesNo(),
        mercuryAddedProductsHandling: dataGenerator.randomYesNo(),
        mercuryAddedProductsHandlingRiskOfExposure: dataGenerator.randomYesNo(),
        mercuryAddedProductsHandlingRiskOfDisposal: dataGenerator.randomYesNo(),
        mercuryAndMercuryCompoundsProductionAndUse: dataGenerator.randomYesNo(),
        mercuryAndMercuryCompoundsProductionAndUseRiskOfExposure: dataGenerator.randomYesNo(),
        mercuryAndMercuryWasteUsePreventionMeasures: dataGenerator.randomYesNo(),
        mercuryAndMercuryWasteHandlingPolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        mercuryAndMercuryWasteUsePreventionOtherMeasures: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        mercuryAndMercuryWasteUsePreventionOtherMeasuresDescription: dataGenerator.randomShortString(),
      },
      productionAndUseOfPersistentOrganicPollutantsPopsConvention: {
        persistentOrganicPollutantsProductionAndUse: dataGenerator.randomYesNo(),
        persistentOrganicPollutantsUsed: dataGenerator.randomShortString(),
        persistentOrganicPollutantsProductionAndUseRiskOfExposure: dataGenerator.randomYesNo(),
        persistentOrganicPollutantsProductionAndUseRiskOfDisposal: dataGenerator.randomYesNo(),
        persistentOrganicPollutantsUsePreventionMeasures: dataGenerator.randomYesNo(),
        persistentOrganicPollutantsUsePolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        persistentOrganicPollutantsUsePreventionOtherMeasures: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        persistentOrganicPollutantsUsePreventionOtherMeasuresDescription: dataGenerator.randomParagraphs(),
      },
      exportImportOfHazardousWasteBaselConvention: {
        persistentOrganicPollutantsProductionAndUseTransboundaryMovements: dataGenerator.randomYesNo(),
        persistentOrganicPollutantsProductionAndUseRiskForImportingState: dataGenerator.randomYesNo(),
        hazardousWasteTransboundaryMovementsLocatedOecdEuLiechtenstein: dataGenerator.randomYesNo(),
        hazardousWasteTransboundaryMovementsOutsideOecdEuOrLiechtenstein: dataGenerator.randomYesNo(),
        hazardousWasteTransportPreventionMeasures: dataGenerator.randomYesNo(),
        wastePolicy: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        hazardousWasteTransportPreventionOtherMeasures: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        hazardousWasteTransportPreventionOtherMeasuresDescription: dataGenerator.randomParagraphs(),
        hazardousWasteDisposal: dataGenerator.randomYesNo(),
        hazardousWasteDisposalRiskOfImport: dataGenerator.randomYesNo(),
        hazardousWasteDisposalOtherWasteImport: dataGenerator.randomYesNo(),
        hazardousWasteDisposalOtherWasteImportDescription: dataGenerator.randomParagraphs(),
      },
    },
    attachment: {
      attachment: {
        attachment: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
      },
    },
  };
}
