// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from '@e2e/utils/FakeFixtureUtils';
import { type FixtureData } from '@sharedUtils/Fixtures';
import { generateReportingPeriod } from '@e2e/fixtures/common/ReportingPeriodFixtures.ts';
import { PcafGenerator } from '@e2e/fixtures/frameworks/pcaf/PcafGenerator.ts';
import { pickOneElement, generateFixtureDataset } from '@e2e/fixtures/FixtureUtils';
import {
  PcafGeneralCompanyCompanyExchangeStatusOptions,
  PcafGeneralCompanyMainPcafSectorOptions,
  PcafGeneralGeneralFiscalYearDeviationOptions,
  type PcafData,
} from '@clients/backend';

/**
 * Generates a set number of pcaf fixtures
 * @param numFixtures the number of pcaf fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of pcaf fixtures
 */
export function generatePcafFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY
): FixtureData<PcafData>[] {
  return generateFixtureDataset<PcafData>(
    () => generatePcafData(nullProbability),
    numFixtures,
    generateReportingPeriod
  );
}

/**
 * Generates a random pcaf dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random pcaf dataset
 */
export function generatePcafData(nullProbability = DEFAULT_PROBABILITY): PcafData {
  const dataGenerator = new PcafGenerator(nullProbability);
  return {
    general: {
      general: {
        fiscalYearDeviation: dataGenerator.randomExtendedDataPoint(
          dataGenerator.valueOrNull(pickOneElement(Object.values(PcafGeneralGeneralFiscalYearDeviationOptions)))
        ),
        fiscalYearEnd: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFutureDate()),
      },
      company: {
        mainPcafSector: dataGenerator.randomExtendedDataPoint(
          dataGenerator.valueOrNull(pickOneElement(Object.values(PcafGeneralCompanyMainPcafSectorOptions)))
        ),
        companyExchangeStatus: dataGenerator.randomExtendedDataPoint(
          dataGenerator.valueOrNull(pickOneElement(Object.values(PcafGeneralCompanyCompanyExchangeStatusOptions)))
        ),
      },
    },
    companyValue: {
      listedCompany: {
        marketCapitalizationInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        bookValueOfDebtInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        minoritiesInterestInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
      unlistedCompany: {
        totalEquityAndDebtInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
    },
    environmental: {
      greenhouseGasEmissions: {
        scope1GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        scope2GhgEmissionsLocationBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        scope2GhgEmissionsMarketBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        scope3GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
    },
    companyValueEstimation: {
      listedCompany: {
        marketCapitalizationInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        bookValueOfDebtInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        minoritiesInterestInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
      unlistedCompany: {
        totalEquityAndDebtInEUR: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
    },
    environmentalEstimation: {
      greenhouseGasEmissions: {
        scope1GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        scope2GhgEmissionsLocationBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        scope2GhgEmissionsMarketBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        scope3GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
    },
  };
}
