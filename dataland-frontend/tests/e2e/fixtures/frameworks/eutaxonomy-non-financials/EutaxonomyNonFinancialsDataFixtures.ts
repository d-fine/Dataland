// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { type EutaxonomyNonFinancialsData } from "@clients/backend";
import { EutaxonomyNonFinancialsGenerator } from "@e2e/fixtures/frameworks/eutaxonomy-non-financials/EutaxonomyNonFinancialsGenerator";
import { pickOneElement, generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import { EutaxonomyNonFinancialsGeneralFiscalYearDeviationOptions } from "@clients/backend";

/**
 * Generates a set number of eutaxonomy-non-financials fixtures
 * @param numFixtures the number of eutaxonomy-non-financials fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of eutaxonomy-non-financials fixtures
 */
export function generateEutaxonomyNonFinancialsFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<EutaxonomyNonFinancialsData>[] {
  return generateFixtureDataset<EutaxonomyNonFinancialsData>(
    () => generateEutaxonomyNonFinancialsData(nullProbability),
    numFixtures,
  );
}

/**
 * Generates a random eutaxonomy-non-financials dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random eutaxonomy-non-financials dataset
 */
export function generateEutaxonomyNonFinancialsData(
  nullProbability = DEFAULT_PROBABILITY,
): EutaxonomyNonFinancialsData {
  const dataGenerator = new EutaxonomyNonFinancialsGenerator(nullProbability);
  return {
    general: {
      fiscalYearDeviation: dataGenerator.valueOrNull(
        pickOneElement(Object.values(EutaxonomyNonFinancialsGeneralFiscalYearDeviationOptions)),
      ),
      fiscalYearEnd: dataGenerator.randomFutureDate(),
      scopeOfEntities: dataGenerator.randomYesNoNa(),
      nfrdMandatory: dataGenerator.randomYesNo(),
      euTaxonomyActivityLevelReporting: dataGenerator.randomYesNo(),
      assurance: dataGenerator.generateAssuranceDatapoint(),
      numberOfEmployees: dataGenerator.randomFloat(),
      referencedReports: dataGenerator.reports,
    },
    revenue: {
      totalAmount: dataGenerator.randomCurrencyDataPoint(),
      nonEligibleShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      eligibleShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      alignedShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      substantialContributionToClimateChangeMitigationInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToClimateChangeAdaptationInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:
        dataGenerator.randomPercentageValue(),
      substantialContributionToTransitionToACircularEconomyInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToPollutionPreventionAndControlInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:
        dataGenerator.randomPercentageValue(),
      enablingShareInPercent: dataGenerator.randomPercentageValue(),
      transitionalShareInPercent: dataGenerator.randomPercentageValue(),
    },
    capex: {
      totalAmount: dataGenerator.randomCurrencyDataPoint(),
      nonEligibleShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      eligibleShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      alignedShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      substantialContributionToClimateChangeMitigationInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToClimateChangeAdaptationInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:
        dataGenerator.randomPercentageValue(),
      substantialContributionToTransitionToACircularEconomyInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToPollutionPreventionAndControlInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:
        dataGenerator.randomPercentageValue(),
      enablingShareInPercent: dataGenerator.randomPercentageValue(),
      transitionalShareInPercent: dataGenerator.randomPercentageValue(),
    },
    opex: {
      totalAmount: dataGenerator.randomCurrencyDataPoint(),
      nonEligibleShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      eligibleShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      alignedShare: {
        relativeShareInPercent: dataGenerator.randomPercentageValue(),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      substantialContributionToClimateChangeMitigationInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToClimateChangeAdaptationInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:
        dataGenerator.randomPercentageValue(),
      substantialContributionToTransitionToACircularEconomyInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToPollutionPreventionAndControlInPercent: dataGenerator.randomPercentageValue(),
      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:
        dataGenerator.randomPercentageValue(),
      enablingShareInPercent: dataGenerator.randomPercentageValue(),
      transitionalShareInPercent: dataGenerator.randomPercentageValue(),
    },
  };
}
