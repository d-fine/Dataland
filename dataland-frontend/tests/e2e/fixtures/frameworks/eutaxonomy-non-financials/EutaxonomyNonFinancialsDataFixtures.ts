// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from '@e2e/utils/FakeFixtureUtils';
import { type FixtureData } from '@sharedUtils/Fixtures';
import { EutaxonomyNonFinancialsGenerator } from '@e2e/fixtures/frameworks/eutaxonomy-non-financials/EutaxonomyNonFinancialsGenerator';
import { pickOneElement, generateFixtureDataset } from '@e2e/fixtures/FixtureUtils';
import {
  EutaxonomyNonFinancialsGeneralFiscalYearDeviationOptions,
  type EutaxonomyNonFinancialsData,
} from '@clients/backend';

/**
 * Generates a set number of eutaxonomy-non-financials fixtures
 * @param numFixtures the number of eutaxonomy-non-financials fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of eutaxonomy-non-financials fixtures
 */
export function generateEutaxonomyNonFinancialsFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY
): FixtureData<EutaxonomyNonFinancialsData>[] {
  return generateFixtureDataset<EutaxonomyNonFinancialsData>(
    () => generateEutaxonomyNonFinancialsData(nullProbability),
    numFixtures
  );
}

/**
 * Generates a random eutaxonomy-non-financials dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random eutaxonomy-non-financials dataset
 */
export function generateEutaxonomyNonFinancialsData(
  nullProbability = DEFAULT_PROBABILITY
): EutaxonomyNonFinancialsData {
  const dataGenerator = new EutaxonomyNonFinancialsGenerator(nullProbability);
  return {
    general: {
      fiscalYearDeviation: dataGenerator.randomExtendedDataPoint(
        dataGenerator.valueOrNull(
          pickOneElement(Object.values(EutaxonomyNonFinancialsGeneralFiscalYearDeviationOptions))
        )
      ),
      fiscalYearEnd: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFutureDate()),
      scopeOfEntities: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNoNa()),
      nfrdMandatory: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
      euTaxonomyActivityLevelReporting: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
      assurance: dataGenerator.valueOrNull(dataGenerator.generateAssuranceDatapoint()),
      numberOfEmployees: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
      referencedReports: dataGenerator.reports,
    },
    revenue: {
      totalAmount: dataGenerator.randomCurrencyDataPoint(),
      nonEligibleShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      eligibleShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedActivities: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomArray(() => dataGenerator.generateActivity(), 0, 2)
      ),
      alignedShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      substantialContributionToClimateChangeMitigationInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToClimateChangeAdaptationInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:
        dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      substantialContributionToTransitionToACircularEconomyInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToPollutionPreventionAndControlInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:
        dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      alignedActivities: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomArray(() => dataGenerator.generateAlignedActivity(), 0, 10)
      ),
      enablingShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      transitionalShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
    },
    capex: {
      totalAmount: dataGenerator.randomCurrencyDataPoint(),
      nonEligibleShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      eligibleShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedActivities: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomArray(() => dataGenerator.generateActivity(), 0, 2)
      ),
      alignedShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      substantialContributionToClimateChangeMitigationInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToClimateChangeAdaptationInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:
        dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      substantialContributionToTransitionToACircularEconomyInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToPollutionPreventionAndControlInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:
        dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      alignedActivities: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomArray(() => dataGenerator.generateAlignedActivity(), 0, 10)
      ),
      enablingShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      transitionalShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
    },
    opex: {
      totalAmount: dataGenerator.randomCurrencyDataPoint(),
      nonEligibleShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      eligibleShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      nonAlignedActivities: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomArray(() => dataGenerator.generateActivity(), 0, 2)
      ),
      alignedShare: {
        relativeShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
        absoluteShare: dataGenerator.randomCurrencyDataPoint(),
      },
      substantialContributionToClimateChangeMitigationInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToClimateChangeAdaptationInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToSustainableUseAndProtectionOfWaterAndMarineResourcesInPercent:
        dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      substantialContributionToTransitionToACircularEconomyInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToPollutionPreventionAndControlInPercent: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomPercentageValue()
      ),
      substantialContributionToProtectionAndRestorationOfBiodiversityAndEcosystemsInPercent:
        dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      alignedActivities: dataGenerator.randomExtendedDataPoint(
        dataGenerator.randomArray(() => dataGenerator.generateAlignedActivity(), 0, 10)
      ),
      enablingShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
      transitionalShareInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomPercentageValue()),
    },
  };
}
