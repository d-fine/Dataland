// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from '@e2e/utils/FakeFixtureUtils';
import { type FixtureData } from '@sharedUtils/Fixtures';
import { SfdrGenerator } from '@e2e/fixtures/frameworks/sfdr/SfdrGenerator';
import { pickOneElement, generateFixtureDataset } from '@e2e/fixtures/FixtureUtils';
import { SfdrGeneralGeneralFiscalYearDeviationOptions, type SfdrData } from '@clients/backend';

/**
 * Generates a set number of sfdr fixtures
 * @param numFixtures the number of sfdr fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of sfdr fixtures
 */
export function generateSfdrFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY
): FixtureData<SfdrData>[] {
  return generateFixtureDataset<SfdrData>(() => generateSfdrData(nullProbability), numFixtures);
}

/**
 * Generates a random sfdr dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random sfdr dataset
 */
export function generateSfdrData(nullProbability = DEFAULT_PROBABILITY): SfdrData {
  const dataGenerator = new SfdrGenerator(nullProbability);
  return {
    general: {
      general: {
        dataDate: dataGenerator.guaranteedFutureDate(),
        fiscalYearDeviation: pickOneElement(Object.values(SfdrGeneralGeneralFiscalYearDeviationOptions)),
        fiscalYearEnd: dataGenerator.guaranteedFutureDate(),
        referencedReports: dataGenerator.reports,
      },
    },
    environmental: {
      greenhouseGasEmissions: {
        scope1GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope2GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope2GhgEmissionsLocationBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope2GhgEmissionsMarketBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope1And2GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope1And2GhgEmissionsLocationBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope1And2GhgEmissionsMarketBasedInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope3GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope3UpstreamGhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope3DownstreamGhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope1And2And3GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        scope1And2And3GhgEmissionsLocationBasedInTonnes: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat()
        ),
        scope1And2And3GhgEmissionsMarketBasedInTonnes: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat()
        ),
        scope4GhgEmissionsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        enterpriseValue: dataGenerator.randomCurrencyDataPoint(),
        totalRevenue: dataGenerator.randomCurrencyDataPoint(),
        carbonFootprintInTonnesPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(),
        ghgIntensityInTonnesPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(),
        ghgIntensityScope1InTonnesPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(),
        ghgIntensityScope2InTonnesPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(),
        ghgIntensityScope3InTonnesPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(),
        ghgIntensityScope4InTonnesPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(),
        fossilFuelSectorExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        financedScope1AndScope2Emissions: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        financedScope3Emissions: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
      },
      energyPerformance: {
        renewableEnergyProductionInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        renewableEnergyConsumptionInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        nonRenewableEnergyProductionInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        relativeNonRenewableEnergyProductionInPercent: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        nonRenewableEnergyConsumptionInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        relativeNonRenewableEnergyConsumptionInPercent: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        applicableHighImpactClimateSectors: dataGenerator.generateHighImpactClimateSectors(),
        totalHighImpactClimateSectorEnergyConsumptionInGWh: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        nonRenewableEnergyConsumptionFossilFuelsInGWh: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        nonRenewableEnergyConsumptionCrudeOilInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        nonRenewableEnergyConsumptionNaturalGasInGWh: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        nonRenewableEnergyConsumptionLigniteInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        nonRenewableEnergyConsumptionCoalInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        nonRenewableEnergyConsumptionNuclearEnergyInGWh: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        nonRenewableEnergyConsumptionOtherInGWh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
      biodiversity: {
        primaryForestAndWoodedLandOfNativeSpeciesExposure: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomYesNo()
        ),
        protectedAreasExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        rareOrEndangeredEcosystemsExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        highlyBiodiverseGrasslandExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        manufactureOfAgrochemicalPesticidesProducts: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        landDegradationDesertificationSoilSealingExposure: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomYesNo()
        ),
        sustainableAgriculturePolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        sustainableOceansAndSeasPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        threatenedSpeciesExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        biodiversityProtectionPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        deforestationPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
      },
      water: {
        emissionsToWaterInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        waterConsumptionInCubicMeters: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        waterReusedInCubicMeters: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        relativeWaterUsageInCubicMetersPerMillionRevenue: dataGenerator.randomCurrencyDataPoint(0),
        waterManagementPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        highWaterStressAreaExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
      },
      waste: {
        hazardousAndRadioactiveWasteInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        nonRecycledWasteInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
      emissions: {
        emissionsOfInorganicPollutantsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        emissionsOfAirPollutantsInTonnes: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        emissionsOfOzoneDepletionSubstancesInTonnes: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0)
        ),
        carbonReductionInitiatives: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
      },
    },
    social: {
      socialAndEmployeeMatters: {
        humanRightsLegalProceedings: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        iloCoreLabourStandards: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        environmentalPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        corruptionLegalProceedings: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        transparencyDisclosurePolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        humanRightsDueDiligencePolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        policyAgainstChildLabour: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        policyAgainstForcedLabour: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        policyAgainstDiscriminationInTheWorkplace: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        iso14001Certificate: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        policyAgainstBriberyAndCorruption: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        fairBusinessMarketingAdvertisingPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        technologiesExpertiseTransferPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        fairCompetitionPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        violationOfTaxRulesAndRegulation: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        unGlobalCompactPrinciplesCompliancePolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        oecdGuidelinesForMultinationalEnterprisesGrievanceHandling: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomYesNo()
        ),
        averageGrossHourlyEarningsMaleEmployees: dataGenerator.randomCurrencyDataPoint(0),
        averageGrossHourlyEarningsFemaleEmployees: dataGenerator.randomCurrencyDataPoint(0),
        unadjustedGenderPayGapInPercent: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        femaleBoardMembersSupervisoryBoard: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        femaleBoardMembersBoardOfDirectors: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        maleBoardMembersSupervisoryBoard: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        maleBoardMembersBoardOfDirectors: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        boardGenderDiversitySupervisoryBoardInPercent: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0, 100)
        ),
        boardGenderDiversityBoardOfDirectorsInPercent: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomFloat(0, 100)
        ),
        controversialWeaponsExposure: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        workplaceAccidentPreventionPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        rateOfAccidents: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        workdaysLostInDays: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
        supplierCodeOfConduct: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        grievanceHandlingMechanism: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        whistleblowerProtectionPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        reportedIncidentsOfDiscrimination: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        sanctionedIncidentsOfDiscrimination: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        excessiveCeoPayRatio: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat(0)),
      },
      greenSecurities: {
        securitiesNotCertifiedAsGreen: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
      },
      humanRights: {
        humanRightsPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        humanRightsDueDiligence: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        traffickingInHumanBeingsPolicy: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        reportedChildLabourIncidents: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        reportedForcedOrCompulsoryLabourIncidents: dataGenerator.randomExtendedDataPoint(dataGenerator.randomYesNo()),
        numberOfReportedIncidentsOfHumanRightsViolations: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomInt(0)
        ),
      },
      antiCorruptionAndAntiBribery: {
        casesOfInsufficientActionAgainstBriberyAndCorruption: dataGenerator.randomExtendedDataPoint(
          dataGenerator.randomInt(0)
        ),
        reportedConvictionsOfBriberyAndCorruption: dataGenerator.randomExtendedDataPoint(dataGenerator.randomInt(0)),
        totalAmountOfReportedFinesOfBriberyAndCorruption: dataGenerator.randomCurrencyDataPoint(0),
      },
    },
  };
}
