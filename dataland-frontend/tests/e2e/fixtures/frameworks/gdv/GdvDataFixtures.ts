// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import { type GdvData } from "@clients/backend";
import { GdvGenerator } from "@e2e/fixtures/frameworks/gdv/GdvGenerator";
import { pickSubsetOfElements } from "@e2e/fixtures/FixtureUtils";
import { pickOneElement } from "@e2e/fixtures/FixtureUtils";
import { ArtDesAuditsOptions } from "@clients/backend";
import { Activity } from "@clients/backend";
import { TaxonomieBerichterstattungOptions } from "@clients/backend";
import { StatusZuGOptions } from "@clients/backend";
import { StatusZuSOptions } from "@clients/backend";
import { StatusZuEOptions } from "@clients/backend";
import { AnreizmechanismenFuerDasManagementSozialesOptions } from "@clients/backend";
import { AnreizmechanismenFuerDasManagementUmweltOptions } from "@clients/backend";
import { generateArray } from "@e2e/fixtures/FixtureUtils";
import { FrequenzDerBerichterstattungOptions } from "@clients/backend";

/**
 * Generates a set number of gdv fixtures
 * @param numFixtures the number of gdv fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of gdv fixtures
 */
export function generateGdvFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<GdvData>[] {
  return generateFixtureDataset<GdvData>(() => generateGdvData(nullProbability), numFixtures);
}

/**
 * Generates a random gdv dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random gdv dataset
 */
export function generateGdvData(nullProbability = DEFAULT_PROBABILITY): GdvData {
  const dataGenerator = new GdvGenerator(nullProbability);
  return {
    general: {
      masterData: {
        berichtspflichtUndEinwilligungZurVeroeffentlichung: dataGenerator.guaranteedYesNo(),
        gueltigkeitsDatum: dataGenerator.dataDate,
      },
    },
    allgemein: {
      esgZiele: {
        existenzVonEsgZielen: dataGenerator.randomYesNo(),
        beschreibungDerEsgZiele: dataGenerator.randomParagraph(),
        investitionenInZielerreichung: dataGenerator.randomParagraph(),
      },
      sektoren: {
        sektorenMitHohenKlimaauswirkungen: dataGenerator.randomYesNo(),
        auflistungDerSektoren: dataGenerator.valueOrNull(
          pickSubsetOfElements([
            "ALandwirtschaftForstwirtschaftUndFischerei",
            "BBergbauUndGewinnungVonSteinenUndErden",
            "CVerarbeitendesGewerbeHerstellungVonWaren",
            "DEnergieversorgung",
            "EWasserversorgungAbwasserAndAbfallentsorgungBeseitigungenVonUmweltverschmutzungen",
            "FBaugewerbeBau",
            "GHandelInstandhaltungUndReparaturVonKraftfahrzeugen",
            "HVerkehrUndLagerhaltung",
            "LGrundstuecksUndWohnungswesen",
          ]),
        ),
      },
      esgBerichte: {
        nachhaltigkeitsberichte: dataGenerator.randomYesNo(),
        frequenzDerBerichterstattung: dataGenerator.valueOrNull(
          pickOneElement(Object.values(FrequenzDerBerichterstattungOptions)),
        ),
        aktuelleBerichte: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      akkreditierungen: {
        iso14001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso45001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso27001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        iso50001: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        weitereAkkreditierungen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      unGlobalConceptPrinzipien: {
        mechanismenZurUeberwachungDerEinhaltungDerUngcp: dataGenerator.randomYesNo(),
        richtlinienZurEinhaltungDerUngcp: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        erklaerungDerEinhaltungDerUngcp: dataGenerator.randomParagraph(),
      },
      oecdLeitsaetze: {
        mechanismenZurUeberwachungDerEinhaltungDerOecdLeitsaetze: dataGenerator.randomYesNo(),
        richtlinienZurEinhaltungDerOecdLeitsaetze: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        erklaerungDerEinhaltungDerOecdLeitsaetze: dataGenerator.randomParagraph(),
      },
      sonstige: {
        ausrichtungAufDieUnSdgsUndAktivesVerfolgen: dataGenerator.randomParagraph(),
        ausschlusslistenAufBasisVonEsgKriterien: dataGenerator.randomYesNo(),
        ausschlusslisten: dataGenerator.randomParagraph(),
      },
      fuehrungsstandards: {
        oekologischeSozialeFuehrungsstandardsOderPrinzipien: dataGenerator.randomYesNo(),
        anreizmechanismenFuerDasManagementUmwelt: dataGenerator.valueOrNull(
          pickOneElement(Object.values(AnreizmechanismenFuerDasManagementUmweltOptions)),
        ),
        anreizmechanismenFuerDasManagementSoziales: dataGenerator.valueOrNull(
          pickOneElement(Object.values(AnreizmechanismenFuerDasManagementSozialesOptions)),
        ),
      },
      rechtsstreitigkeiten: {
        esgBezogeneRechtsstreitigkeiten: dataGenerator.randomYesNo(),
        rechtsstreitigkeitenMitBezugZuE: dataGenerator.randomYesNo(),
        statusZuE: dataGenerator.valueOrNull(pickOneElement(Object.values(StatusZuEOptions))),
        einzelheitenZuDenRechtsstreitigkeitenZuE: dataGenerator.randomParagraph(),
        rechtsstreitigkeitenMitBezugZuS: dataGenerator.randomYesNo(),
        statusZuS: dataGenerator.valueOrNull(pickOneElement(Object.values(StatusZuSOptions))),
        einzelheitenZuDenRechtsstreitigkeitenZuS: dataGenerator.randomParagraph(),
        rechtsstreitigkeitenMitBezugZuG: dataGenerator.randomYesNo(),
        statusZuG: dataGenerator.valueOrNull(pickOneElement(Object.values(StatusZuGOptions))),
        einzelheitenZuDenRechtsstreitigkeitenZuG: dataGenerator.randomParagraph(),
      },
      rating: {
        esgRating: dataGenerator.randomYesNo(),
        agentur: dataGenerator.randomShortString(),
        ergebnis: dataGenerator.randomShortString(),
        ratingbericht: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
        kritischePunkte: dataGenerator.randomParagraph(),
      },
      anleihen: {
        grueneSozialeUndOderNachhaltigeEmissionen: dataGenerator.randomYesNo(),
        ausstehendeGrueneSozialeUndOderNachhaltigeEmissionen: dataGenerator.randomFloat(),
        sustainibilityLinkedDebt: dataGenerator.randomYesNo(),
        ausstehendeSustainibilityLinkedDebt: dataGenerator.randomFloat(),
      },
      risiken: {
        wichtigsteESUndGRisikenUndBewertung: dataGenerator.randomParagraph(),
        hindernisseBeimUmgangMitEsgBedenken: dataGenerator.randomParagraph(),
      },
    },
    umwelt: {
      treibhausgasemissionen: {
        treibhausgasBerichterstattungUndPrognosen: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["scope1", "scope2", "scope3"],
          3,
          3,
        ),
        treibhausgasEmissionsintensitaetDerUnternehmenInDieInvestiertWird: dataGenerator.randomParagraph(),
        strategieUndZieleZurReduzierungVonTreibhausgasEmissionen: dataGenerator.randomParagraph(),
      },
      produktion: {
        produkteZurVerringerungDerUmweltbelastung: dataGenerator.randomYesNo(),
        verringerungenDerUmweltbelastung: dataGenerator.randomParagraph(),
        oekologischerMindestStandardFuerProduktionsprozesse: dataGenerator.randomYesNo(),
      },
      energieverbrauch: {
        berichterstattungEnergieverbrauch: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["energieverbrauch", "prozentDesVerbrauchsErneuerbarerEnergien", "ggfProzentDerErneuerbarenEnergieerzeugung"],
          3,
          3,
        ),
        unternehmensGruppenStrategieBzglEnergieverbrauch: dataGenerator.randomParagraph(),
      },
      energieeffizienzImmobilienanlagen: {
        berichterstattungEnergieverbrauchVonImmobilienvermoegen: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["engagementAnteilInEnergieineffizientenImmobilienanlagen"],
          3,
          3,
        ),
        unternehmensGruppenStrategieBzglEnergieeffizientenImmobilienanlagen: dataGenerator.randomParagraph(),
      },
      wasserverbrauch: {
        berichterstattungWasserverbrauch: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["wasserverbrauch", "emissionenInWasser"],
          3,
          3,
        ),
        unternehmensGruppenStrategieBzglWasserverbrauch: dataGenerator.randomParagraph(),
      },
      abfallproduktion: {
        berichterstattungAbfallproduktion: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["gesamteAbfallmenge", "prozentAbfallRecyclet", "prozentGefaehrlicherAbfall"],
          3,
          3,
        ),
        unternehmensGruppenStrategieBzglAbfallproduktion: dataGenerator.randomParagraph(),
        recyclingImProduktionsprozess: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["prozentRecycelteWerkstoffeImProduktionsprozess"],
          3,
          3,
        ),
        gefaehrlicherAbfall: dataGenerator.randomParagraph(),
      },
      biodiversitaet: {
        negativeAktivitaetenFuerDieBiologischeVielfalt: dataGenerator.randomYesNo(),
        negativeMassnahmenFuerDieBiologischeVielfalt: dataGenerator.randomParagraph(),
        positiveAktivitaetenFuerDieBiologischeVielfalt: dataGenerator.randomYesNo(),
        positiveMassnahmenFuerDieBiologischeVielfalt: dataGenerator.randomParagraph(),
      },
      fossileBrennstoffe: {
        einnahmenAusFossilenBrennstoffen: dataGenerator.randomYesNo(),
        berichterstattungEinnahmenAusFossilenBrennstoffen: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["prozentDerEinnahmenAusFossilenBrennstoffen"],
          3,
          3,
        ),
      },
      taxonomie: {
        taxonomieBerichterstattung: dataGenerator.valueOrNull(
          pickOneElement(Object.values(TaxonomieBerichterstattungOptions)),
        ),
        euTaxonomieKompassAktivitaeten: dataGenerator.valueOrNull(pickSubsetOfElements(Object.values(Activity))),
        umsatzInvestitionsaufwandFuerNachhaltigeAktivitaeten: dataGenerator.randomDecimalYearlyTimeseriesData(
          [
            "taxonomieGeeignetNachProzentUmsatz",
            "taxonomieGeeignetNachProzentCapex",
            "taxonomieKonformNachProzentUmsatz",
            "taxonomieKonformNachProzentCapex",
          ],
          3,
          3,
        ),
      },
    },
    soziales: {
      unternehmensstrukturaenderungen: {
        vorhandenseinKuerzlicherAenderungenDerUnternehmensstruktur: dataGenerator.randomYesNo(),
        anzahlUnbefristeterVertraegeInDeutschland: dataGenerator.randomInt(),
        anzahlDerVonEinemVerkaufBetroffenenUnbefristetenVertraegeInDeutschland: dataGenerator.randomInt(),
        anzahlDerVonEinerAkquisitionBetroffenenUnbefristetenVertraegeInDeutschland: dataGenerator.randomInt(),
        anzahlUnbefristeterVertraegeInDerGesamtgruppe: dataGenerator.randomInt(),
        anzahlDerVonEinemVerkaufBetroffenenUnbefristetenVertraegeInDerGesamtgruppe: dataGenerator.randomInt(),
        anzahlDerVonEinerAkquisitionBetroffenenUnbefristetenVertraegeInDerGesamtgruppe: dataGenerator.randomInt(),
        auswirkungenAufAnteilBefristerVertraegeUndFluktuation: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["anzahlDerBefristetenVertraege", "fluktuation"],
          3,
          0,
        ),
      },
      sicherheitUndWeiterbildung: {
        sicherheitsmassnahmenFuerMitarbeiter: dataGenerator.randomParagraph(),
        unfallrate: dataGenerator.randomDecimalYearlyTimeseriesData(
          ["haeufigkeitsrateVonArbeitsunfaellenMitZeitverlust"],
          3,
          0,
        ),
        budgetFuerSchulungAusbildung: dataGenerator.randomDecimalYearlyTimeseriesData(["budgetProMitarbeiter"], 3, 0),
      },
      einkommensgleichheit: {
        ueberwachungDerEinkommensungleichheit: dataGenerator.randomDecimalYearlyTimeseriesData(
          [
            "unbereinigtesGeschlechtsspezifischesLohngefaelle",
            "einkommensungleichheitsverhaeltnis",
            "ceoEinkommensungleichheitsverhaeltnis",
          ],
          3,
          0,
        ),
        massnahmenZurVerbesserungDerEinkommensungleichheit: dataGenerator.randomParagraph(),
      },
      geschlechterdiversitaet: {
        mitarbeiterAufTopManagementEbene: dataGenerator.randomInt(),
        frauenAufTopManagementEbene: dataGenerator.randomInt(),
        mitgliederGeschaeftsfuehrung: dataGenerator.randomInt(),
        frauenInDerGeschaeftsfuehrung: dataGenerator.randomInt(),
        definitionTopManagement: dataGenerator.randomParagraph(),
        einhaltungRechtlicherVorgaben: dataGenerator.randomParagraph(),
      },
      audit: {
        auditsZurEinhaltungVonArbeitsstandards: dataGenerator.randomYesNo(),
        artDesAudits: dataGenerator.valueOrNull(pickOneElement(Object.values(ArtDesAuditsOptions))),
        auditErgebnisse: dataGenerator.randomParagraph(),
      },
    },
    unternehmensfuehrungGovernance: {
      aufsichtsrat: {
        anzahlDerMitgliederImAufsichtsrat: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImAufsichtsrat: dataGenerator.randomInt(),
        anzahlVonFrauenImAufsichtsrat: dataGenerator.randomInt(),
      },
      verguetungsausschuss: {
        anzahlDerMitgliederImVerguetungsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImVerguetungsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImVerguetungsausschuss: dataGenerator.randomInt(),
      },
      nominierungsausschuss: {
        anzahlDerMitgliederImNominierungsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImNominierungsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImVerguetungsausschuss: dataGenerator.randomInt(),
      },
      pruefungsausschuss: {
        anzahlDerMitgliederImPruefungsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImPruefungsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImPruefungsausschuss: dataGenerator.randomInt(),
      },
      nachhaltigkeitsausschuss: {
        anzahlDerMitgliederImNachhaltigkeitsausschuss: dataGenerator.randomInt(),
        anzahlUnabhaengigerMitgliederImNachhaltigkeitsausschuss: dataGenerator.randomInt(),
        anzahlVonFrauenImNachhaltigkeitsausschuss: dataGenerator.randomInt(),
      },
      sonstige: {
        wirtschaftspruefer: dataGenerator.randomShortString(),
        trennungVonCeoOderVorsitzenden: dataGenerator.randomYesNo(),
        amtszeitBisZurTrennung: dataGenerator.randomInt(),
      },
      stakeholder: {
        einbeziehungVonStakeholdern: dataGenerator.randomYesNo(),
        prozessDerEinbeziehungVonStakeholdern: dataGenerator.randomParagraph(),
        mechanismenZurAusrichtungAufStakeholder: dataGenerator.randomParagraph(),
      },
      unternehmensrichtlinien: {
        veroeffentlichteUnternehmensrichtlinien: dataGenerator.valueOrNull(
          pickSubsetOfElements([
            "AntiKorruption",
            "Verhaltenskodex",
            "Interessenkonflikte",
            "Datenschutz",
            "DiversitaetAndInklusion",
            "FaireBehandlungVonKunden",
            "Zwangsarbeit",
            "GesundheitUndSicherheit",
            "MgtVonUmweltgefahren",
            "VerantwortungsvollesMarketing",
            "Whistleblowing",
            "Other",
          ]),
        ),
        weitereVeroeffentlicheUnternehmensrichtlinien: dataGenerator.randomShortString(),
      },
      lieferantenauswahl: {
        esgKriterienUndUeberwachungDerLieferanten: dataGenerator.randomYesNo(),
        auswahlkriterien: dataGenerator.randomParagraph(),
      },
    },
  };
}
