// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { SmeGenerator } from "@e2e/fixtures/frameworks/sme/SmeGenerator";
import { pickSubsetOfElements, pickOneElement, generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import {
  SmePowerConsumptionEnergyConsumptionCoveredByOwnRenewablePowerGenerationOptions,
  SmePowerConsumptionPrimaryEnergySourceForHeatingAndHotWaterOptions,
  SmePowerInvestmentsInvestmentsInEnhancingEnergyEfficiencyOptions,
  type SmeData,
} from "@clients/backend";
import { generateNaceCodes } from "@e2e/fixtures/common/NaceCodeFixtures";

/**
 * Generates a set number of sme fixtures
 * @param numFixtures the number of sme fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of sme fixtures
 */
export function generateSmeFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<SmeData>[] {
  return generateFixtureDataset<SmeData>(() => generateSmeData(nullProbability), numFixtures);
}

/**
 * Generates a random sme dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random sme dataset
 */
export function generateSmeData(nullProbability = DEFAULT_PROBABILITY): SmeData {
  const dataGenerator = new SmeGenerator(nullProbability);
  return {
    general: {
      basicInformation: {
        reportingDate: dataGenerator.guaranteedFutureDate(),
        sectors: generateNaceCodes(),
        numberOfEmployees: dataGenerator.guaranteedInt(),
        fiscalYearStart: dataGenerator.guaranteedFutureDate(),
        referencedReports: dataGenerator.reports,
      },
      financialInformation: {
        revenueInEur: dataGenerator.randomFloat(),
        operatingCostInEur: dataGenerator.randomFloat(),
        capitalAssetsInEur: dataGenerator.randomFloat(),
      },
    },
    power: {
      investments: {
        investmentsInEnhancingEnergyEfficiency: dataGenerator.valueOrNull(
          pickOneElement(Object.values(SmePowerInvestmentsInvestmentsInEnhancingEnergyEfficiencyOptions)),
        ),
      },
      consumption: {
        powerConsumptionInMwh: dataGenerator.randomExtendedDataPoint(dataGenerator.randomFloat()),
        powerFromRenewableSources: dataGenerator.randomYesNo(),
        energyConsumptionHeatingAndHotWaterInMwh: dataGenerator.randomFloat(),
        primaryEnergySourceForHeatingAndHotWater: dataGenerator.valueOrNull(
          pickOneElement(Object.values(SmePowerConsumptionPrimaryEnergySourceForHeatingAndHotWaterOptions)),
        ),
        energyConsumptionCoveredByOwnRenewablePowerGeneration: dataGenerator.valueOrNull(
          pickOneElement(
            Object.values(SmePowerConsumptionEnergyConsumptionCoveredByOwnRenewablePowerGenerationOptions),
          ),
        ),
      },
    },
    insurances: {
      naturalHazards: {
        insuranceAgainstNaturalHazards: dataGenerator.randomYesNo(),
        amountCoveredByInsuranceAgainstNaturalHazardsInEur: dataGenerator.randomFloat(),
        naturalHazardsCovered: dataGenerator.valueOrNull(
          pickSubsetOfElements(["Hail", "Wind", "Flooding", "EarthQuake", "Avalanche", "Snow"]),
        ),
      },
    },
  };
}
