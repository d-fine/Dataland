// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import { type HeimathafenData } from "@clients/backend";
import { HeimathafenGenerator } from "@e2e/fixtures/frameworks/heimathafen/HeimathafenGenerator";
import { generateArray } from "@e2e/fixtures/FixtureUtils";
import { generateNaceCodes } from "@e2e/fixtures/common/NaceCodeFixtures";

/**
 * Generates a set number of heimathafen fixtures
 * @param numFixtures the number of heimathafen fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of heimathafen fixtures
 */
export function generateHeimathafenFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<HeimathafenData>[] {
  return generateFixtureDataset<HeimathafenData>(() => generateHeimathafenData(nullProbability), numFixtures);
}

/**
 * Generates a random heimathafen dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random heimathafen dataset
 */
export function generateHeimathafenData(nullProbability = DEFAULT_PROBABILITY): HeimathafenData {
  const dataGenerator = new HeimathafenGenerator(nullProbability);
  return {
    general: {
      datenanbieter: {
        unternehmenseigentumUndEigentuemerstruktur: dataGenerator.randomShortString(),
        kernkompetenzenUndGeschaeftsbereiche: dataGenerator.valueOrNull(generateNaceCodes()),
        anzahlDerFuerEsgZustaendigenMitarbeiter: dataGenerator.randomFloat(),
      },
      methodik: {
        verstaendnisVonNachhaltigkeitAlsTeilDerBewertung: dataGenerator.randomShortString(),
        kriterienFuerIhreNachhaltigkeitsratings: dataGenerator.randomShortString(),
        verfahrenZurVorbereitungDerAnalyseOderMethodik: dataGenerator.randomShortString(),
        wieIstIhreBewertungsskalaDefiniert: dataGenerator.randomShortString(),
        bewertungAktuell: dataGenerator.randomShortString(),
        sindIhreBewertungenUnabhaengig: dataGenerator.randomShortString(),
        datenerfassung: dataGenerator.randomShortString(),
        dieMethodikUmfasstUmweltSozialesUndGovernance: dataGenerator.randomYesNo(),
        datenquelle: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        datenPlausibilitaetspruefung: dataGenerator.randomShortString(),
        intervalleFuerDieDatenaktualisierung: dataGenerator.randomShortString(),
        zuverlaessigkeitDerMethodikSicherstellen: dataGenerator.randomShortString(),
        minimierenOderVerhindernSieSubjektiveFaktoren: dataGenerator.randomShortString(),
        listePotenziellerInteressenkonflikte: dataGenerator.randomShortString(),
        interessenkonfliktenEntgegenwirken: dataGenerator.randomShortString(),
        dokumentationDerDatenerfassungUndSicherstellungDesProzesses: dataGenerator.randomShortString(),
        bewertungVonQualitaetsstandards: dataGenerator.randomShortString(),
        ratingTransparenzstandards: dataGenerator.randomShortString(),
        qualitaetssicherungsprozess: dataGenerator.randomYesNo(),
        fallsNeinGebenSieBitteDieGruendeAn: dataGenerator.randomShortString(),
        strukturDesQualitaetssicherungsprozesses: dataGenerator.randomShortString(),
        dieAktualitaetDerMethodik: dataGenerator.randomShortString(),
        paisInDieAnalyseEinbezogen: dataGenerator.randomYesNo(),
        listeDerEingeschlossenenPais: dataGenerator.randomShortString(),
        quelleDerPaiSammlung: dataGenerator.randomShortString(),
        umgangMitAusreissern: dataGenerator.randomShortString(),
        identifizierungVonKontroversenGeschaeften: dataGenerator.randomShortString(),
        aktuelleKontroversen: dataGenerator.randomShortString(),
        kontroversenUmDieQuellenerfassung: dataGenerator.randomShortString(),
      },
      implementierung: {
        angeboteneSprachen: dataGenerator.randomShortString(),
        bereitgestellteDokumentationsarten: dataGenerator.randomShortString(),
        bereitgestellteDokumentationAufDeutsch: dataGenerator.randomYesNo(),
        leistungstests: dataGenerator.randomYesNo(),
        sicherheitstests: dataGenerator.randomYesNo(),
        beschreibungDerSystemarchitektur: dataGenerator.randomShortString(),
        erforderlichesClientBetriebssystem: dataGenerator.randomShortString(),
        angebotFuerFetteDuenneZitrischeKunden: dataGenerator.randomYesNo(),
        serverBackup: dataGenerator.randomShortString(),
        standardisiertesKonzeptZurWiederherstellungImKatastrophenfall: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        stammUndBewegungsdatenLesen: dataGenerator.randomYesNo(),
        kompatibilitaetMitAnderenDatenquellen: dataGenerator.randomYesNo(),
        importDerErgebnisseInDasDataWarehouse: dataGenerator.randomYesNo(),
        erforderlichesDatenbanksystem: dataGenerator.randomShortString(),
        beschreibungDesDesignsUndDerStrukturDerDatenbankEn: dataGenerator.randomShortString(),
        direkterZugriffAufDieDatenbank: dataGenerator.randomYesNo(),
        schreibenderZugriffAufDieDatenbank: dataGenerator.randomYesNo(),
        unterstuetzungDerEchtzeitverarbeitung: dataGenerator.randomYesNo(),
        unterstuetzungFuerZeitnaheVerarbeitung: dataGenerator.randomYesNo(),
        unterstuetzungDerStapelverarbeitung: dataGenerator.randomYesNo(),
        unterstuetzteBiLoesung: dataGenerator.randomShortString(),
        flexibilitaetBeimImportExportVonDaten: dataGenerator.randomYesNo(),
        dauerhafteVerfuegbarkeit: dataGenerator.randomYesNo(),
        uebertragenVonDatenhistorien: dataGenerator.randomShortString(),
        unterstuetzterZeitraumDerDatenhistorien: dataGenerator.randomShortString(),
        fruehesterStartterminFuerEinIntegrationsprojekt: dataGenerator.randomFutureDate(),
        geschaetzterZeitrahmenFuerDieVollstaendigeIntegrationDesProjekts: dataGenerator.randomShortString(),
        durchschnittlicheAnzahlDerBenoetigtenRessourcen: dataGenerator.randomFloat(),
        anzahlDerVerfuegbarenRessourcen: dataGenerator.randomFloat(),
        kundenbetreuung: dataGenerator.randomShortString(),
      },
    },
    environmental: {
      nachhaltigskeitsrisiken: {
        methodikFuerOekologischeNachhaltigkeitsrisiken: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenOekologischeNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
        kartierteRisikenFuerDieOekologischeNachhaltigkeit: dataGenerator.randomShortString(),
        identifizierungDerWesentlichenRisikenFuerDieOekologischeNachhaltigkeitUndDerKonstruktionsmethodik:
          dataGenerator.randomShortString(),
        umweltbewertungUnterBeruecksichtigungVonNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
        risikenFuerDieOekologischeNachhaltigkeitAbsichern: dataGenerator.randomShortString(),
        quelle: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        vierAugenPruefung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomShortString(),
        beschreibungDerVierAugenPruefung: dataGenerator.randomShortString(),
      },
      pais: {
        sechsPaisTreibhausgasemissionen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomShortString(),
        wennJaBitteDiePaisAuflisten: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenTreibhausgasemissionen: dataGenerator.randomShortString(),
        datenerfassungTreibhausgasemissionen: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungTreibhausgasemissionen: dataGenerator.randomShortString(),
        datenquelleTreibhausgasemissionen: dataGenerator.randomShortString(),
        paisBiologischeVielfalt: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenBiodiversitaet: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenBiodiversitaet: dataGenerator.randomShortString(),
        datenerfassungBiodiversitaet: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungBiodiversitaet: dataGenerator.randomShortString(),
        datenquelleBiodiversitaet: dataGenerator.randomShortString(),
        paiWasser: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenWasser: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenWasser: dataGenerator.randomShortString(),
        datenerfassungWasser: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungWasser: dataGenerator.randomShortString(),
        datenquelleWasser: dataGenerator.randomShortString(),
        paiAbfall: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenAbfall: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenAbfall: dataGenerator.randomShortString(),
        datenerfassungAbfall: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungAbfall: dataGenerator.randomShortString(),
        datenquelleAbfall: dataGenerator.randomShortString(),
        paiUmweltAufDemLand: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenUmweltAufDemLand: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenUmweltAufDemLand: dataGenerator.randomShortString(),
        datenerfassungUmweltAufDemLand: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungUmweltAufDemLand: dataGenerator.randomShortString(),
        datenquelleUmweltAufDemLand: dataGenerator.randomShortString(),
      },
      sfdr: {
        methodikZurMessungEinesSignifikantenBeitragsZuEinemUmweltziel: dataGenerator.randomShortString(),
      },
      kontroverseGeschaeftsfelder: {
        ausschlussDerTabakerzeugungTabakerzeugung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenTabakerzeugung: dataGenerator.randomShortString(),
        metrischVerwendetTabakerzeugung: dataGenerator.randomShortString(),
        methodikDerBerechnungTabakerzeugung: dataGenerator.randomShortString(),
        verwendeteQuellenTabakerzeugung: dataGenerator.randomShortString(),
        ausschlussDerKohlefoerderungUndVerteilung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenKohleerzeugung: dataGenerator.randomShortString(),
        metrischVerwendetKohleerzeugung: dataGenerator.randomShortString(),
        methodikDerBerechnungKohleerzeugung: dataGenerator.randomShortString(),
        verwendeteQuellenKohleerzeugung: dataGenerator.randomShortString(),
      },
    },
    social: {
      nachhaltigskeitsrisiken: {
        methodikSozialeNachhaltigkeitsrisiken: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
        kartierteSozialeNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
        identifizierungWesentlicherSozialerNachhaltigkeitsrisikenUndKonstruktionsmethodik:
          dataGenerator.randomShortString(),
        sozialeBewertungUnterBeruecksichtigungVonNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
        sozialeNachhaltigkeitsrisikenAbsichern: dataGenerator.randomShortString(),
        quelle: dataGenerator.randomShortString(),
        vierAugenPruefung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenVierAugenPruefung: dataGenerator.randomShortString(),
        beschreibungDerVierAugenPruefung: dataGenerator.randomShortString(),
      },
      pais: {
        paiSozial: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenSozialeUnternehmen: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenSozialeUnternehmen: dataGenerator.randomShortString(),
        datenerfassungSozialeUnternehmen: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungSozialeUnternehmen: dataGenerator.randomShortString(),
        datenquelleSozialeUnternehmen: dataGenerator.randomShortString(),
        paiSozialesAufDemLand: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenSozialesAufDemLand: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenSozialesAufDemLand: dataGenerator.randomShortString(),
        datenerfassungSozialesAufDemLand: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungSozialesAufDemLand: dataGenerator.randomShortString(),
        datenquelleSozialesAufDemLand: dataGenerator.randomShortString(),
      },
      sfdr: {
        methodikZurMessungDesSignifikantenBeitragsZuEinemGesellschaftlichenZiel: dataGenerator.randomShortString(),
      },
      kontroverseGeschaeftsfelder: {
        herstellungOderVertriebVonWaffenAusschluss: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenWaffen: dataGenerator.randomShortString(),
        metrischVerwendetWaffen: dataGenerator.randomShortString(),
        methodikDerBerechnungWaffen: dataGenerator.randomShortString(),
        verwendeteQuellenWaffen: dataGenerator.randomShortString(),
        ausschlussVerbotenerWaffen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenVerboteneWaffen: dataGenerator.randomShortString(),
        metrischVerwendetVerboteneWaffen: dataGenerator.randomShortString(),
        verwendeteQuellenVerboteneWaffen: dataGenerator.randomShortString(),
      },
    },
    governance: {
      goodGovernance: {
        methodikDerGutenRegierungsfuehrung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenGoodGovernance: dataGenerator.randomShortString(),
        definitionVonGuterRegierungsfuehrung: dataGenerator.randomShortString(),
        listeDerKpisFuerGuteUnternehmensfuehrung: dataGenerator.randomShortString(),
        verwendeteQuellenGoodGovernance: dataGenerator.randomShortString(),
      },
      globalCompact: {
        beruecksichtigungDesUngc: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenGlobalCompact: dataGenerator.randomShortString(),
        beruecksichtigungDerUngcBeschreibung: dataGenerator.randomShortString(),
        verwendeteQuellenGlobalCompact: dataGenerator.randomShortString(),
      },
      kontroverseGeschaeftsfelder: {
        kontroversenImBereichDerBestechungUndKorruption: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenKontroverseGeschaeftsfelder: dataGenerator.randomShortString(),
        verwendeteMetrikenUndMethodik: dataGenerator.randomShortString(),
        verwendeteQuellenKontroverseGeschaeftsfelder: dataGenerator.randomShortString(),
        dieAktualitaetDerKontroversenImBereichBestechungUndKorruption: dataGenerator.randomShortString(),
      },
    },
    sdg: {
      keineArmut: {
        sdgKeineArmut: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenKeineArmut: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenKeineArmut: dataGenerator.randomShortString(),
        datenerfassungKeineArmut: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungKeineArmut: dataGenerator.randomShortString(),
        datenquelleKeineArmut: dataGenerator.randomShortString(),
      },
      keinHunger: {
        sdgKeinHunger: dataGenerator.randomYesNo(),
        verwendeteSchluesselzahlenKeinHunger: dataGenerator.randomShortString(),
        datenerfassungKeinHunger: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungKeinHunger: dataGenerator.randomShortString(),
        datenquelleKeinHunger: dataGenerator.randomShortString(),
      },
      gesundheitUndWohlergehen: {
        sdgGesundheitUndWohlergehen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenGesundheitUndWohlergehen: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenGesundheitUndWohlergehen: dataGenerator.randomShortString(),
        datenerfassungGesundheitUndWohlergehen: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungGesundheitUndWohlergehen: dataGenerator.randomShortString(),
        datenquelleGesundheitUndWohlergehen: dataGenerator.randomShortString(),
      },
      hochwertigeBildung: {
        sdgHochwertigeBildung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenHochwertigeBildung: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenHochwertigeBildung: dataGenerator.randomShortString(),
        datenerfassungHochwertigeBildung: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungHochwertigeBildung: dataGenerator.randomShortString(),
        datenquelleHochwertigeBildung: dataGenerator.randomShortString(),
      },
      geschlechtergleichheit: {
        sdgGeschlechtergleichheit: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenGeschlechtergleichheit: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenGeschlechtergleichheit: dataGenerator.randomShortString(),
        datenerfassungGeschlechtergleichheit: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungGeschlechtergleichheit: dataGenerator.randomShortString(),
        datenquelleGeschlechtergleichheit: dataGenerator.randomShortString(),
      },
      sauberesWasserUndSanitaereEinrichtungen: {
        sdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
        datenerfassungSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
        datenquelleSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
      },
      bezahlbareUndSaubereEnergie: {
        sdgBezahlbareUndSaubereEnergie: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
        datenerfassungBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
        datenquelleBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
      },
      menschenwuerdigeArbeitUndWirtschaftswachstum: {
        sdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
        datenerfassungMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
        datenquelleMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
      },
      industrieInnovationUndInfrastruktur: {
        sdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
        datenerfassungIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
        datenquelleIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
      },
      wenigerUngleichheiten: {
        sdgWenigerUngleichheiten: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenWenigerUngleichheiten: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenWenigerUngleichheiten: dataGenerator.randomShortString(),
        datenerfassungWenigerUngleichheiten: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungWenigerUngleichheiten: dataGenerator.randomShortString(),
        datenquelleWenigerUngleichheiten: dataGenerator.randomShortString(),
      },
      nachhaltigeStaedteUndGemeinden: {
        sdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
        datenerfassungNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
        datenquelleNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
      },
      nachhaligerKonsumUndProduktion: {
        sdgNachhaligerKonsumUndProduktion: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
        datenerfassungNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
        datenquelleNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
      },
      massnahmenZumKlimaschutz: {
        sdgMassnahmenZumKlimaschutz: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
        datenerfassungMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
        datenquelleMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
      },
      lebenUnterWasser: {
        sdgLebenUnterWasser: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenLebenUnterWasser: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenLebenUnterWasser: dataGenerator.randomShortString(),
        datenerfassungLebenUnterWasser: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungLebenUnterWasser: dataGenerator.randomShortString(),
        datenquelleLebenUnterWasser: dataGenerator.randomShortString(),
      },
      lebenAnLand: {
        sdgLebenAnLand: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenLebenAnLand: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenLebenAnLand: dataGenerator.randomShortString(),
        datenerfassungLebenAnLand: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungLebenAnLand: dataGenerator.randomShortString(),
        datenquelleLebenAnLand: dataGenerator.randomShortString(),
      },
      friedenGerechtigkeitUndStarkeInstitutionen: {
        sdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
        datenerfassungFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
        datenquelleFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
      },
      partnerschaftenZurErreichungDerZiele: {
        sdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomYesNo(),
        wennNeinBitteBegruendenPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
        verwendeteSchluesselzahlenPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
        datenerfassungPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
        datenPlausibilitaetspruefungPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
        datenquellePartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
      },
    },
  };
}
