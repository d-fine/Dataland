// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
import { DEFAULT_PROBABILITY } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { generateArray, generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import { type HeimathafenData } from "@clients/backend";
import { HeimathafenGenerator } from "@e2e/fixtures/frameworks/heimathafen/HeimathafenGenerator";
import { generateNaceCodes } from "@e2e/fixtures/common/NaceCodeFixtures";

/**
 * Generates a set number of heimathafen fixtures
 * @param numFixtures the number of heimathafen fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of heimathafen fixtures
 */
export function generateHeimathafenFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<HeimathafenData>[] {
  return generateFixtureDataset<HeimathafenData>(() => generateHeimathafenData(nullProbability), numFixtures);
}

/**
 * Generates a random heimathafen dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random heimathafen dataset
 */
export function generateHeimathafenData(nullProbability = DEFAULT_PROBABILITY): HeimathafenData {
  const dataGenerator = new HeimathafenGenerator(nullProbability);
  return {
    general: {
      unternehmen: {
        unternehmenseigentumUndEigentuemerstruktur: dataGenerator.randomParagraphs(),
        kernkompetenzenUndGeschaeftsbereiche: dataGenerator.valueOrNull(generateNaceCodes()),
        anzahlDerFuerEsgZustaendigenMitarbeiter: dataGenerator.randomInt(),
      },
      methodik: {
        verstaendnisVonNachhaltigkeitAlsTeilDerBewertung: dataGenerator.randomParagraphs(),
        kriterienFuerIhreNachhaltigkeitsratings: dataGenerator.randomParagraphs(),
        verfahrenZurVorbereitungDerAnalyseOderMethodik: dataGenerator.randomParagraphs(),
        definitionBewertungsskala: dataGenerator.randomParagraphs(),
        aktualitaetDerRatings: dataGenerator.randomParagraphs(),
        unabhaengigkeitDerRatings: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        methodikUmfasstUmweltSozialesUndGovernance: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        intervalleFuerDieDatenaktualisierung: dataGenerator.randomShortString(),
        zuverlaessigkeitDerMethodikSicherstellen: dataGenerator.randomParagraphs(),
        minimierungOderVerhinderungSubjektiverFaktoren: dataGenerator.randomParagraphs(),
        listePotenziellerInteressenkonflikte: dataGenerator.randomParagraphs(),
        interessenkonfliktenEntgegenwirken: dataGenerator.randomParagraphs(),
        dokumentationDerDatenerfassungUndSicherstellungDesProzesses: dataGenerator.randomParagraphs(),
        bewertungVonQualitaetsstandards: dataGenerator.randomParagraphs(),
        ratingTransparenzstandards: dataGenerator.randomParagraphs(),
        qualitaetssicherungsprozess: dataGenerator.randomYesNo(),
        fallsNeinGebenSieBitteDieGruendeAn: dataGenerator.randomParagraphs(),
        strukturDesQualitaetssicherungsprozesses: dataGenerator.randomParagraphs(),
        dieAktualitaetDerMethodik: dataGenerator.randomParagraphs(),
        paisInDieAnalyseEinbezogen: dataGenerator.randomYesNo(),
        listeDerEingeschlossenenPais: dataGenerator.randomParagraphs(),
        quelleDerPaiSammlung: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        umgangMitAusreissern: dataGenerator.randomParagraphs(),
        identifizierungVonKontroversenGeschaeften: dataGenerator.randomParagraphs(),
        aktuelleKontroversen: dataGenerator.randomParagraphs(),
        kontroversenUmDieQuellenerfassung: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleKeineArmut: {
        sdgKeineArmut: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleKeinHunger: {
        sdgKeinHunger: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleGesundheitUndWohlergehen: {
        sdgGesundheitUndWohlergehen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleHochwertigeBildung: {
        sdgHochwertigeBildung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleGeschlechtergleichheit: {
        sdgGeschlechtergleichheit: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleSauberesWasserUndSanitaereEinrichtungen: {
        sdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleBezahlbareUndSaubereEnergie: {
        sdgBezahlbareUndSaubereEnergie: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleMenschenwuerdigeArbeitUndWirtschaftswachstum: {
        sdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleIndustrieInnovationUndInfrastruktur: {
        sdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleWenigerUngleichheiten: {
        sdgWenigerUngleichheiten: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleNachhaltigeStaedteUndGemeinden: {
        sdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleNachhaltigerKonsumUndProduktion: {
        sdgNachhaligerKonsumUndProduktion: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleMassnahmenZumKlimaschutz: {
        sdgMassnahmenZumKlimaschutz: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleLebenUnterWasser: {
        sdgLebenUnterWasser: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleLebenAndLand: {
        sdgLebenAnLand: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmaleFriedenGerechtigkeitUndStarkeInstitutionen: {
        sdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      impactmerkmalePartnerschaftenZurErreichungDerZiele: {
        sdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      implementierung: {
        angeboteneSprachen: dataGenerator.randomParagraphs(),
        bereitgestellteDokumentationsarten: dataGenerator.randomParagraphs(),
        bereitgestellteDokumentationAufDeutsch: dataGenerator.randomYesNo(),
        leistungstests: dataGenerator.randomYesNo(),
        sicherheitstests: dataGenerator.randomYesNo(),
        beschreibungDerSystemarchitektur: dataGenerator.randomParagraphs(),
        erforderlichesClientBetriebssystem: dataGenerator.randomShortString(),
        angebotFuerFetteDuenneZitrischeKunden: dataGenerator.randomYesNo(),
        serverBackup: dataGenerator.randomParagraphs(),
        standardisiertesKonzeptZurWiederherstellungImKatastrophenfall: dataGenerator.randomBaseDataPoint(
          dataGenerator.guaranteedYesNo(),
        ),
        stammUndBewegungsdatenLesen: dataGenerator.randomYesNo(),
        kompatibilitaetMitAnderenDatenquellen: dataGenerator.randomYesNo(),
        importDerErgebnisseInDasDataWarehouse: dataGenerator.randomYesNo(),
        erforderlichesDatenbanksystem: dataGenerator.randomShortString(),
        beschreibungDesDesignsUndDerStrukturDerDatenbankEn: dataGenerator.randomParagraphs(),
        direkterZugriffAufDieDatenbank: dataGenerator.randomYesNo(),
        schreibenderZugriffAufDieDatenbank: dataGenerator.randomYesNo(),
        unterstuetzungDerEchtzeitverarbeitung: dataGenerator.randomYesNo(),
        unterstuetzungFuerZeitnaheVerarbeitung: dataGenerator.randomYesNo(),
        unterstuetzungDerStapelverarbeitung: dataGenerator.randomYesNo(),
        unterstuetzteBiLoesung: dataGenerator.randomShortString(),
        flexibilitaetBeimImportExportVonDaten: dataGenerator.randomYesNo(),
        rundUmDieUhrVerfuegbarkeit: dataGenerator.randomYesNo(),
        uebertragenVonDatenhistorien: dataGenerator.randomParagraphs(),
        unterstuetzterZeitraumDerDatenhistorien: dataGenerator.randomShortString(),
        fruehesterStartterminFuerEinIntegrationsprojekt: dataGenerator.randomFutureDate(),
        geschaetzterZeitrahmenFuerDieVollstaendigeIntegrationDesProjekts: dataGenerator.randomShortString(),
        durchschnittlicheAnzahlDerBenoetigtenRessourcen: dataGenerator.randomInt(),
        anzahlDerVerfuegbarenRessourcen: dataGenerator.randomParagraphs(),
        kundenbetreuung: dataGenerator.randomInt(),
      },
    },
    environmental: {
      nachhaltigskeitsrisiken: {
        methodikFuerOekologischeNachhaltigkeitsrisiken: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        kartierteRisikenFuerDieOekologischeNachhaltigkeit: dataGenerator.randomParagraphs(),
        identifizierungDerWesentlichenRisikenFuerDieOekologischeNachhaltigkeitUndDerKonstruktionsmethodik:
          dataGenerator.randomParagraphs(),
        umweltbewertungUnterBeruecksichtigungVonNachhaltigkeitsrisiken: dataGenerator.randomParagraphs(),
        risikenFuerDieOekologischeNachhaltigkeitAbsichern: dataGenerator.randomParagraphs(),
        quellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        vierAugenPruefung: dataGenerator.randomYesNo(),
        wennKeineVierAugenPruefungBitteBegruenden: dataGenerator.randomParagraphs(),
        beschreibungDerVierAugenPruefung: dataGenerator.randomParagraphs(),
      },
      pais: {
        sechsPaisTreibhausgasemissionen: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        wennJaBitteDiePaisAuflisten: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      paiBiologischeVielfalt: {
        paisBiologischeVielfalt: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      paiWasser: {
        paiWasser: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      paiAbfall: {
        paiAbfall: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      paiUmweltAufDemLand: {
        paiUmweltAufDemLand: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      sfdr: {
        methodikZurMessungEinesSignifikantenBeitragsZuEinemUmweltziel: dataGenerator.randomParagraphs(),
      },
      kontroverseGeschaeftsfelderTabakerzeugung: {
        ausschlussDerTabakerzeugung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteKennzahl: dataGenerator.randomParagraphs(),
        methodikDerBerechnung: dataGenerator.randomParagraphs(),
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      kontroverseGeschaeftsfelderKohlefoerderungUndVerteilung: {
        ausschlussDerKohlefoerderungUndVerteilung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteKennzahl: dataGenerator.randomParagraphs(),
        methodikDerBerechnung: dataGenerator.randomParagraphs(),
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
    },
    social: {
      nachhaltigskeitsrisiken: {
        methodikSozialeNachhaltigkeitsrisiken: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        kartierteSozialeNachhaltigkeitsrisiken: dataGenerator.randomParagraphs(),
        identifizierungWesentlicherSozialerNachhaltigkeitsrisikenUndKonstruktionsmethodik:
          dataGenerator.randomParagraphs(),
        sozialeBewertungUnterBeruecksichtigungVonNachhaltigkeitsrisiken: dataGenerator.randomParagraphs(),
        sozialeNachhaltigkeitsrisikenAbsichern: dataGenerator.randomParagraphs(),
        quelle: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        vierAugenPruefung: dataGenerator.randomYesNo(),
        wennKeineVierAugenPruefungBitteBegruenden: dataGenerator.randomParagraphs(),
        beschreibungDerVierAugenPruefung: dataGenerator.randomParagraphs(),
      },
      paiSozial: {
        paiSozial: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      paiSozialesAufDemLand: {
        paiSozialesAufDemLand: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteSchluesselzahlen: dataGenerator.randomParagraphs(),
        datenerfassung: dataGenerator.randomParagraphs(),
        datenPlausibilitaetspruefung: dataGenerator.randomParagraphs(),
        datenquellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      sfdr: {
        methodikZurMessungDesSignifikantenBeitragsZuEinemGesellschaftlichenZiel: dataGenerator.randomParagraphs(),
      },
      kontroverseGeschaeftsfelderWaffen: {
        herstellungOderVertriebVonWaffenAusschluss: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteKennzahlFuerDieUmsatzmessung: dataGenerator.randomParagraphs(),
        methodikDerBerechnung: dataGenerator.randomParagraphs(),
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        ausschlussVerbotenerWaffen: dataGenerator.randomYesNo(),
        wennAuschlussNichtMoeglichBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteKennzahlZurAbbildungGeaechteterWaffen: dataGenerator.randomParagraphs(),
      },
      kontroverseGeschaeftsfelder: {
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
    },
    governance: {
      goodGovernance: {
        methodikDerGutenRegierungsfuehrung: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        definitionVonGuterRegierungsfuehrung: dataGenerator.randomParagraphs(),
        listeDerKpisFuerGuteUnternehmensfuehrung: dataGenerator.randomParagraphs(),
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      goodGovernanceUngc: {
        beruecksichtigungDesUngc: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        beruecksichtigungDerUngcBeschreibung: dataGenerator.randomParagraphs(),
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
      },
      bestechungUndKorruption: {
        kontroversenImBereichDerBestechungUndKorruption: dataGenerator.randomYesNo(),
        wennNeinBitteBegruenden: dataGenerator.randomParagraphs(),
        verwendeteMetrikenUndMethodik: dataGenerator.randomParagraphs(),
        verwendeteQuellen: dataGenerator.valueOrNull(
          generateArray(() => dataGenerator.guaranteedBaseDataPoint(dataGenerator.guaranteedShortString()), 1, 5, 0),
        ),
        dieAktualitaetDerKontroversenImBereichBestechungUndKorruption: dataGenerator.randomParagraphs(),
      },
    },
  };
}
