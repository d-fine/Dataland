import { DEFAULT_PROBABILITY, Generator } from "@e2e/utils/FakeFixtureUtils";
import { type FixtureData } from "@sharedUtils/Fixtures";
import { generateFixtureDataset } from "@e2e/fixtures/FixtureUtils";
import { type HeimathafenData } from "@clients/backend";

/**
 * Generates a set number of heimathafen fixtures
 * @param numFixtures the number of heimathafen fixtures to generate
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a set number of heimathafen fixtures
 */
export function generateHeimathafenFixtures(
  numFixtures: number,
  nullProbability = DEFAULT_PROBABILITY,
): FixtureData<HeimathafenData>[] {
  return generateFixtureDataset<HeimathafenData>(
    () => generateHeimathafenData(nullProbability),
    numFixtures,
    
  );
}

/**
 * Generates a random heimathafen dataset
 * @param nullProbability the probability (as number between 0 and 1) for "null" values in optional fields
 * @returns a random heimathafen dataset
 */
export function generateHeimathafenData(nullProbability = DEFAULT_PROBABILITY): HeimathafenData {
  const dataGenerator = new HeimathafenGenerator(nullProbability);
  return {
    general: {
        datenanbieter: {
            unternehmenseigentumUndEigentuemerstruktur: dataGenerator.randomShortString(),
            kernkompetenzenUndGeschaeftsbereiche: dataGenerator.randomShortString(),
            anzahlDerFuerEsgZustaendigenMitarbeiter: dataGenerator.randomFloat(),
        },
        methodik: {
            verstaendnisVonNachhaltigkeitAlsTeilDerBewertung: dataGenerator.randomShortString(),
            kriterienFuerIhreNachhaltigkeitsratings: dataGenerator.randomShortString(),
            verfahrenZurVorbereitungDerAnalyseOderMethodik: dataGenerator.randomShortString(),
            wieIstIhreBewertungsskalaDefiniert: dataGenerator.randomShortString(),
            bewertungAktuell: dataGenerator.randomShortString(),
            sindIhreBewertungenUnabhaengig: dataGenerator.randomShortString(),
            datenerfassung: dataGenerator.randomShortString(),
            dieMethodikUmfasstUmweltSozialesUndGovernance: dataGenerator.randomYesNo(),
            datenquelle: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefung: dataGenerator.randomShortString(),
            intervalleFuerDieDatenaktualisierung: dataGenerator.randomShortString(),
            zuverlaessigkeitDerMethodikSicherstellen: dataGenerator.randomShortString(),
            minimierenOderVerhindernSieSubjektiveFaktoren: dataGenerator.randomShortString(),
            listePotenziellerInteressenkonflikte: dataGenerator.randomShortString(),
            interessenkonfliktenEntgegenwirken: dataGenerator.randomShortString(),
            dokumentationDerDatenerfassungUndSicherstellungDesProzesses: dataGenerator.randomShortString(),
            bewertungVonQualitaetsstandards: dataGenerator.randomShortString(),
            ratingTransparenzstandards: dataGenerator.randomShortString(),
            qualitaetssicherungsprozess: dataGenerator.randomYesNo(),
            fallsNeinGebenSieBitteDieGruendeAn: dataGenerator.randomShortString(),
            strukturDesQualitaetssicherungsprozesses: dataGenerator.randomShortString(),
            dieAktualitaetDerMethodik: dataGenerator.randomShortString(),
            paisInDieAnalyseEinbezogen: dataGenerator.randomYesNo(),
            listeDerEingeschlossenenPais: dataGenerator.randomShortString(),
            quelleDerPaiSammlung: dataGenerator.randomShortString(),
            umgangMitAusreissern: dataGenerator.randomShortString(),
            identifizierungVonKontroversenGeschaeften: dataGenerator.randomShortString(),
            aktuelleKontroversen: dataGenerator.randomShortString(),
            kontroversenUmDieQuellenerfassung: dataGenerator.randomShortString(),
        },
        impactmerkmale: {
            sdgKeineArmut: dataGenerator.randomYesNo(),
            wennSdgKeineArmutNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgKeineArmut: dataGenerator.randomShortString(),
            datenerfassungFuerSdgKeineArmut: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgKeineArmut: dataGenerator.randomShortString(),
            datenquelleFuerSdgKeineArmut: dataGenerator.randomShortString(),
            sdgKeinHunger: dataGenerator.randomYesNo(),
            wennSdgKeinHungerNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgKeinHunger: dataGenerator.randomShortString(),
            datenerfassungFuerSdgKeinHunger: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgKeinHunger: dataGenerator.randomShortString(),
            datenquelleFuerSdgKeinHunger: dataGenerator.randomShortString(),
            sdgGesundheitUndWohlergehen: dataGenerator.randomYesNo(),
            wennSdgGesundheitUndWohlergehenNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgGesundheitUndWohlergehen: dataGenerator.randomShortString(),
            datenerfassungFuerSdgGesundheitUndWohlergehen: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgGesundheitUndWohlergehen: dataGenerator.randomShortString(),
            datenquelleFuerSdgGesundheitUndWohlergehen: dataGenerator.randomShortString(),
            sdgHochwertigeBildung: dataGenerator.randomYesNo(),
            wennSdgHochwertigeBildungNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgHochwertigeBildung: dataGenerator.randomShortString(),
            datenerfassungFuerSdgHochwertigeBildung: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgHochwertigeBildung: dataGenerator.randomShortString(),
            datenquelleFuerSdgHochwertigeBildung: dataGenerator.randomShortString(),
            sdgGeschlechtergleichheit: dataGenerator.randomYesNo(),
            wennSdgGeschlechtergleichheitNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgGeschlechtergleichheit: dataGenerator.randomShortString(),
            datenerfassungFuerSdgGeschlechtergleichheit: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgGeschlechtergleichheit: dataGenerator.randomShortString(),
            datenquelleFuerSdgGeschlechtergleichheit: dataGenerator.randomShortString(),
            sdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomYesNo(),
            wennSdgSauberesWasserUndSanitaereEinrichtungenNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
            datenerfassungFuerSdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
            datenquelleFuerSdgSauberesWasserUndSanitaereEinrichtungen: dataGenerator.randomShortString(),
            sdgBezahlbareUndSaubereEnergie: dataGenerator.randomYesNo(),
            wennSdgBezahlbareUndSaubereEnergieNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
            datenerfassungFuerSdgBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
            datenquelleFuerSdgBezahlbareUndSaubereEnergie: dataGenerator.randomShortString(),
            sdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomYesNo(),
            wennSdgMenschenwuerdigeArbeitUndWirtschaftswachstumNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
            datenerfassungFuerSdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
            datenquelleFuerSdgMenschenwuerdigeArbeitUndWirtschaftswachstum: dataGenerator.randomShortString(),
            sdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomYesNo(),
            wennSdgIndustrieInnovationUndInfrastrukturNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
            datenerfassungFuerSdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
            datenquelleFuerSdgIndustrieInnovationUndInfrastruktur: dataGenerator.randomShortString(),
            sdgWenigerUngleichheiten: dataGenerator.randomYesNo(),
            wennSdgWenigerUngleichheitenNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgWenigerUngleichheiten: dataGenerator.randomShortString(),
            datenerfassungFuerSdgWenigerUngleichheiten: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgWenigerUngleichheiten: dataGenerator.randomShortString(),
            datenquelleFuerSdgWenigerUngleichheiten: dataGenerator.randomShortString(),
            sdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomYesNo(),
            wennSdgNachhaltigeStaedteUndGemeindenNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
            datenerfassungFuerSdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
            datenquelleFuerSdgNachhaltigeStaedteUndGemeinden: dataGenerator.randomShortString(),
            sdgNachhaligerKonsumUndProduktion: dataGenerator.randomYesNo(),
            wennSdgNachhaligerKonsumUndProduktionNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
            datenerfassungFuerSdgNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
            datenquelleFuerSdgNachhaligerKonsumUndProduktion: dataGenerator.randomShortString(),
            sdgMassnahmenZumKlimaschutz: dataGenerator.randomYesNo(),
            wennSdgMassnahmenZumKlimaschutzNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
            datenerfassungFuerSdgMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
            datenquelleFuerSdgMassnahmenZumKlimaschutz: dataGenerator.randomShortString(),
            sdgLebenUnterWasser: dataGenerator.randomYesNo(),
            wennSdgLebenUnterWasserNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgLebenUnterWasser: dataGenerator.randomShortString(),
            datenerfassungFuerSdgLebenUnterWasser: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgLebenUnterWasser: dataGenerator.randomShortString(),
            datenquelleFuerSdgLebenUnterWasser: dataGenerator.randomShortString(),
            sdgLebenAnLand: dataGenerator.randomYesNo(),
            wennSdgLebenAnLandNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgLebenAnLand: dataGenerator.randomShortString(),
            datenerfassungFuerSdgLebenAnLand: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgLebenAnLand: dataGenerator.randomShortString(),
            datenquelleFuerSdgLebenAnLand: dataGenerator.randomShortString(),
            sdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomYesNo(),
            wennSdgFriedenGerechtigkeitUndStarkeInstitutionenNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
            datenerfassungFuerSdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
            datenquelleFuerSdgFriedenGerechtigkeitUndStarkeInstitutionen: dataGenerator.randomShortString(),
            sdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomYesNo(),
            wennSdgPartnerschaftenZurErreichungDerZieleNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
            datenerfassungFuerSdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
            datenquelleFuerSdgPartnerschaftenZurErreichungDerZiele: dataGenerator.randomShortString(),
        },
        implementierung: {
            angeboteneSprachen: dataGenerator.randomShortString(),
            bereitgestellteDokumentationsarten: dataGenerator.randomShortString(),
            bereitgestellteDokumentationAufDeutsch: dataGenerator.randomYesNo(),
            leistungstests: dataGenerator.randomYesNo(),
            sicherheitstests: dataGenerator.randomYesNo(),
            beschreibungDerSystemarchitektur: dataGenerator.randomShortString(),
            erforderlichesClientBetriebssystem: dataGenerator.randomShortString(),
            angebotFuerFetteDuenneZitrischeKunden: dataGenerator.randomYesNo(),
            serverBackup: dataGenerator.randomShortString(),
            standardisiertesKonzeptZurWiederherstellungImKatastrophenfall: dataGenerator.randomBaseDataPoint(dataGenerator.guaranteedYesNo()),
            stammUndBewegungsdatenLesen: dataGenerator.randomYesNo(),
            kompatibilitaetMitAnderenDatenquellen: dataGenerator.randomYesNo(),
            importDerErgebnisseInDasDataWarehouse: dataGenerator.randomYesNo(),
            erforderlichesDatenbanksystem: dataGenerator.randomShortString(),
            beschreibungDesDesignsUndDerStrukturDerDatenbankEn: dataGenerator.randomShortString(),
            direkterZugriffAufDieDatenbank: dataGenerator.randomYesNo(),
            schreibenderZugriffAufDieDatenbank: dataGenerator.randomYesNo(),
            unterstuetzungDerEchtzeitverarbeitung: dataGenerator.randomYesNo(),
            unterstuetzungFuerZeitnaheVerarbeitung: dataGenerator.randomYesNo(),
            unterstuetzungDerStapelverarbeitung: dataGenerator.randomYesNo(),
            unterstuetzteBiLoesung: dataGenerator.randomShortString(),
            flexibilitaetBeimImportExportVonDaten: dataGenerator.randomYesNo(),
            jederzeitVerfuegbar: dataGenerator.randomYesNo(),
            uebertragenVonDatenhistorien: dataGenerator.randomShortString(),
            unterstuetzterZeitraumDerDatenhistorien: dataGenerator.randomShortString(),
            fruehesterStartterminFuerEinIntegrationsprojekt: dataGenerator.randomFutureDate(),
            geschaetzterZeitrahmenFuerDieVollstaendigeIntegrationDesProjekts: dataGenerator.randomShortString(),
            durchschnittlicheAnzahlDerBenoetigtenRessourcen: dataGenerator.randomFloat(),
            anzahlDerVerfuegbarenRessourcen: dataGenerator.randomFloat(),
            kundenbetreuung: dataGenerator.randomFloat(),
        },
    },
    environmental: {
        nachhaltigskeitsrisiken: {
            methodikFuerOekologischeNachhaltigkeitsrisiken: dataGenerator.randomYesNo(),
            wennMethodikFuerOekologischeNachhaltigkeitsrisikenNeinBitteBegruenden: dataGenerator.randomShortString(),
            kartierteRisikenFuerDieOekologischeNachhaltigkeit: dataGenerator.randomShortString(),
            identifizierungDerWesentlichenRisikenFuerDieOekologischeNachhaltigkeitUndDerKonstruktionsmethodik: dataGenerator.randomShortString(),
            umweltbewertungUnterBeruecksichtigungVonNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
            risikenFuerDieOekologischeNachhaltigkeitAbsichern: dataGenerator.randomShortString(),
            quelle: dataGenerator.randomShortString(),
            vierAugenPruefung: dataGenerator.randomYesNo(),
            wennVierAugenPruefungNeinBitteBegruenden: dataGenerator.randomShortString(),
            beschreibungDerVierAugenPruefung: dataGenerator.randomShortString(),
        },
        pais: {
            sechsPaisTreibhausgasemissionen: dataGenerator.randomYesNo(),
            wennSechsPaisTreibhausgasemissionenNeinBitteBegruenden: dataGenerator.randomShortString(),
            wennJaBitteDiePaisAuflisten: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerSechsPaisTreibhausgasemissionen: dataGenerator.randomShortString(),
            datenerfassungFuerSechsPaisTreibhausgasemissionen: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerSechsPaisTreibhausgasemissionen: dataGenerator.randomShortString(),
            datenquelleFuerSechsPaisTreibhausgasemissionen: dataGenerator.randomShortString(),
            paisBiologischeVielfalt: dataGenerator.randomYesNo(),
            wennPaisBiologischeVielfaltNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerPaisBiologischeVielfalt: dataGenerator.randomShortString(),
            datenerfassungFuerPaisBiologischeVielfalt: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerPaisBiologischeVielfalt: dataGenerator.randomShortString(),
            datenquelleFuerPaisBiologischeVielfalt: dataGenerator.randomShortString(),
            paiWasser: dataGenerator.randomYesNo(),
            wennPaiWasserNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerPaiWasser: dataGenerator.randomShortString(),
            datenerfassungFuerPaiWasser: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerPaiWasser: dataGenerator.randomShortString(),
            datenquelleFuerPaiWasser: dataGenerator.randomShortString(),
            paiAbfall: dataGenerator.randomYesNo(),
            wennPaiAbfallNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerPaiAbfall: dataGenerator.randomShortString(),
            datenerfassungFuerPaiAbfall: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerPaiAbfall: dataGenerator.randomShortString(),
            datenquelleFuerPaiAbfall: dataGenerator.randomShortString(),
            paiUmweltAufDemLand: dataGenerator.randomYesNo(),
            wennPaiUmweltAufDemLandNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerPaiUmweltAufDemLand: dataGenerator.randomShortString(),
            datenerfassungFuerPaiUmweltAufDemLand: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerPaiUmweltAufDemLand: dataGenerator.randomShortString(),
            datenquelleFuerPaiUmweltAufDemLand: dataGenerator.randomShortString(),
        },
        sfdr: {
            methodikZurMessungEinesSignifikantenBeitragsZuEinemUmweltziel: dataGenerator.randomShortString(),
        },
        kontroverseGeschaeftsfelder: {
            ausschlussDerTabakerzeugung: dataGenerator.randomYesNo(),
            wennAusschlussDerTabakerzeugungNeinBitteBegruenden: dataGenerator.randomShortString(),
            metrischVerwendetFuerAusschlussDerTabakerzeugung: dataGenerator.randomShortString(),
            methodikDerBerechnungFuerAusschlussDerTabakerzeugung: dataGenerator.randomShortString(),
            verwendeteQuellenFuerAusschlussDerTabakerzeugung: dataGenerator.randomShortString(),
            ausschlussDerKohlefoerderungUndVerteilung: dataGenerator.randomYesNo(),
            wennAusschlussDerKohlefoerderungUndVerteilungNeinBitteBegruenden: dataGenerator.randomShortString(),
            metrischVerwendetFuerAusschlussDerKohlefoerderungUndVerteilung: dataGenerator.randomShortString(),
            methodikDerBerechnungFuerAusschlussDerKohlefoerderungUndVerteilung: dataGenerator.randomShortString(),
            verwendeteQuellenFuerAusschlussDerKohlefoerderungUndVerteilung: dataGenerator.randomShortString(),
        },
    },
    social: {
        nachhaltigskeitsrisiken: {
            methodikSozialeNachhaltigkeitsrisiken: dataGenerator.randomYesNo(),
            wennMethodikSozialeNachhaltigkeitsrisikenNeinBitteBegruenden: dataGenerator.randomShortString(),
            kartierteSozialeNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
            identifizierungWesentlicherSozialerNachhaltigkeitsrisikenUndKonstruktionsmethodik: dataGenerator.randomShortString(),
            sozialeBewertungUnterBeruecksichtigungVonNachhaltigkeitsrisiken: dataGenerator.randomShortString(),
            sozialeNachhaltigkeitsrisikenAbsichern: dataGenerator.randomShortString(),
            quelle: dataGenerator.randomShortString(),
            vierAugenPruefung: dataGenerator.randomYesNo(),
            wennVierAugenPruefungNeinBitteBegruenden: dataGenerator.randomShortString(),
            beschreibungDerVierAugenPruefung: dataGenerator.randomShortString(),
        },
        pais: {
            paiSozial: dataGenerator.randomYesNo(),
            wennPaiSozialNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerPaiSozial: dataGenerator.randomShortString(),
            datenerfassungFuerPaiSozial: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerPaiSozial: dataGenerator.randomShortString(),
            datenquelleFuerPaiSozial: dataGenerator.randomShortString(),
            paiSozialesAufDemLand: dataGenerator.randomYesNo(),
            wennPaiSozialesAufDemLandNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteSchluesselzahlenFuerPaiSozialesAufDemLand: dataGenerator.randomShortString(),
            datenerfassungFuerPaiSozialesAufDemLand: dataGenerator.randomShortString(),
            datenPlausibilitaetspruefungFuerPaiSozialesAufDemLand: dataGenerator.randomShortString(),
            datenquelleFuerPaiSozialesAufDemLand: dataGenerator.randomShortString(),
        },
        sfdr: {
            methodikZurMessungDesSignifikantenBeitragsZuEinemGesellschaftlichenZiel: dataGenerator.randomShortString(),
        },
        kontroverseGeschaeftsfelder: {
            herstellungOderVertriebVonWaffenAusschluss: dataGenerator.randomYesNo(),
            wennHerstellungOderVertriebVonWaffenAusschlussNeinBitteBegruenden: dataGenerator.randomShortString(),
            metrischVerwendetFuerHerstellungOderVertriebVonWaffenAusschluss: dataGenerator.randomShortString(),
            methodikDerBerechnungFuerHerstellungOderVertriebVonWaffenAusschluss: dataGenerator.randomShortString(),
            verwendeteQuellenFuerHerstellungOderVertriebVonWaffenAusschluss: dataGenerator.randomShortString(),
            ausschlussVerbotenerWaffen: dataGenerator.randomYesNo(),
            wennAusschlussVerbotenerWaffenNeinBitteBegruenden: dataGenerator.randomShortString(),
            metrischVerwendetFuerAusschlussVerbotenerWaffen: dataGenerator.randomShortString(),
            verwendeteQuellenFuerAusschlussVerbotenerWaffen: dataGenerator.randomShortString(),
        },
    },
    governance: {
        goodGovernance: {
            methodikDerGutenRegierungsfuehrung: dataGenerator.randomYesNo(),
            wennMethodikDerGutenRegierungsfuehrungNeinBitteBegruenden: dataGenerator.randomShortString(),
            definitionVonGuterRegierungsfuehrung: dataGenerator.randomShortString(),
            listeDerKpisFuerGuteUnternehmensfuehrung: dataGenerator.randomShortString(),
            verwendeteQuellenFuerMethodikDerGutenRegierungsfuehrung: dataGenerator.randomShortString(),
            beruecksichtigungDesUngc: dataGenerator.randomYesNo(),
            wennBeruecksichtigungDesUngcNeinBitteBegruenden: dataGenerator.randomShortString(),
            beruecksichtigungDerUngcBeschreibung: dataGenerator.randomShortString(),
            verwendeteQuellenFuerBeruecksichtigungDesUngc: dataGenerator.randomShortString(),
        },
        kontroverseGeschaeftsfelder: {
            kontroversenImBereichDerBestechungUndKorruption: dataGenerator.randomYesNo(),
            wennKontroversenImBereichDerBestechungUndKorruptionNeinBitteBegruenden: dataGenerator.randomShortString(),
            verwendeteMetrikenUndMethodik: dataGenerator.randomShortString(),
            verwendeteQuellenFuerKontroversenImBereichDerBestechungUndKorruption: dataGenerator.randomShortString(),
            dieAktualitaetDerKontroversenImBereichBestechungUndKorruption: dataGenerator.randomShortString(),
        },
    },
}
}

export class HeimathafenGenerator extends Generator {

}
