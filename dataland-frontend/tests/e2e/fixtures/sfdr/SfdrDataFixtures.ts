import { faker } from "@faker-js/faker";
import { SfdrData } from "@clients/backend";
import {
  generateNumericOrEmptyDatapoint,
  generateYesNoOrEmptyDatapoint,
  generateReferencedReports,
} from "@e2e/fixtures/common/DataPointFixtures";
import { randomYesNoNaUndefined } from "@e2e/fixtures/common/YesNoFixtures";
import { randomFutureDate } from "@e2e/fixtures/common/DateFixtures";
import { generateIso4217CurrencyCode } from "@e2e/fixtures/common/CurrencyFixtures";
import { randomEuroValue, randomNumber } from "@e2e/fixtures/common/NumberFixtures";

export function generateSfdrData(): SfdrData {
  const sfdr: SfdrData = {};
  const reports = generateReferencedReports();

  sfdr.fiscalYear = faker.datatype.string();
  sfdr.fiscalYearEnd = randomFutureDate();
  sfdr.annualReport = faker.datatype.string();
  sfdr.groupLevelAnnualReport = randomYesNoNaUndefined();
  sfdr.annualReport = faker.datatype.string();
  sfdr.annualReportDate = randomFutureDate();
  sfdr.annualReportCurrency = generateIso4217CurrencyCode();
  sfdr.sustainabilityReport = faker.datatype.string();
  sfdr.groupLevelSustainabilityReport = randomYesNoNaUndefined();
  sfdr.sustainabilityReportDate = randomFutureDate();
  sfdr.sustainabilityReportCurrency = generateIso4217CurrencyCode();
  sfdr.integratedReport = faker.datatype.string();
  sfdr.groupLevelIntegratedReport = randomYesNoNaUndefined();
  sfdr.integratedReportDate = randomFutureDate();
  sfdr.integratedReportCurrency = generateIso4217CurrencyCode();
  sfdr.esefReport = faker.datatype.string();
  sfdr.groupLevelEsefReport = randomYesNoNaUndefined();
  sfdr.esefReportDate = randomFutureDate();
  sfdr.esefReportCurrency = generateIso4217CurrencyCode();
  sfdr.scopeOfEntities = randomYesNoNaUndefined();
  sfdr.scope1 = generateNumericOrEmptyDatapoint(reports);
  sfdr.scope2 = generateNumericOrEmptyDatapoint(reports);
  sfdr.scope3 = generateNumericOrEmptyDatapoint(reports);
  sfdr.enterpriseValue = generateNumericOrEmptyDatapoint(reports, randomEuroValue());
  sfdr.totalRevenue = generateNumericOrEmptyDatapoint(reports, randomEuroValue());
  sfdr.fossilFuelSectorExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.renewableEnergyProduction = generateNumericOrEmptyDatapoint(reports);
  sfdr.renewableEnergyConsumption = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumption = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyProduction = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceA = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceB = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceC = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceD = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceE = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceF = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceG = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceH = generateNumericOrEmptyDatapoint(reports);
  sfdr.highImpactClimateSectorEnergyConsumptionNaceL = generateNumericOrEmptyDatapoint(reports);
  sfdr.totalHighImpactClimateSectorEnergyConsumption = generateNumericOrEmptyDatapoint(reports);
  sfdr.primaryForestAndWoodedLandOfNativeSpeciesExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.protectedAreasExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.rareOrEndangeredEcosystemsExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.emissionsToWater = generateNumericOrEmptyDatapoint(reports);
  sfdr.hazardousWaste = generateNumericOrEmptyDatapoint(reports);
  sfdr.humanRightsPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.humanRightsLegalProceedings = generateYesNoOrEmptyDatapoint(reports);
  sfdr.iloCoreLabourStandards = generateYesNoOrEmptyDatapoint(reports);
  sfdr.environmentalPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.corruptionLegalProceedings = generateYesNoOrEmptyDatapoint(reports);
  sfdr.transparencyDisclosurePolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.humanRightsDueDiligencePolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.childForcedDiscriminationPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.iso14001 = generateYesNoOrEmptyDatapoint(reports);
  sfdr.briberyCorruptionPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.fairBusinessMarketingAdvertisingPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.technologiesExpertiseTransferPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.fairCompetitionPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.violationOfTaxRulesAndRegulation = generateYesNoOrEmptyDatapoint(reports);
  sfdr.unGlobalCompactPrinciplesCompliancePolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.oecdGuidelinesForMultinationalEnterprisesPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.averageGrossHourlyEarningsMaleEmployees = generateNumericOrEmptyDatapoint(reports, randomEuroValue(0, 100));
  sfdr.averageGrossHourlyEarningsFemaleEmployees = generateNumericOrEmptyDatapoint(reports, randomEuroValue(0, 100));
  sfdr.femaleBoardMembers = generateNumericOrEmptyDatapoint(reports);
  sfdr.maleBoardMembers = generateNumericOrEmptyDatapoint(reports);
  sfdr.controversialWeaponsExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.inorganicPollutants = generateNumericOrEmptyDatapoint(reports);
  sfdr.airPollutants = generateNumericOrEmptyDatapoint(reports);
  sfdr.ozoneDepletionSubstances = generateNumericOrEmptyDatapoint(reports);
  sfdr.carbonReductionInitiatives = generateYesNoOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionFossilFuels = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionCrudeOil = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionNaturalGas = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionLignite = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionCoal = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionNuclearEnergy = generateNumericOrEmptyDatapoint(reports);
  sfdr.nonRenewableEnergyConsumptionOther = generateNumericOrEmptyDatapoint(reports);
  sfdr.waterConsumption = generateNumericOrEmptyDatapoint(reports);
  sfdr.waterReused = generateNumericOrEmptyDatapoint(reports);
  sfdr.waterManagementPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.waterStressAreaExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.manufactureOfAgrochemicalPesticidesProducts = generateYesNoOrEmptyDatapoint(reports);
  sfdr.landDegradationDesertificationSoilSealingExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.sustainableAgriculturePolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.sustainableOceansAndSeasPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.wasteNonRecycled = generateNumericOrEmptyDatapoint(reports);
  sfdr.threatenedSpeciesExposure = generateYesNoOrEmptyDatapoint(reports);
  sfdr.biodiversityProtectionPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.deforestationPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.securitiesNotCertifiedAsGreen = generateYesNoOrEmptyDatapoint(reports);
  sfdr.workplaceAccidentPreventionPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.rateOfAccidents = generateNumericOrEmptyDatapoint(reports);
  sfdr.workdaysLost = generateNumericOrEmptyDatapoint(reports, randomNumber(10000));
  sfdr.supplierCodeOfConduct = generateYesNoOrEmptyDatapoint(reports);
  sfdr.grievanceHandlingMechanism = generateYesNoOrEmptyDatapoint(reports);
  sfdr.whistleblowerProtectionPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.reportedIncidentsOfDiscrimination = generateNumericOrEmptyDatapoint(reports);
  sfdr.sanctionsIncidentsOfDiscrimination = generateNumericOrEmptyDatapoint(reports);
  sfdr.ceoToEmployeePayGap = generateNumericOrEmptyDatapoint(reports);
  sfdr.humanRightsDueDiligence = generateYesNoOrEmptyDatapoint(reports);
  sfdr.traffickingInHumanBeingsPolicy = generateYesNoOrEmptyDatapoint(reports);
  sfdr.reportedChildLabourIncidents = generateYesNoOrEmptyDatapoint(reports);
  sfdr.reportedForcedOrCompulsoryLabourIncidents = generateYesNoOrEmptyDatapoint(reports);
  sfdr.reportedIncidentsOfHumanRights = generateNumericOrEmptyDatapoint(reports);
  sfdr.reportedCasesOfBriberyCorruption = generateYesNoOrEmptyDatapoint(reports);
  sfdr.reportedConvictionsOfBriberyCorruption = generateNumericOrEmptyDatapoint(reports);
  sfdr.reportedFinesOfBriberyCorruption = generateNumericOrEmptyDatapoint(reports, randomEuroValue());
  sfdr.referencedReports = reports;
  return sfdr;
}
