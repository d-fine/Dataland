// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
package org.dataland.datalandbackend.frameworks.additionalcompanyinformation.model.validator

import jakarta.validation.Constraint
import jakarta.validation.ConstraintValidator
import jakarta.validation.ConstraintValidatorContext
import jakarta.validation.Payload
import org.dataland.datalandbackend.frameworks.additionalcompanyinformation.model.AdditionalCompanyInformationData
import org.dataland.datalandbackend.model.documents.CompanyReport
import kotlin.reflect.KClass

/**
* Annotation for the validation of referenced reports list for additional-company-information
*/

@Constraint(validatedBy = [ReferencedReportsListConstraintValidator::class])
@Target(AnnotationTarget.FIELD, AnnotationTarget.CLASS)
annotation class ReferencedReportsListValidator(
    val message: String = "The list of referenced reports is not complete. Please ensure that any file used as a " +
        "data source in the dataset is included in the list of referenced reports.",
    val groups: Array<KClass<*>> = [],
    val payload: Array<KClass<out Payload>> = [],
)

/**
* Class holding the validation logic for referenced reports list. It checks if the referenced reports list is complete
*/
class ReferencedReportsListConstraintValidator :
    ConstraintValidator<ReferencedReportsListValidator, AdditionalCompanyInformationData> {

    override fun isValid(dataset: AdditionalCompanyInformationData?, context: ConstraintValidatorContext?): Boolean {
        if (dataset == null) {
            return false
        }
        val referencedReportsMap = dataset.general?.general?.referencedReports
        val referencedReportsFileReference = getFileReferencesFromReports(referencedReportsMap)

        val extendedDocumentsFileReferences = getExtendedDocumentReferences(dataset).filterNotNull()
        return extendedDocumentsFileReferences.all {
            referencedReportsFileReference.contains(it)
        }
    }

    private fun getFileReferencesFromReports(map: Map<String, CompanyReport>?): List<String> {
        if(map == null) return emptyList()
        val referencedReportsList = mutableListOf<String>()
            for (entry in map.entries) {
            referencedReportsList.add(entry.value.fileReference)
            }
        return referencedReportsList
    }

    @Suppress("MaxLineLength", "LongMethod")
    private fun getExtendedDocumentReferences(dataset: AdditionalCompanyInformationData): List<String?> {
        return listOf(
            dataset.general?.general?.fiscalYearDeviation?.dataSource?.fileReference,
            dataset.general?.general?.fiscalYearEnd?.dataSource?.fileReference,
            dataset.general?.financialInformation?.equity?.dataSource?.fileReference,
            dataset.general?.financialInformation?.debt?.dataSource?.fileReference,
            dataset.general?.financialInformation?.balanceSheetTotal?.dataSource?.fileReference,
            dataset.general?.financialInformation?.evic?.dataSource?.fileReference,
        )
    }
}