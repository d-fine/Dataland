// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
package org.dataland.datalandbackend.frameworks.additionalcompanyinformation

import com.fasterxml.jackson.databind.ObjectMapper
import io.swagger.v3.oas.annotations.Operation
import org.dataland.datalandbackend.controller.DataController
import org.dataland.datalandbackend.frameworks.additionalcompanyinformation.model.AdditionalCompanyInformationData
import org.dataland.datalandbackend.model.companies.CompanyAssociatedData
import org.dataland.datalandbackend.model.metainformation.DataAndMetaInformation
import org.dataland.datalandbackend.model.metainformation.DataMetaInformation
import org.dataland.datalandbackend.services.CompanyQueryManager
import org.dataland.datalandbackend.services.DataExportService
import org.dataland.datalandbackend.services.DataMetaInformationManager
import org.dataland.datalandbackend.services.datapoints.AssembledDataManager
import org.dataland.datalandbackendutils.model.ExportFileType
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.core.io.InputStreamResource
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

/**
 * Controller for the additional-company-information framework endpoints
 * @param dataManager data manager to be used
 * @param objectMapper object mapper used for converting data classes to strings and vice versa
 */
@RequestMapping("/data/additional-company-information")
@RestController
class AdditionalCompanyInformationDataController(
    @Autowired var dataManager: AssembledDataManager,
    @Autowired var metaDataManager: DataMetaInformationManager,
    @Autowired var dataExportService: DataExportService,
    @Autowired var companyQueryManager: CompanyQueryManager,
    @Autowired var objectMapper: ObjectMapper,
) : DataController<AdditionalCompanyInformationData>(
        dataManager,
        metaDataManager,
        dataExportService,
        objectMapper,
        companyQueryManager,
        AdditionalCompanyInformationData::class.java,
    ) {
    @Operation(operationId = "getCompanyAssociatedAdditionalCompanyInformationData")
    override fun getCompanyAssociatedData(dataId: String): ResponseEntity<CompanyAssociatedData<AdditionalCompanyInformationData>> =
        super.getCompanyAssociatedData(dataId)

    @Operation(operationId = "getCompanyAssociatedAdditionalCompanyInformationDataByDimensions")
    override fun getCompanyAssociatedDataByDimensions(
        reportingPeriod: String,
        companyId: String,
    ): ResponseEntity<CompanyAssociatedData<AdditionalCompanyInformationData>> =
        super
            .getCompanyAssociatedDataByDimensions(reportingPeriod, companyId)

    @Operation(operationId = "postCompanyAssociatedAdditionalCompanyInformationData")
    override fun postCompanyAssociatedData(
        companyAssociatedData: CompanyAssociatedData<AdditionalCompanyInformationData>,
        bypassQa: Boolean,
    ): ResponseEntity<DataMetaInformation> = super.postCompanyAssociatedData(companyAssociatedData, bypassQa)

    @Operation(operationId = "exportCompanyAssociatedAdditionalCompanyInformationDataByDimensions")
    override fun exportCompanyAssociatedDataByDimensions(
        reportingPeriods: List<String>,
        companyIds: List<String>,
        exportFileType: ExportFileType,
        keepValueFieldsOnly: Boolean,
    ): ResponseEntity<InputStreamResource> =
        super
            .exportCompanyAssociatedDataByDimensions(reportingPeriods, companyIds, exportFileType, keepValueFieldsOnly)

    @Operation(operationId = "getAllCompanyAdditionalCompanyInformationData")
    override fun getFrameworkDatasetsForCompany(
        companyId: String,
        showOnlyActive: Boolean,
        reportingPeriod: String?,
    ): ResponseEntity<List<DataAndMetaInformation<AdditionalCompanyInformationData>>> =
        super
            .getFrameworkDatasetsForCompany(companyId, showOnlyActive, reportingPeriod)
}
