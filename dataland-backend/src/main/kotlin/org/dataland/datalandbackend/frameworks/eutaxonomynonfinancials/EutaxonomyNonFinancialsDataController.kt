// <--WARNING--> THIS FILE IS AUTO-GENERATED BY THE FRAMEWORK-TOOLBOX AND WILL BE OVERWRITTEN
package org.dataland.datalandbackend.frameworks.eutaxonomynonfinancials

import com.fasterxml.jackson.databind.ObjectMapper
import io.swagger.v3.oas.annotations.Operation
import org.dataland.datalandbackend.controller.DataController
import org.dataland.datalandbackend.frameworks.eutaxonomynonfinancials.model.EutaxonomyNonFinancialsData
import org.dataland.datalandbackend.model.companies.CompanyAssociatedData
import org.dataland.datalandbackend.model.metainformation.DataAndMetaInformation
import org.dataland.datalandbackend.model.metainformation.DataMetaInformation
import org.dataland.datalandbackend.services.CompanyQueryManager
import org.dataland.datalandbackend.services.DataExportService
import org.dataland.datalandbackend.services.DataMetaInformationManager
import org.dataland.datalandbackend.services.datapoints.AssembledDataManager
import org.dataland.datalandbackendutils.model.ExportFileType
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.core.io.InputStreamResource
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

/**
 * Controller for the eutaxonomy-non-financials framework endpoints
 * @param datasetStorageService service to handle data storage
 * @param dataMetaInformationManager service for retrieving data meta-information
 * @param dataExportService service for handling data export to CSV and JSON
 * @param objectMapper the mapper to transform strings into classes and vice versa
 * @param companyQueryManager service to retrieve company information
 */
@RequestMapping("/data/eutaxonomy-non-financials")
@RestController
class EutaxonomyNonFinancialsDataController
    @Autowired
    constructor(
        datasetStorageService: AssembledDataManager,
        dataMetaInformationManager: DataMetaInformationManager,
        dataExportService: DataExportService,
        companyQueryManager: CompanyQueryManager,
        objectMapper: ObjectMapper,
    ) : DataController<EutaxonomyNonFinancialsData>(
            datasetStorageService,
            dataMetaInformationManager,
            dataExportService,
            objectMapper,
            companyQueryManager,
            EutaxonomyNonFinancialsData::class.java,
        ) {
        @Operation(operationId = "getCompanyAssociatedEutaxonomyNonFinancialsData")
        override fun getCompanyAssociatedData(dataId: String): ResponseEntity<CompanyAssociatedData<EutaxonomyNonFinancialsData>> =
            super.getCompanyAssociatedData(dataId)

        @Operation(operationId = "getCompanyAssociatedEutaxonomyNonFinancialsDataByDimensions")
        override fun getCompanyAssociatedDataByDimensions(
            reportingPeriod: String,
            companyId: String,
        ): ResponseEntity<CompanyAssociatedData<EutaxonomyNonFinancialsData>> =
            super
                .getCompanyAssociatedDataByDimensions(reportingPeriod, companyId)

        @Operation(operationId = "postCompanyAssociatedEutaxonomyNonFinancialsData")
        override fun postCompanyAssociatedData(
            companyAssociatedData: CompanyAssociatedData<EutaxonomyNonFinancialsData>,
            bypassQa: Boolean,
        ): ResponseEntity<DataMetaInformation> = super.postCompanyAssociatedData(companyAssociatedData, bypassQa)

        @Operation(operationId = "exportCompanyAssociatedEutaxonomyNonFinancialsDataByDimensions")
        override fun exportCompanyAssociatedDataByDimensions(
            reportingPeriods: List<String>,
            companyIds: List<String>,
            exportFileType: ExportFileType,
            keepValueFieldsOnly: Boolean,
            includeAliases: Boolean,
        ): ResponseEntity<InputStreamResource> =
            super
                .exportCompanyAssociatedDataByDimensions(reportingPeriods, companyIds, exportFileType, keepValueFieldsOnly, includeAliases)

        @Operation(operationId = "getAllCompanyEutaxonomyNonFinancialsData")
        override fun getFrameworkDatasetsForCompany(
            companyId: String,
            showOnlyActive: Boolean,
            reportingPeriod: String?,
        ): ResponseEntity<List<DataAndMetaInformation<EutaxonomyNonFinancialsData>>> =
            super
                .getFrameworkDatasetsForCompany(companyId, showOnlyActive, reportingPeriod)
    }
